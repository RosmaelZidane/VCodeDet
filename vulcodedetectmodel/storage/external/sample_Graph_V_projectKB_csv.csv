id,commit_ID,project,func_before,func_after,diff_lines,vul
4885,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm, AtomicReference<Response> response) {
response.set(realm.flows().copy(""nosuch"", Collections.<String, String>emptyMap()));
}
}","public class main {
public void invoke(RealmResource realm, AtomicReference<Response> response) {
response.set(realm.testLDAPConnection(""nosuch"", ""nosuch"", ""nosuch"", ""nosuch"", ""nosuch"", ""nosuch""));
}
}","- response.set(realm.flows().copy(""nosuch"", Collections.<String, String>emptyMap()));+ response.set(realm.testLDAPConnection(""nosuch"", ""nosuch"", ""nosuch"", ""nosuch"", ""nosuch"", ""nosuch""));",1
18468,23655fe0c15189ca41a6e99c31a3c38001a7cdb0,ProjectKB,"public class main {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
}","public class main {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
}","- String body = exchange.getIn().getBody(String.class);+ MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);- assertNotNull(body);+ assertNotNull(cool);- assertEquals(""Hello World"", body);- MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");+ assertEquals(123, cool.getId());+ assertEquals(""Camel"", cool.getName());+ exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");- exchange.getOut().setBody(reply);+ exchange.getOut().setBody(""OK"");- exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);",1
5373,0e28bee0f155b9bf240b4bafc4646e4810cb23f,ProjectKB,"public class main {
protected Mono<Resource> getResource(ServerWebExchange exchange) {
String name = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;
PathContainer pathWithinHandler = exchange.getRequiredAttribute(name);
String path = processPath(pathWithinHandler.value());
if (!StringUtils.hasText(path) || isInvalidPath(path)) {
if (logger.isTraceEnabled()) {
logger.trace(""Ignoring invalid resource path ["" + path + ""]"");
}
return Mono.empty();
}
if (path.contains(""%"")) {
try {
if (isInvalidPath(URLDecoder.decode(path, ""UTF-8""))) {
if (logger.isTraceEnabled()) {
logger.trace(""Ignoring invalid resource path with escape sequences ["" + path + ""]."");
}
return Mono.empty();
}
}
catch (IllegalArgumentException ex) {
}
catch (UnsupportedEncodingException ex) {
return Mono.error(Exceptions.propagate(ex));
}
}
ResourceResolverChain resolveChain = createResolverChain();
return resolveChain.resolveResource(exchange, path, getLocations())
.flatMap(resource -> {
ResourceTransformerChain transformerChain = createTransformerChain(resolveChain);
return transformerChain.transform(exchange, resource);
});
}
}","public class main {
protected Mono<Resource> getResource(ServerWebExchange exchange) {
String name = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;
PathContainer pathWithinHandler = exchange.getRequiredAttribute(name);
String path = processPath(pathWithinHandler.value());
if (!StringUtils.hasText(path) || isInvalidPath(path)) {
if (logger.isTraceEnabled()) {
logger.trace(""Ignoring invalid resource path ["" + path + ""]"");
}
return Mono.empty();
}
if (path.contains(""%"")) {
try {
String decodedPath = URLDecoder.decode(path, ""UTF-8"");
if (isInvalidPath(decodedPath)) {
if (logger.isTraceEnabled()) {
logger.trace(""Ignoring invalid resource path with escape sequences ["" + path + ""]."");
}
return Mono.empty();
}
decodedPath = processPath(decodedPath);
if (isInvalidPath(decodedPath)) {
if (logger.isTraceEnabled()) {
logger.trace(""Ignoring invalid resource path with escape sequences ["" + path + ""]."");
}
return Mono.empty();
}
}
catch (IllegalArgumentException ex) {
}
catch (UnsupportedEncodingException ex) {
return Mono.error(Exceptions.propagate(ex));
}
}
ResourceResolverChain resolveChain = createResolverChain();
return resolveChain.resolveResource(exchange, path, getLocations())
.flatMap(resource -> {
ResourceTransformerChain transformerChain = createTransformerChain(resolveChain);
return transformerChain.transform(exchange, resource);
});
}
}","- if (isInvalidPath(URLDecoder.decode(path, ""UTF-8""))) {+ String decodedPath = URLDecoder.decode(path, ""UTF-8"");+ if (isInvalidPath(decodedPath)) {+ if (logger.isTraceEnabled()) {+ logger.trace(""Ignoring invalid resource path with escape sequences ["" + path + ""]."");+ }+ return Mono.empty();+ }+ decodedPath = processPath(decodedPath);+ if (isInvalidPath(decodedPath)) {",1
4974,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
clients.get(AdminRoles.QUERY_CLIENTS).realm(REALM_NAME).users().search(""test"");
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- clients.get(AdminRoles.QUERY_CLIENTS).realm(REALM_NAME).users().search(""test"");+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
1038,f7f0b18f6924fe0b01f32a25ed1e38e29b1bf8e5,ProjectKB,"public class main {
protected void service(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
log.trace(""Service: {}"", request);
HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());
if (consumer == null) {
response.sendError(HttpServletResponse.SC_NOT_FOUND);
return;
}
if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
Iterator it = ObjectHelper.createIterable(consumer.getEndpoint().getHttpMethodRestrict()).iterator();
boolean match = false;
while (it.hasNext()) {
String method = it.next().toString();
if (method.equalsIgnoreCase(request.getMethod())) {
match = true;
break;
}
}
if (!match) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
}
if (""TRACE"".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
final Exchange result = (Exchange) request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
if (result == null) {
final Continuation continuation = ContinuationSupport.getContinuation(request);
if (continuation.isInitial() && continuationTimeout != null) {
continuation.setTimeout(continuationTimeout);
}
if (consumer.isSuspended() && continuation.isInitial()) {
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
if (continuation.isExpired()) {
String id = (String) continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
expiredExchanges.put(id, id);
log.warn(""Continuation expired of exchangeId: {}"", id);
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
final Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut);
if (consumer.getEndpoint().isBridgeEndpoint()) {
exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);
exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE);
}
if (consumer.getEndpoint().isDisableStreamCache()) {
exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE);
}
HttpHelper.setCharsetFromContentType(request.getContentType(), exchange);
exchange.setIn(new HttpMessage(exchange, request, response));
String contextPath = consumer.getEndpoint().getPath();
exchange.getIn().setHeader(""CamelServletContextPath"", contextPath);
String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH);
if (contextPath != null
&& httpPath.startsWith(contextPath)) {
exchange.getIn().setHeader(Exchange.HTTP_PATH,
httpPath.substring(contextPath.length()));
}
if (log.isTraceEnabled()) {
log.trace(""Suspending continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());
try {
consumer.createUoW(exchange);
} catch (Exception e) {
log.error(""Error processing request"", e);
throw new ServletException(e);
}
continuation.suspend();
ClassLoader oldTccl = overrideTccl(exchange);
if (log.isTraceEnabled()) {
log.trace(""Processing request for exchangeId: {}"", exchange.getExchangeId());
}
consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {
public void done(boolean doneSync) {
boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;
if (!expired) {
if (log.isTraceEnabled()) {
log.trace(""Resuming continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME, exchange);
continuation.resume();
} else {
log.warn(""Cannot resume expired continuation of exchangeId: {}"", exchange.getExchangeId());
}
}
});
if (oldTccl != null) {
restoreTccl(exchange, oldTccl);
}
return;
}
try {
if (log.isTraceEnabled()) {
log.trace(""Resumed continuation and writing response for exchangeId: {}
}","public class main {
protected void service(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
log.trace(""Service: {}"", request);
HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());
if (consumer == null) {
response.sendError(HttpServletResponse.SC_NOT_FOUND);
return;
}
if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
Iterator it = ObjectHelper.createIterable(consumer.getEndpoint().getHttpMethodRestrict()).iterator();
boolean match = false;
while (it.hasNext()) {
String method = it.next().toString();
if (method.equalsIgnoreCase(request.getMethod())) {
match = true;
break;
}
}
if (!match) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
}
if (""TRACE"".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
String contentType = request.getContentType();
if (HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType) && !consumer.getEndpoint().getComponent().isAllowJavaSerializedObject()) {
System.out.println(""415 miser !!!"");
response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
return;
}
final Exchange result = (Exchange) request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
if (result == null) {
final Continuation continuation = ContinuationSupport.getContinuation(request);
if (continuation.isInitial() && continuationTimeout != null) {
continuation.setTimeout(continuationTimeout);
}
if (consumer.isSuspended() && continuation.isInitial()) {
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
if (continuation.isExpired()) {
String id = (String) continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
expiredExchanges.put(id, id);
log.warn(""Continuation expired of exchangeId: {}"", id);
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
final Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut);
if (consumer.getEndpoint().isBridgeEndpoint()) {
exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);
exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE);
}
if (consumer.getEndpoint().isDisableStreamCache()) {
exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE);
}
HttpHelper.setCharsetFromContentType(request.getContentType(), exchange);
exchange.setIn(new HttpMessage(exchange, request, response));
String contextPath = consumer.getEndpoint().getPath();
exchange.getIn().setHeader(""CamelServletContextPath"", contextPath);
String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH);
if (contextPath != null
&& httpPath.startsWith(contextPath)) {
exchange.getIn().setHeader(Exchange.HTTP_PATH,
httpPath.substring(contextPath.length()));
}
if (log.isTraceEnabled()) {
log.trace(""Suspending continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());
try {
consumer.createUoW(exchange);
} catch (Exception e) {
log.error(""Error processing request"", e);
throw new ServletException(e);
}
continuation.suspend();
ClassLoader oldTccl = overrideTccl(exchange);
if (log.isTraceEnabled()) {
log.trace(""Processing request for exchangeId: {}"", exchange.getExchangeId());
}
consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {
public void done(boolean doneSync) {
boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;
if (!expired) {
if (log.isTraceEnabled()) {
log.trace(""Resuming continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME, exchange);
continuation.resume();
} else {
log.warn(""Cannot resume expired continuation of exchangeId: {}"", exchange.getExchangeId());
}
}
});
if (oldTccl != null) {
restoreTccl(exchange, oldTccl);
}
return;
}
try {
if (log.isTraceEnabled()) {
log.trace(""Resumed continuation and writing response for exchangeId: {}
}","+ return;+ }+ String contentType = request.getContentType();+ if (HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType) && !consumer.getEndpoint().getComponent().isAllowJavaSerializedObject()) {+ System.out.println(""415 miser !!!"");+ response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);",1
19503,c3ad22234ef84d06d04d908b3c94c0d11df8afd,ProjectKB,"public class main {
public void testEncryptHeader() throws Exception {
ENCRYPT.EncryptHeader hdr=new ENCRYPT.EncryptHeader((short)1, null);
_testSize(hdr);
hdr=new ENCRYPT.EncryptHeader((short)2, ""Hello world"");
_testSize(hdr);
}
}","public class main {
public void testEncryptHeader() throws Exception {
ENCRYPT.EncryptHeader hdr=new ENCRYPT.EncryptHeader((short)1, null);
_testSize(hdr);
hdr=new ENCRYPT.EncryptHeader((short)2, ""Hello world"");
_testSize(hdr);
EncryptHeader hdr2=new EncryptHeader((byte)1, new byte[]{'b','e', 'l', 'a'});
_testSize(hdr2);
hdr2=new EncryptHeader((byte)2, ""Hello world"".getBytes());
_testSize(hdr2);
}
}","+ EncryptHeader hdr2=new EncryptHeader((byte)1, new byte[]{'b','e', 'l', 'a'});+ _testSize(hdr2);+ hdr2=new EncryptHeader((byte)2, ""Hello world"".getBytes());+ _testSize(hdr2);",1
6685,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public synchronized void syncBlobs() {
try {
LOG.debug(""Sync blobs - blobstore keys {}, zookeeper keys {}"",getBlobStoreKeySet(), getZookeeperKeySet());
zkClient = BlobStoreUtils.createZKClient(conf);
deleteKeySetFromBlobStoreNotOnZookeeper(getBlobStoreKeySet(), getZookeeperKeySet());
updateKeySetForBlobStore(getBlobStoreKeySet());
Set<String> keySetToDownload = getKeySetToDownload(getBlobStoreKeySet(), getZookeeperKeySet());
LOG.debug(""Key set Blobstore-> Zookeeper-> DownloadSet {}-> {}-> {}"", getBlobStoreKeySet(), getZookeeperKeySet(), keySetToDownload);
for (String key : keySetToDownload) {
try {
Set<NimbusInfo> nimbusInfoSet = BlobStoreUtils.getNimbodesWithLatestSequenceNumberOfBlob(zkClient, key);
if (BlobStoreUtils.downloadMissingBlob(conf, blobStore, key, nimbusInfoSet)) {
BlobStoreUtils.createStateInZookeeper(conf, key, nimbusInfo);
}
} catch (KeyNotFoundException e) {
LOG.debug(""Detected deletion for the key {} while downloading - skipping download"", key);
}
}","public class main {
public synchronized void syncBlobs() {
try {
LOG.debug(""Sync blobs - blobstore keys {}, zookeeper keys {}"",getBlobStoreKeySet(), getZookeeperKeySet());
zkClient = BlobStoreUtils.createZKClient(conf, ZooDefs.Ids.CREATOR_ALL_ACL);
deleteKeySetFromBlobStoreNotOnZookeeper(getBlobStoreKeySet(), getZookeeperKeySet());
updateKeySetForBlobStore(getBlobStoreKeySet());
Set<String> keySetToDownload = getKeySetToDownload(getBlobStoreKeySet(), getZookeeperKeySet());
LOG.debug(""Key set Blobstore-> Zookeeper-> DownloadSet {}-> {}-> {}"", getBlobStoreKeySet(), getZookeeperKeySet(), keySetToDownload);
for (String key : keySetToDownload) {
try {
Set<NimbusInfo> nimbusInfoSet = BlobStoreUtils.getNimbodesWithLatestSequenceNumberOfBlob(zkClient, key);
if (BlobStoreUtils.downloadMissingBlob(conf, blobStore, key, nimbusInfoSet)) {
BlobStoreUtils.createStateInZookeeper(conf, key, nimbusInfo);
}
} catch (KeyNotFoundException e) {
LOG.debug(""Detected deletion for the key {} while downloading - skipping download"", key);
}
}","- zkClient = BlobStoreUtils.createZKClient(conf);+ zkClient = BlobStoreUtils.createZKClient(conf, ZooDefs.Ids.CREATOR_ALL_ACL);",1
14269,fd85803a73ad46f36816bcb55ed1c4f4b4c4312,ProjectKB,"public class main {
public void initializeAttachments() throws IOException {
initializeRootMessage();
attachments = new LazyAttachmentCollection(this);
message.setAttachments(attachments);
}
}","public class main {
public void initializeAttachments() throws IOException {
initializeRootMessage();
Object maxCountProperty = message.getContextualProperty(AttachmentDeserializer.ATTACHMENT_MAX_COUNT);
int maxCount = 50;
if (maxCountProperty != null) {
if (maxCountProperty instanceof Integer) {
maxCount = (Integer)maxCountProperty;
} else {
maxCount = Integer.parseInt((String)maxCountProperty);
}
}
attachments = new LazyAttachmentCollection(this, maxCount);
message.setAttachments(attachments);
}
}","+ Object maxCountProperty = message.getContextualProperty(AttachmentDeserializer.ATTACHMENT_MAX_COUNT);+ int maxCount = 50;+ if (maxCountProperty != null) {+ if (maxCountProperty instanceof Integer) {+ maxCount = (Integer)maxCountProperty;+ } else {+ maxCount = Integer.parseInt((String)maxCountProperty);+ }+ }- attachments = new LazyAttachmentCollection(this);+ attachments = new LazyAttachmentCollection(this, maxCount);",1
4272,69c57c8c5f7336b3ffefcc88fd49b51b8f5f4bf,ProjectKB,"public class main {
public void realWriteBytes(ByteBuffer buf) throws IOException {
if (closed) {
return;
}
if (coyoteResponse == null) {
return;
}
if (buf.remaining() > 0) {
try {
coyoteResponse.doWrite(buf);
} catch (IOException e) {
throw new ClientAbortException(e);
}
}
}
}","public class main {
public void realWriteBytes(ByteBuffer buf) throws IOException {
if (closed) {
return;
}
if (coyoteResponse == null) {
return;
}
if (buf.remaining() > 0) {
try {
coyoteResponse.doWrite(buf);
} catch (CloseNowException e) {
closed = true;
throw e;
} catch (IOException e) {
throw new ClientAbortException(e);
}
}
}
}",+ } catch (CloseNowException e) {+ closed = true;+ throw e;,1
1406,7a8f157f7e2feed2d0ebb63b163ff735b6340b9,ProjectKB,"public class main {
public String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) {
Object redirectAttribute = request.getAttribute(URI_OVERRIDE_ATTRIBUTE);
String redirectFormParam = request.getParameter(FORM_REDIRECT_PARAMETER);
if (redirectAttribute !=null) {
logger.debug(""Returning redirectAttribute saved URI:""+redirectAttribute);
return (String) redirectAttribute;
} else if (redirectFormParam != null) {
return redirectFormParam;
} else {
return super.determineTargetUrl(request, response);
}
}
}","public class main {
public String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) {
Object redirectAttribute = request.getAttribute(URI_OVERRIDE_ATTRIBUTE);
String redirectFormParam = request.getParameter(FORM_REDIRECT_PARAMETER);
if (redirectAttribute !=null) {
logger.debug(""Returning redirectAttribute saved URI:""+redirectAttribute);
return (String) redirectAttribute;
} else if (isApprovedFormRedirectUri(request, redirectFormParam)) {
return redirectFormParam;
} else {
return super.determineTargetUrl(request, response);
}
}
}","- } else if (redirectFormParam != null) {+ } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {",1
17829,0e9dd189cb97900fb6a665bb67c669456b4553f3,ProjectKB,"public class main {
public void run() {
IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(myProject.getBasePath());
if (handler != null) {
try {
handler.removeIdeHandler(MPSProjectIDEHandler.this);
} catch (RemoteException e) {
MPSProjectIDEHandler.LOG.error(null, e);
}
}
try {
UnicastRemoteObject.unexportObject(MPSProjectIDEHandler.this, true);
} catch (NoSuchObjectException e) {
throw new RuntimeException(e);
}
}
}","public class main {
public void run() {
try {
IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(myProject.getBasePath());
if (handler == null) {
return;
}
handler.addIdeHandler(MPSProjectIDEHandler.this);
} catch (RemoteException e) {
e.printStackTrace();
}
}
}","+ try {- if (handler != null) {+ if (handler == null) {- try {+ return;+ }- handler.removeIdeHandler(MPSProjectIDEHandler.this);+ handler.addIdeHandler(MPSProjectIDEHandler.this);+ e.printStackTrace();- MPSProjectIDEHandler.LOG.error(null, e);- }- }- try {- UnicastRemoteObject.unexportObject(MPSProjectIDEHandler.this, true);- } catch (NoSuchObjectException e) {- throw new RuntimeException(e);",1
15400,efcb46c710e3f56805b9257a63d1306882f4faf9,ProjectKB,"public class main {
protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
if (path == null || !path.startsWith(""/"")) {
throw new MalformedURLException(path);
}
try {
path = UriPath.canonical(path);
final String addedPath = addPaths(baseResource, path);
ClassPathResource resource = new ClassPathResource(addedPath);
if (resource.exists() && resource.getFile().isDirectory()) {
if (welcomeFile != null) {
resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
} else {
resource = null;
}
}
return (resource != null && resource.exists()) ? resource : null;
} catch (Exception e) {
if (LOG.isDebugEnabled()) {
LOG.debug(e.getClass().getSimpleName() + "" when trying to get resource. "" + e.getMessage());
}
}
return null;
}
}","public class main {
protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
if (path == null || !path.startsWith(""/"")) {
throw new MalformedURLException(path);
}
try {
path = UriPath.canonical(path);
final String addedPath = addPaths(baseResource, path);
ClassPathResource resource = new ClassPathResource(addedPath);
if (resource.exists() && resource.getFile().isDirectory()) {
if (welcomeFile != null) {
resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
} else {
resource = null;
}
}
if (resource != null && resource.exists()) {
DirectoryTraversal.protectAgainstInClassPath(resource.getPath());
return resource;
} else {
return null;
}
} catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
throw directoryTraversalDetection;
} catch (Exception e) {
if (LOG.isDebugEnabled()) {
LOG.debug(e.getClass().getSimpleName() + "" when trying to get resource. "" + e.getMessage());
}
}
return null;
}
}",- return (resource != null && resource.exists()) ? resource : null;+ if (resource != null && resource.exists()) {+ DirectoryTraversal.protectAgainstInClassPath(resource.getPath());+ return resource;+ } else {+ return null;+ }+ } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {+ throw directoryTraversalDetection;,1
6100,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public boolean readHeader(ByteBuf buffer, byte version, long messageId, HotRodHeader header) throws Exception {
if (header.op == null) {
int readableBytes = buffer.readableBytes();
if (readableBytes < 2) {
buffer.resetReaderIndex();
return false;
}
byte streamOp = buffer.readByte();
int length = ExtendedByteBufJava.readMaybeVInt(buffer);
if (length == Integer.MIN_VALUE || length > buffer.readableBytes()) {
buffer.resetReaderIndex();
return false;
} else if (length == 0) {
header.cacheName = """";
} else {
byte[] bytes = new byte[length];
buffer.readBytes(bytes);
header.cacheName = new String(bytes, CharsetUtil.UTF_8);
}
header.op = HotRodOperation.fromRequestOpCode(streamOp);
if (header.op == null) {
throw new HotRodUnknownOperationException(""Unknown operation: "" + streamOp, version, messageId);
}
buffer.markReaderIndex();
}
int flag = ExtendedByteBufJava.readMaybeVInt(buffer);
if (flag == Integer.MIN_VALUE) {
return false;
}
if (buffer.readableBytes() < 2) {
buffer.resetReaderIndex();
return false;
}
byte clientIntelligence = buffer.readByte();
int topologyId = ExtendedByteBufJava.readMaybeVInt(buffer);
if (topologyId == Integer.MIN_VALUE) {
return false;
}
header.flag = flag;
header.clientIntel = clientIntelligence;
header.topologyId = topologyId;
buffer.markReaderIndex();
return true;
}
}","public class main {
public boolean readHeader(ByteBuf buffer, byte version, long messageId, HotRodHeader header) throws Exception {
if (header.op == null) {
int readableBytes = buffer.readableBytes();
if (readableBytes < 2) {
buffer.resetReaderIndex();
return false;
}
byte streamOp = buffer.readByte();
int length = ExtendedByteBufJava.readMaybeVInt(buffer);
if (length == Integer.MIN_VALUE || length > buffer.readableBytes()) {
buffer.resetReaderIndex();
return false;
} else if (length == 0) {
header.cacheName = """";
} else {
byte[] bytes = new byte[length];
buffer.readBytes(bytes);
header.cacheName = new String(bytes, CharsetUtil.UTF_8);
}
header.op = HotRodOperation.fromRequestOpCode(streamOp);
if (header.op == null) {
throw new HotRodUnknownOperationException(""Unknown operation: "" + streamOp, version, messageId);
}
buffer.markReaderIndex();
}
if (header.clientIntel == 0) {
int flag = ExtendedByteBufJava.readMaybeVInt(buffer);
if (flag == Integer.MIN_VALUE) {
return false;
}
if (buffer.readableBytes() < 2) {
buffer.resetReaderIndex();
return false;
}
byte clientIntelligence = buffer.readByte();
int topologyId = ExtendedByteBufJava.readMaybeVInt(buffer);
if (topologyId == Integer.MIN_VALUE) {
return false;
}
header.flag = flag;
header.clientIntel = clientIntelligence;
header.topologyId = topologyId;
buffer.markReaderIndex();
}
if (HotRodVersion.HOTROD_28.isAtLeast(header.version)) {
if (header.keyType == null) {
if (!readMediaType(buffer, header, m -> header.keyType = m)) {
return false;
}
buffer.markReaderIndex();
}
if (header.valueType == null) {
if (!readMediaType(buffer, header, m -> header.valueType = m)) {
return false;
}
buffer.markReaderIndex();
}
}
return true;
}
}","+ if (header.clientIntel == 0) {+ }+ if (HotRodVersion.HOTROD_28.isAtLeast(header.version)) {+ if (header.keyType == null) {+ if (!readMediaType(buffer, header, m -> header.keyType = m)) {+ return false;+ }+ buffer.markReaderIndex();+ }+ if (header.valueType == null) {+ if (!readMediaType(buffer, header, m -> header.valueType = m)) {+ return false;+ }+ buffer.markReaderIndex();+ }+ }",1
8089,5ea0a6f6c6a54f1cddf9691a99b0c237afc95348,ProjectKB,"public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
}","public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
}","- String body = exchange.getIn().getBody(String.class);+ MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);- assertNotNull(body);+ assertNotNull(cool);- assertEquals(""Hello World"", body);- MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");+ assertEquals(123, cool.getId());+ assertEquals(""Camel"", cool.getName());+ exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");- exchange.getOut().setBody(reply);+ exchange.getOut().setBody(""OK"");- exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);",1
17846,0e9dd189cb97900fb6a665bb67c669456b4553f3,ProjectKB,"public class main {
public void run() {
for (SModel descriptor : new ModuleRepositoryFacade(mpsProject).getAllModels()) {
if (!(namespace.equals(descriptor.getName().getValue()))) {
continue;
}
SNode node = descriptor.getNode(nodeId);
if (node != null) {
new EditorNavigator(mpsProject).shallFocus(true).selectIfChild().open(node.getReference());
}
}
ProjectUtil.focusProjectWindow(myProject, true);
}
}","public class main {
public void run() {
try {
IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(myProject.getBasePath());
if (handler == null) {
return;
}
handler.addIdeHandler(MPSProjectIDEHandler.this);
} catch (RemoteException e) {
e.printStackTrace();
}
}
}","- for (SModel descriptor : new ModuleRepositoryFacade(mpsProject).getAllModels()) {- if (!(namespace.equals(descriptor.getName().getValue()))) {- continue;+ try {+ IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(myProject.getBasePath());+ if (handler == null) {+ return;- SNode node = descriptor.getNode(nodeId);- if (node != null) {- new EditorNavigator(mpsProject).shallFocus(true).selectIfChild().open(node.getReference());+ handler.addIdeHandler(MPSProjectIDEHandler.this);+ } catch (RemoteException e) {+ e.printStackTrace();- }- ProjectUtil.focusProjectWindow(myProject, true);",1
6429,f65c961ea31e3c1851daba8e7e49fc37bbf77b19,ProjectKB,"public class main {
private static DocumentBuilder getBuilder() throws ParserConfigurationException {
ClassLoader loader = Thread.currentThread().getContextClassLoader();
if (loader == null) {
loader = DOMUtils.class.getClassLoader();
}
if (loader == null) {
return XMLUtils.getParser();
}
DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);
if (builder == null) {
builder = XMLUtils.getParser();
DOCUMENT_BUILDERS.put(loader, builder);
}
return builder;
}
}","public class main {
private static DocumentBuilder getBuilder() throws ParserConfigurationException {
ClassLoader loader = Thread.currentThread().getContextClassLoader();
if (loader == null) {
loader = DOMUtils.class.getClassLoader();
}
if (loader == null) {
DocumentBuilderFactory dbf = createDocumentBuilderFactory();
return dbf.newDocumentBuilder();
}
DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);
if (builder == null) {
DocumentBuilderFactory dbf = createDocumentBuilderFactory();
builder = dbf.newDocumentBuilder();
DOCUMENT_BUILDERS.put(loader, builder);
}
return builder;
}
}",- return XMLUtils.getParser();+ DocumentBuilderFactory dbf = createDocumentBuilderFactory();+ return dbf.newDocumentBuilder();- builder = XMLUtils.getParser();+ DocumentBuilderFactory dbf = createDocumentBuilderFactory();+ builder = dbf.newDocumentBuilder();,1
9417,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
public void configureConnectorAndStart(String bindAddress) throws Exception {
connector = service.addConnector(bindAddress);
connectionUri = connector.getPublishableConnectString();
service.start();
service.waitUntilStarted();
}
}","public class main {
public void configureConnectorAndStart(String bindAddress) throws Exception {
connector = service.addConnector(bindAddress);
connectionUri = connector.getPublishableConnectString();
service.start();
service.waitUntilStarted();
}
}","+ }+ public void configureConnectorAndStart(String bindAddress) throws Exception {+ if (bindAddress.contains(""ssl"")) {+ bindAddress += bindAddress.contains(""?"") ? ""&transport.verifyHostName=false"" : ""?transport.verifyHostName=false"";+ }+ connector = service.addConnector(bindAddress);+ connectionUri = connector.getPublishableConnectString();+ if (connectionUri.contains(""ssl"")) {+ connectionUri += connectionUri.contains(""?"") ? ""&socket.verifyHostName=false"" : ""?socket.verifyHostName=false"";",1
14589,8ffa920d3894634aa078f0fdf6b02d270262caf,ProjectKB,"public class main {
public List<ACL> getDefaultZkAcls(Map<String, Object> conf) {
return null;
}
}","public class main {
public List<ACL> getDefaultZkAcls(Map<String, Object> conf) {
return getDefaultNimbusSupervisorZkAcls(conf);
}
}",- return null;+ return getDefaultNimbusSupervisorZkAcls(conf);,1
4887,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().addExecution(""nosuch"", Collections.<String, String>emptyMap());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().addExecution(""nosuch"", Collections.<String, String>emptyMap());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
4951,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.users().get(user.getId()).logout();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.users().get(user.getId()).logout();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
15356,740289c61d60256c6270756bc84b9e24b76e4913,ProjectKB,"public class main {
public void execute(final FunctionContext context) {
CliFunctionResult result = null;
String memberId = context.getCache().getDistributedSystem().getDistributedMember().getId();
try {
LuceneDestroyIndexInfo indexInfo = (LuceneDestroyIndexInfo) context.getArguments();
String indexName = indexInfo.getIndexName();
String regionPath = indexInfo.getRegionPath();
LuceneService service = LuceneServiceProvider.get(context.getCache());
if (indexName == null) {
if (indexInfo.isDefinedDestroyOnly()) {
((LuceneServiceImpl) service).destroyDefinedIndexes(regionPath);
result = new CliFunctionResult(memberId);
} else {
service.destroyIndexes(regionPath);
result = new CliFunctionResult(memberId, getXmlEntity(indexName, regionPath));
}
} else {
if (indexInfo.isDefinedDestroyOnly()) {
((LuceneServiceImpl) service).destroyDefinedIndex(indexName, regionPath);
result = new CliFunctionResult(memberId);
} else {
service.destroyIndex(indexName, regionPath);
result = new CliFunctionResult(memberId, getXmlEntity(indexName, regionPath));
}
}
} catch (Exception e) {
result = new CliFunctionResult(memberId, e, e.getMessage());
}
context.getResultSender().lastResult(result);
}
}","public class main {
public void execute(final FunctionContext context) {
CliFunctionResult result;
String memberId = context.getCache().getDistributedSystem().getDistributedMember().getId();
try {
LuceneDestroyIndexInfo indexInfo = (LuceneDestroyIndexInfo) context.getArguments();
String indexName = indexInfo.getIndexName();
String regionPath = indexInfo.getRegionPath();
LuceneService service = LuceneServiceProvider.get(context.getCache());
if (indexName == null) {
if (indexInfo.isDefinedDestroyOnly()) {
((LuceneServiceImpl) service).destroyDefinedIndexes(regionPath);
result = new CliFunctionResult(memberId);
} else {
service.destroyIndexes(regionPath);
result = new CliFunctionResult(memberId, getXmlEntity(indexName, regionPath));
}
} else {
if (indexInfo.isDefinedDestroyOnly()) {
((LuceneServiceImpl) service).destroyDefinedIndex(indexName, regionPath);
result = new CliFunctionResult(memberId);
} else {
service.destroyIndex(indexName, regionPath);
result = new CliFunctionResult(memberId, getXmlEntity(indexName, regionPath));
}
}
} catch (Exception e) {
result = new CliFunctionResult(memberId, e, e.getMessage());
}
context.getResultSender().lastResult(result);
}
}",- CliFunctionResult result = null;+ CliFunctionResult result;,1
11454,ec1cebda618e68d12c9b1906820564408cf950e1,ProjectKB,"public class main {
public boolean check(String pOrigin, boolean pIsStrictCheck) {
if (pIsStrictCheck && !strictChecking) {
return true;
}
if (patterns == null || patterns.size() == 0) {
return true;
}
for (Pattern pattern : patterns) {
if (pattern.matcher(pOrigin).matches()) {
return true;
}
}
return false;
}
}","public class main {
public boolean check(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled) {
if (pOnlyWhenStrictCheckingIsEnabled && !strictChecking) {
return true;
}
if (pOrigin == null && strictChecking) {
return false;
}
if (patterns == null || patterns.size() == 0 || pOrigin == null) {
return true;
}
for (Pattern pattern : patterns) {
if (pattern.matcher(pOrigin).matches()) {
return true;
}
}
return false;
}
}","- public boolean check(String pOrigin, boolean pIsStrictCheck) {+ public boolean check(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled) {- if (pIsStrictCheck && !strictChecking) {+ if (pOnlyWhenStrictCheckingIsEnabled && !strictChecking) {+ if (pOrigin == null && strictChecking) {+ return false;+ }- if (patterns == null || patterns.size() == 0) {+ if (patterns == null || patterns.size() == 0 || pOrigin == null) {",1
13846,75411ab34a3d53c43c2d508b12314a9788aa417,ProjectKB,"public class main {
protected void startSendingPackets() {
if (!sendingThreadStarted) {
new Thread() {
public void run() {
Thread.currentThread().setName(
""Sender-"" + sock.getRemoteSocketAddress());
try {
sendPackets();
} catch (InterruptedException e) {
LOG.warn(""Unexpected interruption "" + e.getMessage());
}
}
}.start();
sendingThreadStarted = true;
} else {
LOG.error(""Attempting to start sending thread after it already started"");
}
}
public boolean syncFollower(long peerLastZxid, ZKDatabase db, Leader leader) {
boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
long currentZxid = peerLastZxid;
boolean needSnap = true;
boolean txnLogSyncEnabled = db.isTxnLogSyncEnabled();
ReentrantReadWriteLock lock = db.getLogLock();
ReadLock rl = lock.readLock();
try {
rl.lock();
long maxCommittedLog = db.getmaxCommittedLog();
long minCommittedLog = db.getminCommittedLog();
long lastProcessedZxid = db.getDataTreeLastProcessedZxid();
LOG.info(""Synchronizing with Follower sid: {} maxCommittedLog=0x{}""
+ "" minCommittedLog=0x{} lastProcessedZxid=0x{}""
+ "" peerLastZxid=0x{}"", getSid(),
Long.toHexString(maxCommittedLog),
Long.toHexString(minCommittedLog),
Long.toHexString(lastProcessedZxid),
Long.toHexString(peerLastZxid));
if (db.getCommittedLog().isEmpty()) {
minCommittedLog = lastProcessedZxid;
maxCommittedLog = lastProcessedZxid;
}
}","public class main {
protected void startSendingPackets() {
if (!sendingThreadStarted) {
new Thread() {
public void run() {
Thread.currentThread().setName(
""Sender-"" + sock.getRemoteSocketAddress());
try {
sendPackets();
} catch (InterruptedException e) {
LOG.warn(""Unexpected interruption "" + e.getMessage());
}
}
}.start();
sendingThreadStarted = true;
} else {
LOG.error(""Attempting to start sending thread after it already started"");
}
}
public boolean syncFollower(long peerLastZxid, ZKDatabase db, Leader leader) {
boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
long currentZxid = peerLastZxid;
boolean needSnap = true;
boolean txnLogSyncEnabled = db.isTxnLogSyncEnabled();
ReentrantReadWriteLock lock = db.getLogLock();
ReadLock rl = lock.readLock();
try {
rl.lock();
long maxCommittedLog = db.getmaxCommittedLog();
long minCommittedLog = db.getminCommittedLog();
long lastProcessedZxid = db.getDataTreeLastProcessedZxid();
LOG.info(""Synchronizing with Follower sid: {} maxCommittedLog=0x{}
}","- LOG.info(""Synchronizing with Follower sid: {} maxCommittedLog=0x{}""+ LOG.info(""Synchronizing with Follower sid: {} maxCommittedLog=0x{}- + "" minCommittedLog=0x{} lastProcessedZxid=0x{}""- + "" peerLastZxid=0x{}"", getSid(),- Long.toHexString(maxCommittedLog),- Long.toHexString(minCommittedLog),- Long.toHexString(lastProcessedZxid),- Long.toHexString(peerLastZxid));- if (db.getCommittedLog().isEmpty()) {- minCommittedLog = lastProcessedZxid;- maxCommittedLog = lastProcessedZxid;- }",1
4849,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().get(foo.getId()).authorization().getSettings();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().get(foo.getId()).authorization().getSettings();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
4773,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.updateRealmEventsConfig(new RealmEventsConfigRepresentation());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.updateRealmEventsConfig(new RealmEventsConfigRepresentation());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
6897,8bfb0f,ProjectKB,"public class main {
private HeaderParseStatus parseHeader() throws IOException {
byte chr = 0;
while (headerParsePos == HeaderParsePosition.HEADER_START) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                    headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get();
if (chr == Constants.CR) {
} else if (chr == Constants.LF) {
return HeaderParseStatus.DONE;
} else {
byteBuffer.position(byteBuffer.position() - 1);
break;
}
}
if (headerParsePos == HeaderParsePosition.HEADER_START) {
headerData.start = byteBuffer.position();
headerData.lineStart = headerData.start;
headerParsePos = HeaderParsePosition.HEADER_NAME;
}
while (headerParsePos == HeaderParsePosition.HEADER_NAME) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                     return HeaderParseStatus.NEED_MORE_DATA;
}
}
int pos = byteBuffer.position();
chr = byteBuffer.get();
if (chr == Constants.COLON) {
headerParsePos = HeaderParsePosition.HEADER_VALUE_START;
headerData.headerValue = headers.addValue(byteBuffer.array(), headerData.start,
pos - headerData.start);
pos = byteBuffer.position();
headerData.start = pos;
headerData.realPos = pos;
headerData.lastSignificantChar = pos;
break;
} else if (!HttpParser.isToken(chr)) {
headerData.lastSignificantChar = pos;
byteBuffer.position(byteBuffer.position() - 1);
return skipLine();
}
if ((chr >= Constants.A) && (chr <= Constants.Z)) {
byteBuffer.put(pos, (byte) (chr - Constants.LC_OFFSET));
}
}
if (headerParsePos == HeaderParsePosition.HEADER_SKIPLINE) {
return skipLine();
}
while (headerParsePos == HeaderParsePosition.HEADER_VALUE_START ||
headerParsePos == HeaderParsePosition.HEADER_VALUE ||
headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {
if (headerParsePos == HeaderParsePosition.HEADER_VALUE_START) {
while (true) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get();
if (!(chr == Constants.SP || chr == Constants.HT)) {
headerParsePos = HeaderParsePosition.HEADER_VALUE;
byteBuffer.position(byteBuffer.position() - 1);
break;
}
}
}
if (headerParsePos == HeaderParsePosition.HEADER_VALUE) {
boolean eol = false;
while (!eol) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get();
if (chr == Constants.CR) {
} else if (chr == Constants.LF) {
eol = true;
} else if (chr == Constants.SP || chr == Constants.HT) {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
} else {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
headerData.lastSignificantChar = headerData.realPos;
}
}
headerData.realPos = headerData.lastSignificantChar;
headerParsePos = HeaderParsePosition.HEADER_MULTI_LINE;
}
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get(byteBuffer.position());
if (headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {
if ((chr != Constants.SP) && (chr != Constants.HT)) {
headerParsePos = HeaderParsePosition.HEADER_START;
break;
} else {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
headerParsePos = HeaderParsePosition.HEADER_VALUE_START;
}
}
}
headerData.headerValue.setBytes(byteBuffer.array(), headerData.start,
headerData.lastSignificantChar - headerData.start);
headerData.recycle();
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}","public class main {
private HeaderParseStatus parseHeader() throws IOException {
byte chr = 0;
byte prevChr = 0;
while (headerParsePos == HeaderParsePosition.HEADER_START) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                    headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.NEED_MORE_DATA;
}
}
prevChr = chr;
chr = byteBuffer.get();
if (chr == Constants.CR && prevChr != Constants.CR) {
} else if (prevChr == Constants.CR && chr == Constants.LF) {
return HeaderParseStatus.DONE;
} else {
if (prevChr == 0) {
byteBuffer.position(byteBuffer.position() - 1);
} else {
byteBuffer.position(byteBuffer.position() - 2);
}
break;
}
}
if (headerParsePos == HeaderParsePosition.HEADER_START) {
headerData.start = byteBuffer.position();
headerData.lineStart = headerData.start;
headerParsePos = HeaderParsePosition.HEADER_NAME;
}
while (headerParsePos == HeaderParsePosition.HEADER_NAME) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                     return HeaderParseStatus.NEED_MORE_DATA;
}
}
int pos = byteBuffer.position();
chr = byteBuffer.get();
if (chr == Constants.COLON) {
headerParsePos = HeaderParsePosition.HEADER_VALUE_START;
headerData.headerValue = headers.addValue(byteBuffer.array(), headerData.start,
pos - headerData.start);
pos = byteBuffer.position();
headerData.start = pos;
headerData.realPos = pos;
headerData.lastSignificantChar = pos;
break;
} else if (!HttpParser.isToken(chr)) {
headerData.lastSignificantChar = pos;
byteBuffer.position(byteBuffer.position() - 1);
return skipLine();
}
if ((chr >= Constants.A) && (chr <= Constants.Z)) {
byteBuffer.put(pos, (byte) (chr - Constants.LC_OFFSET));
}
}
if (headerParsePos == HeaderParsePosition.HEADER_SKIPLINE) {
return skipLine();
}
while (headerParsePos == HeaderParsePosition.HEADER_VALUE_START ||
headerParsePos == HeaderParsePosition.HEADER_VALUE ||
headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {
if (headerParsePos == HeaderParsePosition.HEADER_VALUE_START) {
while (true) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get();
if (!(chr == Constants.SP || chr == Constants.HT)) {
headerParsePos = HeaderParsePosition.HEADER_VALUE;
byteBuffer.position(byteBuffer.position() - 1);
break;
}
}
}
if (headerParsePos == HeaderParsePosition.HEADER_VALUE) {
boolean eol = false;
while (!eol) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
prevChr = chr;
chr = byteBuffer.get();
if (chr == Constants.CR) {
} else if (prevChr == Constants.CR && chr == Constants.LF) {
eol = true;
} else if (prevChr == Constants.CR) {
headers.removeHeader(headers.size() - 1);
return skipLine();
} else if (chr != Constants.HT && HttpParser.isControl(chr)) {
headers.removeHeader(headers.size() - 1);
return skipLine();
} else if (chr == Constants.SP || chr == Constants.HT) {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
} else {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
headerData.lastSignificantChar = headerData.realPos;
}
}
headerData.realPos = headerData.lastSignificantChar;
headerParsePos = HeaderParsePosition.HEADER_MULTI_LINE;
}
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {                                        return HeaderParseStatus.NEED_MORE_DATA;
}
}
chr = byteBuffer.get(byteBuffer.position());
if (headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {
if ((chr != Constants.SP) && (chr != Constants.HT)) {
headerParsePos = HeaderParsePosition.HEADER_START;
break;
} else {
byteBuffer.put(headerData.realPos, chr);
headerData.realPos++;
headerParsePos = HeaderParsePosition.HEADER_VALUE_START;
}
}
}
headerData.headerValue.setBytes(byteBuffer.array(), headerData.start,
headerData.lastSignificantChar - headerData.start);
headerData.recycle();
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}",+ byte prevChr = 0;+ prevChr = chr;- if (chr == Constants.CR) {- } else if (chr == Constants.LF) {+ if (chr == Constants.CR && prevChr != Constants.CR) {+ } else if (prevChr == Constants.CR && chr == Constants.LF) {+ if (prevChr == 0) {+ } else {+ byteBuffer.position(byteBuffer.position() - 2);+ }+ prevChr = chr;- } else if (chr == Constants.LF) {+ } else if (prevChr == Constants.CR && chr == Constants.LF) {+ } else if (prevChr == Constants.CR) {+ headers.removeHeader(headers.size() - 1);+ return skipLine();+ } else if (chr != Constants.HT && HttpParser.isControl(chr)) {+ headers.removeHeader(headers.size() - 1);+ return skipLine();,1
12253,735579b6f987b407049ac1f1da08e675d957c3e,ProjectKB,"public class main {
public boolean evaluate(final UserTO user) {
return ""c9b2dec2-00a7-4855-97c0-d854842b4b24"".equals(user.getKey());
}
}","public class main {
public boolean evaluate(final UserTO user) {
return ""74cd8ece-715a-44a4-a736-e17b46c4e7e6"".equals(user.getKey())
|| ""b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee"".equals(user.getKey());
}
}","- return ""c9b2dec2-00a7-4855-97c0-d854842b4b24"".equals(user.getKey());+ return ""74cd8ece-715a-44a4-a736-e17b46c4e7e6"".equals(user.getKey())+ || ""b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee"".equals(user.getKey());",1
8416,00921f22ff9a8792d7663ef8fadd4823402a6324,ProjectKB,"public class main {
public void run() {
try {
Thread.sleep(waitTime);
stopAsync();
LOG.info(""Stopping {} because {}"", transport.getRemoteAddress(), reason);
} catch (InterruptedException e) {
}
}
});
} catch (Throwable t) {
LOG.warn(""Cannot create stopAsync. This exception will be ignored."", t);
}
}
}
public void stopAsync() {
synchronized (this) {
pendingStop = true;
if (starting) {
LOG.debug(""stopAsync() called in the middle of start(). Delaying till start completes.."");
return;
}
}
if (stopping.compareAndSet(false, true)) {
List<TransportConnectionState> connectionStates = listConnectionStates();
for (TransportConnectionState cs : connectionStates) {
ConnectionContext connectionContext = cs.getContext();
if (connectionContext != null) {
connectionContext.getStopping().set(true);
}
}
try {
stopTaskRunnerFactory.execute(new Runnable() {
@Override
public void run() {
serviceLock.writeLock().lock();
try {
doStop();
} catch (Throwable e) {
LOG.debug(""Error occurred while shutting down a connection {}"", this, e);
} finally {
stopped.countDown();
serviceLock.writeLock().unlock();
}
}
}
}","public class main {
public void run() {
serviceException(e);
}
}.start();
}
}
@Override
public void serviceException(Throwable e) {
if (e instanceof IOException) {
serviceTransportException((IOException) e);
} else if (e.getClass() == BrokerStoppedException.class) {
if (!stopping.get()) {
SERVICELOG.debug(""Broker has been stopped.  Notifying client and closing his connection."");
ConnectionError ce = new ConnectionError();
ce.setException(e);
dispatchSync(ce);
this.stopError = e;
try {
Thread.sleep(500);
} catch (InterruptedException ie) {
Thread.currentThread().interrupt();
}
stopAsync();
}
} else if (!stopping.get() && !inServiceException) {
inServiceException = true;
try {
SERVICELOG.warn(""Async error occurred: "", e);
ConnectionError ce = new ConnectionError();
ce.setException(e);
if (pendingStop) {
dispatchSync(ce);
} else {
dispatchAsync(ce);
}
} finally {
inServiceException = false;
}
}
}","+ serviceException(e);+ }+ }.start();- try {- Thread.sleep(waitTime);- stopAsync();- LOG.info(""Stopping {} because {}"", transport.getRemoteAddress(), reason);- } catch (InterruptedException e) {- });- } catch (Throwable t) {- LOG.warn(""Cannot create stopAsync. This exception will be ignored."", t);+ @Override+ public void serviceException(Throwable e) {+ if (e instanceof IOException) {+ serviceTransportException((IOException) e);+ } else if (e.getClass() == BrokerStoppedException.class) {+ if (!stopping.get()) {+ SERVICELOG.debug(""Broker has been stopped.  Notifying client and closing his connection."");+ ConnectionError ce = new ConnectionError();+ ce.setException(e);+ dispatchSync(ce);+ this.stopError = e;+ try {+ Thread.sleep(500);+ } catch (InterruptedException ie) {+ Thread.currentThread().interrupt();+ stopAsync();+ } else if (!stopping.get() && !inServiceException) {+ inServiceException = true;+ try {+ SERVICELOG.warn(""Async error occurred: "", e);+ ConnectionError ce = new ConnectionError();+ ce.setException(e);+ if (pendingStop) {+ dispatchSync(ce);+ } else {+ dispatchAsync(ce);- public void stopAsync() {- synchronized (this) {- pendingStop = true;- if (starting) {- LOG.debug(""stopAsync() called in the middle of start(). Delaying till start completes.."");- return;- }- }- if (stopping.compareAndSet(false, true)) {- List<TransportConnectionState> connectionStates = listConnectionStates();- for (TransportConnectionState cs : connectionStates) {- ConnectionContext connectionContext = cs.getContext();- if (connectionContext != null) {- connectionContext.getStopping().set(true);- }- }- try {- stopTaskRunnerFactory.execute(new Runnable() {- @Override- public void run() {- serviceLock.writeLock().lock();- try {- doStop();- } catch (Throwable e) {- LOG.debug(""Error occurred while shutting down a connection {}"", this, e);+ inServiceException = false;- stopped.countDown();- serviceLock.writeLock().unlock();- }",1
18670,d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6,ProjectKB,"public class main {
public void generateCode(MethodVisitor mv, CodeFlow cf) {
PropertyAccessor accessorToUse = this.cachedReadAccessor;
if (!(accessorToUse instanceof CompilablePropertyAccessor)) {
throw new IllegalStateException(""Property accessor is not compilable: "" + accessorToUse);
}
((CompilablePropertyAccessor) accessorToUse).generateCode(this.name, mv, cf);
cf.pushDescriptor(this.exitTypeDescriptor);
}
}","public class main {
public void generateCode(MethodVisitor mv, CodeFlow cf) {
PropertyAccessor accessorToUse = this.cachedReadAccessor;
if (!(accessorToUse instanceof CompilablePropertyAccessor)) {
throw new IllegalStateException(""Property accessor is not compilable: "" + accessorToUse);
}
Label skipIfNull = null;
if (nullSafe) {
mv.visitInsn(DUP);
skipIfNull = new Label();
Label continueLabel = new Label();
mv.visitJumpInsn(IFNONNULL,continueLabel);
CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);
mv.visitJumpInsn(GOTO, skipIfNull);
mv.visitLabel(continueLabel);
}
((CompilablePropertyAccessor) accessorToUse).generateCode(this.name, mv, cf);
cf.pushDescriptor(this.exitTypeDescriptor);
if (originalPrimitiveExitTypeDescriptor != null) {
CodeFlow.insertBoxIfNecessary(mv, originalPrimitiveExitTypeDescriptor);
}
if (skipIfNull != null) {
mv.visitLabel(skipIfNull);
}
}
}","+ Label skipIfNull = null;+ if (nullSafe) {+ mv.visitInsn(DUP);+ skipIfNull = new Label();+ Label continueLabel = new Label();+ mv.visitJumpInsn(IFNONNULL,continueLabel);+ CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);+ mv.visitJumpInsn(GOTO, skipIfNull);+ mv.visitLabel(continueLabel);+ }+ if (originalPrimitiveExitTypeDescriptor != null) {+ CodeFlow.insertBoxIfNecessary(mv, originalPrimitiveExitTypeDescriptor);+ }+ if (skipIfNull != null) {+ mv.visitLabel(skipIfNull);+ }",1
5888,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
private Object decode(Object o, Encoder encoder) {
if (o == null) return null;
return encoder.fromStorage(o);
}
}","public class main {
private Object decode(Object o, Encoder encoder) {
if (o == null) return null;
return encoder.fromStorage(o);
}
}","- return ProtobufUtil.toCanonicalJSON(ctx, (byte[]) content);+ String converted = ProtobufUtil.toCanonicalJSON(ctx, (byte[]) content);+ return StandardConversions.convertCharset(converted, contentType.getCharset(), destinationType.getCharset());",1
16429,5a711c05ec750f069235597173084c2ee796242,ProjectKB,"public class main {
public void setProcessExternalEntities(boolean processExternalEntities) {
this.processExternalEntities = processExternalEntities;
}
}","public class main {
public void setProcessExternalEntities(boolean processExternalEntities) {
this.processExternalEntities = processExternalEntities;
if (processExternalEntities) {
setSupportDtd(true);
}
}
}",+ if (processExternalEntities) {+ setSupportDtd(true);+ },1
4370,9416b7c54bdf5613c1a65e6d1779a87591c6c9b,ProjectKB,"public class main {
public void testSaslServerFallback() throws Exception {
ctx = new AuthTestCtx();
ctx.createServer(""secret"", true);
ctx.createClient(""secret"", false);
ByteBuffer reply = ctx.client.sendRpcSync(JavaUtils.stringToBytes(""Ping""), 5000);
assertEquals(""Pong"", JavaUtils.bytesToString(reply));
}
}","public class main {
public void testSaslServerFallback() throws Exception {
ctx = new AuthTestCtx();
ctx.createServer(""secret"", true);
ctx.createClient(""secret"", false);
ByteBuffer reply = ctx.client.sendRpcSync(JavaUtils.stringToBytes(""Ping""), 5000);
assertEquals(""Pong"", JavaUtils.bytesToString(reply));
assertNotNull(ctx.authRpcHandler.saslHandler);
assertTrue(ctx.authRpcHandler.isAuthenticated());
}
}",+ assertNotNull(ctx.authRpcHandler.saslHandler);+ assertTrue(ctx.authRpcHandler.isAuthenticated());,1
18469,23655fe0c15189ca41a6e99c31a3c38001a7cdb0,ProjectKB,"public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
}","public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
}","- String body = exchange.getIn().getBody(String.class);+ MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);- assertNotNull(body);+ assertNotNull(cool);- assertEquals(""Hello World"", body);- MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");+ assertEquals(123, cool.getId());+ assertEquals(""Camel"", cool.getName());+ exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");- exchange.getOut().setBody(reply);+ exchange.getOut().setBody(""OK"");- exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);",1
4783,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().findAll();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().findAll();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
3538,adb2a34306d67559ee81db155826dc67a02cc85e,ProjectKB,"public class main {
public String getLogHierarchy() {
return DELETED_LOG_HIERARCHY;
}
}","public class main {
public String getLogHierarchy() {
return CREATED_LOG_HIERARCHY;
}
}",- return DELETED_LOG_HIERARCHY;+ return CREATED_LOG_HIERARCHY;,1
4781,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.attackDetection().clearAllBruteForce();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.attackDetection().clearAllBruteForce();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
9097,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void defaultCollectorThrowsExceptionAfterFunctionThrowsIllegalState() {
thrown.expect(FunctionException.class);
ResultCollector rc = getExecution().execute((context) -> {
throw new IllegalStateException();
});
final Object result = rc.getResult();
}
}","public class main {
public void defaultCollectorThrowsExceptionAfterFunctionThrowsIllegalState() {
IgnoredException.addIgnoredException(""java.lang.IllegalStateException"");
thrown.expect(FunctionException.class);
ResultCollector rc = getExecution().execute((context) -> {
throw new IllegalStateException();
});
final Object result = rc.getResult();
}
}","+ IgnoredException.addIgnoredException(""java.lang.IllegalStateException"");",1
5729,46ae8627a6887d0c810905585b40845193b9a9f8,ProjectKB,"public class main {
public void deletePermissionEntry(UserContext userContext, String credentialName, String actor) {
if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
throw new EntryNotFoundException(""error.acl.lacks_credential_write"");
}
if (!permissionService.validAclUpdateOperation(userContext, actor)) {
throw new InvalidAclOperationException(""error.acl.invalid_update_operation"");
}
boolean successfullyDeleted = permissionsDataService
.deleteAccessControlEntry(credentialName, actor);
if (!successfullyDeleted) {
throw new EntryNotFoundException(""error.acl.lacks_credential_write"");
}
}
}","public class main {
public void deletePermissionEntry(UserContext userContext, String credentialName, String actor) {
if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
throw new EntryNotFoundException(""error.credential.invalid_access"");
}
if (!permissionService.validAclUpdateOperation(userContext, actor)) {
throw new InvalidAclOperationException(""error.acl.invalid_update_operation"");
}
boolean successfullyDeleted = permissionsDataService
.deleteAccessControlEntry(credentialName, actor);
if (!successfullyDeleted) {
throw new EntryNotFoundException(""error.credential.invalid_access"");
}
}
}","- throw new EntryNotFoundException(""error.acl.lacks_credential_write"");+ throw new EntryNotFoundException(""error.credential.invalid_access"");- throw new EntryNotFoundException(""error.acl.lacks_credential_write"");+ throw new EntryNotFoundException(""error.credential.invalid_access"");",1
1220,0c36c50bc158739c8fc8543122a6740c54adafc,ProjectKB,"public class main {
public static XMLReader xmlReader() throws ParserConfigurationException, SAXException {
SAXParserFactory spf = SAX_PARSER_FACTORY.get();
if (spf == null) {
spf = SAXParserFactory.newInstance();
spf.setNamespaceAware(true);
SAX_PARSER_FACTORY.set(spf);
}
return spf.newSAXParser().getXMLReader();
}
}","public class main {
public static XMLReader xmlReader() throws ParserConfigurationException, SAXException {
SAXParserFactory spf = SAX_PARSER_FACTORY.get();
if (spf == null) {
spf = SAXParserFactory.newInstance();
spf.setNamespaceAware(true);
spf.setFeature(""http:            spf.setFeature(""http:            spf.setFeature(""http:            spf.setFeature(""http:            spf.setXIncludeAware(false);
SAX_PARSER_FACTORY.set(spf);
}
return spf.newSAXParser().getXMLReader();
}
}","+ spf.setFeature(""http:            spf.setFeature(""http:            spf.setFeature(""http:            spf.setFeature(""http:            spf.setXIncludeAware(false);",1
16383,daeedbe499453b06856556f5e9f7e80d2d1ceb03,ProjectKB,"public class main {
public boolean isAllowed(HttpServletRequest request) throws IOException {
String requestBody = IOUtils.toString(request.getReader());
ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);
String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));
String zoneId = IdentityZoneHolder.get().getId();
ScimUser scimUserFromDb;
try {
scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);
} catch (ScimResourceNotFoundException e) {
return true;
}
if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {
return false;
}
if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {
return false;
}
if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {
return false;
}
if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {
return false;
}
if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {
return false;
}
return true;
}
}","public class main {
public boolean isAllowed(HttpServletRequest request) throws IOException {
String requestBody = IOUtils.toString(request.getReader());
ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);
String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));
String zoneId = IdentityZoneHolder.get().getId();
ScimUser scimUserFromDb;
try {
scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);
} catch (ScimResourceNotFoundException e) {
return true;
}
if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {
return false;
}
if (!scimUserFromDb.getEmails().containsAll(scimUserFromRequest.getEmails())) {
return false;
}
if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {
return false;
}
if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {
return false;
}
if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {
return false;
}
if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {
return false;
}
return true;
}
}",+ return false;+ }+ if (!scimUserFromDb.getEmails().containsAll(scimUserFromRequest.getEmails())) {,1
2991,9f9aebde557b791f275d6156d8bec12ac334425d,ProjectKB,"public class main {
private void retrieveMonitorDetails(final ODataBatchResponse res) {
Collection<String> headers = res.getHeader(HttpHeader.LOCATION);
if (headers == null || headers.isEmpty()) {
throw new AsyncRequestException(""Invalid async request response. Monitor URL not found"");
} else {
this.location = URI.create(headers.iterator().next());
}
headers = res.getHeader(HttpHeader.RETRY_AFTER);
if (headers != null && !headers.isEmpty()) {
this.retryAfter = parseReplyAfter(headers.iterator().next());
}
headers = res.getHeader(HttpHeader.PREFERENCE_APPLIED);
if (headers != null && !headers.isEmpty()) {
for (String header : headers) {
if (header.equalsIgnoreCase(new ODataPreferences().respondAsync())) {
preferenceApplied = true;
}
}
}
IOUtils.closeQuietly(res.getRawResponse());
}
}","public class main {
private void retrieveMonitorDetails(final ODataBatchResponse res) {
Collection<String> headers = res.getHeader(HttpHeader.LOCATION);
if (headers == null || headers.isEmpty()) {
throw new AsyncRequestException(""Invalid async request response. Monitor URL not found"");
} else {
this.location = createLocation(headers.iterator().next());
}
headers = res.getHeader(HttpHeader.RETRY_AFTER);
if (headers != null && !headers.isEmpty()) {
this.retryAfter = parseReplyAfter(headers.iterator().next());
}
headers = res.getHeader(HttpHeader.PREFERENCE_APPLIED);
if (headers != null && !headers.isEmpty()) {
for (String header : headers) {
if (header.equalsIgnoreCase(new ODataPreferences().respondAsync())) {
preferenceApplied = true;
}
}
}
IOUtils.closeQuietly(res.getRawResponse());
}
}",- this.location = URI.create(headers.iterator().next());+ this.location = createLocation(headers.iterator().next());,1
10647,3d15022e4b52a2fcc0912ef6c259c3905d4f374,ProjectKB,"public class main {
public Object extract(String valueAsString, Event event) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
return event.getProperty(valueAsString);
}
}","public class main {
public Object extract(String valueAsString, Event event) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
return PropertyUtils.getProperty(event.getProfile(), ""properties."" + valueAsString);
}
}","- return event.getProperty(valueAsString);+ return PropertyUtils.getProperty(event.getProfile(), ""properties."" + valueAsString);",1
5358,0afcf721ff209eb10a24c5e4b48ca9d6727ea99a,ProjectKB,"public class main {
protected void service(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
log.trace(""Service: {}"", request);
HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());
if (consumer == null) {
response.sendError(HttpServletResponse.SC_NOT_FOUND);
return;
}
if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
Iterator it = ObjectHelper.createIterable(consumer.getEndpoint().getHttpMethodRestrict()).iterator();
boolean match = false;
while (it.hasNext()) {
String method = it.next().toString();
if (method.equalsIgnoreCase(request.getMethod())) {
match = true;
break;
}
}
if (!match) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
}
if (""TRACE"".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
String contentType = request.getContentType();
if (HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType) && !consumer.getEndpoint().getComponent().isAllowJavaSerializedObject()) {
System.out.println(""415 miser !!!"");
response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
return;
}
final Exchange result = (Exchange) request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
if (result == null) {
final Continuation continuation = ContinuationSupport.getContinuation(request);
if (continuation.isInitial() && continuationTimeout != null) {
continuation.setTimeout(continuationTimeout);
}
if (consumer.isSuspended() && continuation.isInitial()) {
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
if (continuation.isExpired()) {
String id = (String) continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
expiredExchanges.put(id, id);
log.warn(""Continuation expired of exchangeId: {}"", id);
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
final Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut);
if (consumer.getEndpoint().isBridgeEndpoint()) {
exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);
exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE);
}
if (consumer.getEndpoint().isDisableStreamCache()) {
exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE);
}
HttpHelper.setCharsetFromContentType(request.getContentType(), exchange);
exchange.setIn(new HttpMessage(exchange, request, response));
String contextPath = consumer.getEndpoint().getPath();
exchange.getIn().setHeader(""CamelServletContextPath"", contextPath);
String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH);
if (contextPath != null
&& httpPath.startsWith(contextPath)) {
exchange.getIn().setHeader(Exchange.HTTP_PATH,
httpPath.substring(contextPath.length()));
}
if (log.isTraceEnabled()) {
log.trace(""Suspending continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());
try {
consumer.createUoW(exchange);
} catch (Exception e) {
log.error(""Error processing request"", e);
throw new ServletException(e);
}
continuation.suspend();
ClassLoader oldTccl = overrideTccl(exchange);
if (log.isTraceEnabled()) {
log.trace(""Processing request for exchangeId: {}"", exchange.getExchangeId());
}
consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {
public void done(boolean doneSync) {
boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;
if (!expired) {
if (log.isTraceEnabled()) {
log.trace(""Resuming continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME, exchange);
continuation.resume();
} else {
log.warn(""Cannot resume expired continuation of exchangeId: {}"", exchange.getExchangeId());
}
}
});
if (oldTccl != null) {
restoreTccl(exchange, oldTccl);
}
return;
}
try {
if (log.isTraceEnabled()) {
log.trace(""Resumed continuation and writing response for exchangeId: {}
}","public class main {
protected void service(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
log.trace(""Service: {}"", request);
HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers());
if (consumer == null) {
response.sendError(HttpServletResponse.SC_NOT_FOUND);
return;
}
if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
Iterator it = ObjectHelper.createIterable(consumer.getEndpoint().getHttpMethodRestrict()).iterator();
boolean match = false;
while (it.hasNext()) {
String method = it.next().toString();
if (method.equalsIgnoreCase(request.getMethod())) {
match = true;
break;
}
}
if (!match) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
}
if (""TRACE"".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
return;
}
String contentType = request.getContentType();
if (HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType) && !consumer.getEndpoint().getComponent().isAllowJavaSerializedObject()) {
response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
return;
}
final Exchange result = (Exchange) request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
if (result == null) {
final Continuation continuation = ContinuationSupport.getContinuation(request);
if (continuation.isInitial() && continuationTimeout != null) {
continuation.setTimeout(continuationTimeout);
}
if (consumer.isSuspended() && continuation.isInitial()) {
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
if (continuation.isExpired()) {
String id = (String) continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
expiredExchanges.put(id, id);
log.warn(""Continuation expired of exchangeId: {}"", id);
response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
return;
}
final Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut);
if (consumer.getEndpoint().isBridgeEndpoint()) {
exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);
exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE);
}
if (consumer.getEndpoint().isDisableStreamCache()) {
exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE);
}
HttpHelper.setCharsetFromContentType(request.getContentType(), exchange);
exchange.setIn(new HttpMessage(exchange, request, response));
String contextPath = consumer.getEndpoint().getPath();
exchange.getIn().setHeader(""CamelServletContextPath"", contextPath);
String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH);
if (contextPath != null
&& httpPath.startsWith(contextPath)) {
exchange.getIn().setHeader(Exchange.HTTP_PATH,
httpPath.substring(contextPath.length()));
}
if (log.isTraceEnabled()) {
log.trace(""Suspending continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID, exchange.getExchangeId());
try {
consumer.createUoW(exchange);
} catch (Exception e) {
log.error(""Error processing request"", e);
throw new ServletException(e);
}
continuation.suspend();
ClassLoader oldTccl = overrideTccl(exchange);
if (log.isTraceEnabled()) {
log.trace(""Processing request for exchangeId: {}"", exchange.getExchangeId());
}
consumer.getAsyncProcessor().process(exchange, new AsyncCallback() {
public void done(boolean doneSync) {
boolean expired = expiredExchanges.remove(exchange.getExchangeId()) != null;
if (!expired) {
if (log.isTraceEnabled()) {
log.trace(""Resuming continuation of exchangeId: {}"", exchange.getExchangeId());
}
continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME, exchange);
continuation.resume();
} else {
log.warn(""Cannot resume expired continuation of exchangeId: {}"", exchange.getExchangeId());
}
}
});
if (oldTccl != null) {
restoreTccl(exchange, oldTccl);
}
return;
}
try {
if (log.isTraceEnabled()) {
log.trace(""Resumed continuation and writing response for exchangeId: {}
}","- System.out.println(""415 miser !!!"");",1
2205,e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f,ProjectKB,"public class main {
public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
String contextPath = getSanitizedContextPath(request);
request.setAttribute(""contextPath"", contextPath);
request.getRequestDispatcher(""/index.jsp"").forward(request, response);
}
}","public class main {
public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
injectContextPathAttribute(request);
request.getRequestDispatcher(forwardPath).forward(request, response);
}
}","+ injectContextPathAttribute(request);- String contextPath = getSanitizedContextPath(request);- request.setAttribute(""contextPath"", contextPath);- request.getRequestDispatcher(""/index.jsp"").forward(request, response);+ request.getRequestDispatcher(forwardPath).forward(request, response);",1
18988,5377f25d9eed755328216912ef5e922c93e14f3,ProjectKB,"public class main {
private CertificatePinner(Builder builder) {
hostnameToPins = Util.immutableMap(builder.hostnameToPins);
}
}","public class main {
private CertificatePinner(Builder builder) {
this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);
}
}",- hostnameToPins = Util.immutableMap(builder.hostnameToPins);+ this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);,1
2929,8fbe2e,ProjectKB,"public class main {
public static boolean isQuery(int c) {
return DEFAULT.isQueryRelaxed(c);
}
static int skipLws(Reader input) throws IOException {
input.mark(1);
int c = input.read();
while (c == 32 || c == 9 || c == 10 || c == 13) {
input.mark(1);
c = input.read();
}
input.reset();
return c;
}
}","public class main {
public static boolean isQuery(int c) {
return DEFAULT.isQueryRelaxed(c);
}
public static boolean isControl(int c) {
try {
return IS_CONTROL[c];
}
}",+ public static boolean isControl(int c) {+ try {+ return IS_CONTROL[c];- static int skipLws(Reader input) throws IOException {- input.mark(1);- int c = input.read();- while (c == 32 || c == 9 || c == 10 || c == 13) {- input.mark(1);- c = input.read();- }- input.reset();- return c;,1
4767,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
clients.get(AdminRoles.MANAGE_USERS).realms().realm(REALM_NAME).remove();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- clients.get(AdminRoles.MANAGE_USERS).realms().realm(REALM_NAME).remove();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
5858,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public AbstractClientEvent readCacheEvent(ByteBuf buf, Marshaller marshaller, short eventTypeId, List<String> whitelist, SocketAddress serverAddress) {
return null;     }
}","public class main {
public AbstractClientEvent readCacheEvent(ByteBuf buf, Function<byte[], DataFormat> dataFormatFunction, short eventTypeId, List<String> whitelist, SocketAddress serverAddress) {
return null;     }
}","- public AbstractClientEvent readCacheEvent(ByteBuf buf, Marshaller marshaller, short eventTypeId, List<String> whitelist, SocketAddress serverAddress) {+ public AbstractClientEvent readCacheEvent(ByteBuf buf, Function<byte[], DataFormat> dataFormatFunction, short eventTypeId, List<String> whitelist, SocketAddress serverAddress) {",1
12364,3aa6086ed99fa7158d423dc7c33dae6da466b09,ProjectKB,"public class main {
public void inform(ResourceLoader loader) throws SolrException {
if(loader == null) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Needs ResourceLoader in order to load config file"");
}
this.loader = loader;
reload();
}
}","public class main {
public void inform(ResourceLoader loader) throws SolrException {
if(loader == null) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Needs ResourceLoader in order to load config file"");
}
this.loader = loader;
reload();
}
}","- InputStream is = null;+ log.debug(""Reloading exchange rates from file {}"", currencyConfigFile);+ Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);- log.debug(""Reloading exchange rates from file ""+this.currencyConfigFile);- is = loader.openResource(currencyConfigFile);- javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();- try {- dbf.setXIncludeAware(true);- dbf.setNamespaceAware(true);- } catch (UnsupportedOperationException e) {- throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""XML parser doesn't support XInclude option"", e);- }- try {- Document doc = dbf.newDocumentBuilder().parse(is);+ } catch (SAXException | IOException | XPathExpressionException e) {- } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error parsing currency config."", e);- }- } catch (IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while opening Currency configuration file ""+currencyConfigFile, e);+ throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while parsing currency configuration file ""+currencyConfigFile, e);- } finally {- try {- if (is != null) {- is.close();- }- } catch (IOException e) {- e.printStackTrace();- }- }- this.rates = tmpRates;- return true;",1
1991,da157a89402eeb2d5d071db3558c3b417bfc3ed,ProjectKB,"public class main {
public void testRedirectWatchdox() throws Exception {
Set<String> redirectUris = new HashSet<String>(Arrays.asList(""http:		client.setRegisteredRedirectUri(redirectUris);
String requestedRedirect = ""http:		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
}
}","public class main {
public void testRedirectWatchdox() throws Exception {
Set<String> redirectUris = new HashSet<String>(Arrays.asList(""http:		client.setRegisteredRedirectUri(redirectUris);
String requestedRedirect = ""http:		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
}
}",- return requestedRedirect;+ UriComponentsBuilder redirectUriBuilder = UriComponentsBuilder.fromUriString(redirectUri);+ UriComponents requestedRedirectUri = UriComponentsBuilder.fromUriString(requestedRedirect).build();+ if (this.matchSubdomains) {+ redirectUriBuilder.host(requestedRedirectUri.getHost());+ }+ if (!this.matchPorts) {+ redirectUriBuilder.port(requestedRedirectUri.getPort());+ }+ redirectUriBuilder.replaceQuery(requestedRedirectUri.getQuery());						redirectUriBuilder.fragment(null);+ return redirectUriBuilder.build().toUriString();,1
13110,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","- functionStringMap.put(new AlterConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new AlterConnectionFunction(), ""*"");- functionStringMap.put(new AlterMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new AlterMappingFunction(), ""*"");- functionStringMap.put(new CreateConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new CreateConnectionFunction(), ""*"");- functionStringMap.put(new CreateMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new CreateMappingFunction(), ""*"");- functionStringMap.put(new DescribeConnectionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeConnectionFunction(), ""*"");- functionStringMap.put(new DescribeMappingFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeMappingFunction(), ""*"");- functionStringMap.put(new DestroyConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyConnectionFunction(), ""*"");- functionStringMap.put(new DestroyMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyMappingFunction(), ""*"");- functionStringMap.put(new ListConnectionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListConnectionFunction(), ""*"");- functionStringMap.put(new ListMappingFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListMappingFunction(), ""*"");- functionStringMap.put(new InheritsDefaultPermissionsJDBCFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new InheritsDefaultPermissionsJDBCFunction(), ""*"");",1
4995,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.components().query();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.components().query();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
3831,b954402272ddcfbb45dc1495520f920e70cc041c,ProjectKB,"public class main {
protected void finalizeSettings() throws Exception {
Map<String, Object> values = new LinkedHashMap<>();
if (System.getProperty(JmxSystemPropertyKeys.REGISTRY_PORT) != null) {
registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT);
values.put(JmxSystemPropertyKeys.REGISTRY_PORT, registryPort);
}
if (System.getProperty(JmxSystemPropertyKeys.CONNECTOR_PORT) != null) {
connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT);
values.put(JmxSystemPropertyKeys.CONNECTOR_PORT, connectorPort);
}
if (System.getProperty(JmxSystemPropertyKeys.DOMAIN) != null) {
mBeanServerDefaultDomain = System.getProperty(JmxSystemPropertyKeys.DOMAIN);
values.put(JmxSystemPropertyKeys.DOMAIN, mBeanServerDefaultDomain);
}
if (System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN) != null) {
mBeanObjectDomainName = System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN);
values.put(JmxSystemPropertyKeys.MBEAN_DOMAIN, mBeanObjectDomainName);
}
if (System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH) != null) {
serviceUrlPath = System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH);
values.put(JmxSystemPropertyKeys.SERVICE_URL_PATH, serviceUrlPath);
}
if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {
createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);
values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);
}
if (System.getProperty(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID) != null) {
onlyRegisterProcessorWithCustomId = Boolean.getBoolean(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID);
values.put(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID, onlyRegisterProcessorWithCustomId);
}
if (System.getProperty(JmxSystemPropertyKeys.USE_PLATFORM_MBS) != null) {
usePlatformMBeanServer = Boolean.getBoolean(JmxSystemPropertyKeys.USE_PLATFORM_MBS);
values.put(JmxSystemPropertyKeys.USE_PLATFORM_MBS, usePlatformMBeanServer);
}
if (System.getProperty(JmxSystemPropertyKeys.REGISTER_ALWAYS) != null) {
registerAlways = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_ALWAYS);
values.put(JmxSystemPropertyKeys.REGISTER_ALWAYS, registerAlways);
}
if (System.getProperty(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES) != null) {
registerNewRoutes = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES);
values.put(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES, registerNewRoutes);
}
if (System.getProperty(JmxSystemPropertyKeys.MASK) != null) {
mask = Boolean.getBoolean(JmxSystemPropertyKeys.MASK);
values.put(JmxSystemPropertyKeys.MASK, mask);
}
if (System.getProperty(JmxSystemPropertyKeys.INCLUDE_HOST_NAME) != null) {
includeHostName = Boolean.getBoolean(JmxSystemPropertyKeys.INCLUDE_HOST_NAME);
values.put(JmxSystemPropertyKeys.INCLUDE_HOST_NAME, includeHostName);
}
if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {
createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);
values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);
}
if (System.getProperty(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED) != null) {
loadStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED);
values.put(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED, loadStatisticsEnabled);
}
if (System.getProperty(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED) != null) {
endpointRuntimeStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED);
values.put(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED, endpointRuntimeStatisticsEnabled);
}
if (System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL) != null) {
statisticsLevel = camelContext.getTypeConverter().mandatoryConvertTo(ManagementStatisticsLevel.class, System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL));
values.put(JmxSystemPropertyKeys.STATISTICS_LEVEL, statisticsLevel);
}
if (System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN) != null) {
managementNamePattern = System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN);
values.put(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN, managementNamePattern);
}
if (System.getProperty(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS) != null) {
useHostIPAddress = Boolean.getBoolean(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS);
values.put(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS, useHostIPAddress);
}
if (!values.isEmpty()) {
LOG.info(""ManagementAgent detected JVM system properties: {}"", values);
}
}","public class main {
protected void finalizeSettings() throws Exception {
Map<String, Object> values = new LinkedHashMap<>();
if (System.getProperty(JmxSystemPropertyKeys.DOMAIN) != null) {
mBeanServerDefaultDomain = System.getProperty(JmxSystemPropertyKeys.DOMAIN);
values.put(JmxSystemPropertyKeys.DOMAIN, mBeanServerDefaultDomain);
}
if (System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN) != null) {
mBeanObjectDomainName = System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN);
values.put(JmxSystemPropertyKeys.MBEAN_DOMAIN, mBeanObjectDomainName);
}
if (System.getProperty(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID) != null) {
onlyRegisterProcessorWithCustomId = Boolean.getBoolean(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID);
values.put(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID, onlyRegisterProcessorWithCustomId);
}
if (System.getProperty(JmxSystemPropertyKeys.USE_PLATFORM_MBS) != null) {
usePlatformMBeanServer = Boolean.getBoolean(JmxSystemPropertyKeys.USE_PLATFORM_MBS);
values.put(JmxSystemPropertyKeys.USE_PLATFORM_MBS, usePlatformMBeanServer);
}
if (System.getProperty(JmxSystemPropertyKeys.REGISTER_ALWAYS) != null) {
registerAlways = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_ALWAYS);
values.put(JmxSystemPropertyKeys.REGISTER_ALWAYS, registerAlways);
}
if (System.getProperty(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES) != null) {
registerNewRoutes = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES);
values.put(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES, registerNewRoutes);
}
if (System.getProperty(JmxSystemPropertyKeys.MASK) != null) {
mask = Boolean.getBoolean(JmxSystemPropertyKeys.MASK);
values.put(JmxSystemPropertyKeys.MASK, mask);
}
if (System.getProperty(JmxSystemPropertyKeys.INCLUDE_HOST_NAME) != null) {
includeHostName = Boolean.getBoolean(JmxSystemPropertyKeys.INCLUDE_HOST_NAME);
values.put(JmxSystemPropertyKeys.INCLUDE_HOST_NAME, includeHostName);
}
if (System.getProperty(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED) != null) {
loadStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED);
values.put(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED, loadStatisticsEnabled);
}
if (System.getProperty(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED) != null) {
endpointRuntimeStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED);
values.put(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED, endpointRuntimeStatisticsEnabled);
}
if (System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL) != null) {
statisticsLevel = camelContext.getTypeConverter().mandatoryConvertTo(ManagementStatisticsLevel.class, System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL));
values.put(JmxSystemPropertyKeys.STATISTICS_LEVEL, statisticsLevel);
}
if (System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN) != null) {
managementNamePattern = System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN);
values.put(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN, managementNamePattern);
}
if (System.getProperty(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS) != null) {
useHostIPAddress = Boolean.getBoolean(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS);
values.put(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS, useHostIPAddress);
}
if (!values.isEmpty()) {
LOG.info(""ManagementAgent detected JVM system properties: {}"", values);
}
}","- if (System.getProperty(JmxSystemPropertyKeys.REGISTRY_PORT) != null) {- registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT);- values.put(JmxSystemPropertyKeys.REGISTRY_PORT, registryPort);- }- if (System.getProperty(JmxSystemPropertyKeys.CONNECTOR_PORT) != null) {- connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT);- values.put(JmxSystemPropertyKeys.CONNECTOR_PORT, connectorPort);- }- }- if (System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH) != null) {- serviceUrlPath = System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH);- values.put(JmxSystemPropertyKeys.SERVICE_URL_PATH, serviceUrlPath);- }- if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {- createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);- values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);- if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {- createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR);- values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector);- }",1
13768,5a29daedeb5ac7e9e2af87ce1a7bbfad230d5c8,ProjectKB,"public class main {
public void testCnxManagerTimeout() throws Exception {
Random rand = new Random();
byte b = (byte) rand.nextInt();
int deadPort = PortAssignment.unique();
String deadAddress = ""10.1.1."" + b;
LOG.info(""This is the dead address I'm trying: "" + deadAddress);
peers.put(Long.valueOf(2),
new QuorumServer(2,
new InetSocketAddress(deadAddress, deadPort),
new InetSocketAddress(deadAddress, PortAssignment.unique()),
new InetSocketAddress(deadAddress, PortAssignment.unique())));
peerTmpdir[2] = ClientBase.createTmpDir();
QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2);
QuorumCnxManager cnxManager = new QuorumCnxManager(peer);
QuorumCnxManager.Listener listener = cnxManager.listener;
if(listener != null){
listener.start();
} else {
LOG.error(""Null listener when initializing cnx manager"");
}
long begin = Time.currentElapsedTime();
cnxManager.toSend(2L, createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1));
long end = Time.currentElapsedTime();
if((end - begin) > 6000) Assert.fail(""Waited more than necessary"");
cnxManager.halt();
Assert.assertFalse(cnxManager.listener.isAlive());
}
}","public class main {
public void testCnxManagerTimeout() throws Exception {
Random rand = new Random();
byte b = (byte) rand.nextInt();
int deadPort = PortAssignment.unique();
String deadAddress = ""10.1.1."" + b;
LOG.info(""This is the dead address I'm trying: "" + deadAddress);
peers.put(Long.valueOf(2),
new QuorumServer(2,
new InetSocketAddress(deadAddress, deadPort),
new InetSocketAddress(deadAddress, PortAssignment.unique()),
new InetSocketAddress(deadAddress, PortAssignment.unique())));
peerTmpdir[2] = ClientBase.createTmpDir();
QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2);
QuorumCnxManager cnxManager = peer.createCnxnManager();
QuorumCnxManager.Listener listener = cnxManager.listener;
if(listener != null){
listener.start();
} else {
LOG.error(""Null listener when initializing cnx manager"");
}
long begin = Time.currentElapsedTime();
cnxManager.toSend(2L, createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1));
long end = Time.currentElapsedTime();
if((end - begin) > 6000) Assert.fail(""Waited more than necessary"");
cnxManager.halt();
Assert.assertFalse(cnxManager.listener.isAlive());
}
}",- QuorumCnxManager cnxManager = new QuorumCnxManager(peer);+ QuorumCnxManager cnxManager = peer.createCnxnManager();,1
237,1880d4824e6c5f98170b9a00aad1d437ee2aa12,ProjectKB,"public class main {
public void init(Map<String,String> params) throws SolrException {
this.currencyConfigFile = params.get(PARAM_CURRENCY_CONFIG);
if(currencyConfigFile == null) {
throw new SolrException(SolrException.ErrorCode.NOT_FOUND, ""Missing required configuration ""+PARAM_CURRENCY_CONFIG);
}
params.remove(PARAM_CURRENCY_CONFIG);
}
}","public class main {
public void init(Map<String,String> params) throws SolrException {
this.currencyConfigFile = params.get(PARAM_CURRENCY_CONFIG);
if(currencyConfigFile == null) {
throw new SolrException(SolrException.ErrorCode.NOT_FOUND, ""Missing required configuration ""+PARAM_CURRENCY_CONFIG);
}
params.remove(PARAM_CURRENCY_CONFIG);
}
}","- InputStream is = null;+ log.debug(""Reloading exchange rates from file {}"", currencyConfigFile);+ Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);- log.debug(""Reloading exchange rates from file ""+this.currencyConfigFile);- is = loader.openResource(currencyConfigFile);- javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();- try {- dbf.setXIncludeAware(true);- dbf.setNamespaceAware(true);- } catch (UnsupportedOperationException e) {- throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""XML parser doesn't support XInclude option"", e);- }- try {- Document doc = dbf.newDocumentBuilder().parse(is);+ } catch (SAXException | IOException | XPathExpressionException e) {- } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error parsing currency config."", e);- }- } catch (IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while opening Currency configuration file ""+currencyConfigFile, e);+ throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while parsing currency configuration file ""+currencyConfigFile, e);- } finally {- try {- if (is != null) {- is.close();- }- } catch (IOException e) {- e.printStackTrace();- }- }- this.rates = tmpRates;- return true;",1
9267,3ddcbde466c16646a3a858baa57aafd8e65f6d5,ProjectKB,"public class main {
public SecureRandom getObject() throws Exception {
SecureRandom rnd = SecureRandom.getInstance(algorithm);
if (seed != null) {
byte[] seedBytes = FileCopyUtils.copyToByteArray(seed.getInputStream());
rnd.setSeed(seedBytes);
}
else {
rnd.nextBytes(new byte[1]);
}
return rnd;
}
}","public class main {
public SecureRandom getObject() throws Exception {
SecureRandom rnd = SecureRandom.getInstance(algorithm);
rnd.nextBytes(new byte[1]);
if (seed != null) {
byte[] seedBytes = FileCopyUtils.copyToByteArray(seed.getInputStream());
rnd.setSeed(seedBytes);
}
return rnd;
}
}",+ rnd.nextBytes(new byte[1]);- else {- rnd.nextBytes(new byte[1]);- },1
1708,66132926f1bac0b878da5841be2f93fa5075d88f,ProjectKB,"public class main {
public void resetPassword_WithNoRedirectUri() {
setupResetPassword(""example"", """");
BaseClientDetails client = new BaseClientDetails();
client.setRegisteredRedirectUri(Collections.singleton(""redirect.example.com/*""));
when(clientDetailsService.loadClientByClientId(""example"")).thenReturn(client);
ResetPasswordResponse response = emailResetPasswordService.resetPassword(""secret_code"", ""new_secret"");
assertEquals(""home"", response.getRedirectUri());
}
}","public class main {
public void resetPassword_WithNoRedirectUri() {
setupResetPassword(""example"", """");
BaseClientDetails client = new BaseClientDetails();
client.setRegisteredRedirectUri(Collections.singleton(""redirect.example.com/*""));
when(clientDetailsService.loadClientByClientId(""example"")).thenReturn(client);
ResetPasswordResponse response = emailResetPasswordService.resetPassword(""secret_code"", ""new_secret"");
assertEquals(""home"", response.getRedirectUri());
}
}","- new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), ""user-id"", null);+ new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), ""{\""user_id\"":\""user-id\"",\""username\"":\""username\"",\""passwordModifiedTime\"":null,\""client_id\"":\""\"",\""redirect_uri\"":\""\""}"", null);- } catch (InvalidPasswordException e) {- assertEquals(""Your new password cannot be the same as the old password."", e.getMessage());- assertEquals(UNPROCESSABLE_ENTITY, e.getStatus());",1
16839,8b67e2d88ca8040577248491a5e6e9c806184522,ProjectKB,"public class main {
public Channel getChannel(String tableName, String contentId) {
String prefix = channelDao.getPreFix();
JdbcTemplate jdbcTemplate = SpringContextHolder.getBean(""jdbcTemplate"");
String sql = ""select a.* from ""+prefix+""channel a join "" + tableName+"" b on b.cid = a.id WHERE b.id = ""+ contentId+"" limit 1"";
return jdbcTemplate.queryForObject(sql, new ObjectRowMapper.RowMapperChannel());
}
}","public class main {
public Channel getChannel(String tableName, Integer contentId) {
String prefix = channelDao.getPreFix();
JdbcTemplate jdbcTemplate = SpringContextHolder.getBean(""jdbcTemplate"");
String sql = ""select a.* from ""+prefix+""channel a join "" + tableName + "" b on b.cid = a.id WHERE b.id = ""+ contentId+"" limit 1"";
return jdbcTemplate.queryForObject(sql, new ObjectRowMapper.RowMapperChannel());
}
}","- public Channel getChannel(String tableName, String contentId) {+ public Channel getChannel(String tableName, Integer contentId) {- String sql = ""select a.* from ""+prefix+""channel a join "" + tableName+"" b on b.cid = a.id WHERE b.id = ""+ contentId+"" limit 1"";+ String sql = ""select a.* from ""+prefix+""channel a join "" + tableName + "" b on b.cid = a.id WHERE b.id = ""+ contentId+"" limit 1"";",1
19754,c703479f5880a099c38f2fd5e63c7d9f0567e5ff,ProjectKB,"public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
}","public class main {
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
}","- String body = exchange.getIn().getBody(String.class);+ MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);- assertNotNull(body);+ assertNotNull(cool);- assertEquals(""Hello World"", body);- MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");+ assertEquals(123, cool.getId());+ assertEquals(""Camel"", cool.getName());+ exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");- exchange.getOut().setBody(reply);+ exchange.getOut().setBody(""OK"");- exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);",1
18835,8dc3bb7d3c3d0b1487e3ef3dcbdebda865d2b20e,ProjectKB,"public class main {
public void testConfiguration() throws Exception {
Jaxb2Marshaller unmarshaller = new Jaxb2Marshaller();
unmarshaller.setClassesToBeBound(Foo.class);
StaxEventItemReader<Foo> reader = new StaxEventItemReaderBuilder<Foo>()
.name(""fooReader"")
.resource(getResource(SIMPLE_XML))
.addFragmentRootElements(""foo"")
.currentItemCount(1)
.maxItemCount(2)
.unmarshaller(unmarshaller)
.build();
reader.afterPropertiesSet();
ExecutionContext executionContext = new ExecutionContext();
reader.open(executionContext);
Foo item = reader.read();
assertNull(reader.read());
reader.update(executionContext);
reader.close();
assertEquals(4, item.getFirst());
assertEquals(""five"", item.getSecond());
assertEquals(""six"", item.getThird());
assertEquals(2, executionContext.size());
}
}","public class main {
public void testConfiguration() throws Exception {
Jaxb2Marshaller unmarshaller = new Jaxb2Marshaller();
unmarshaller.setClassesToBeBound(Foo.class);
StaxEventItemReader<Foo> reader = new StaxEventItemReaderBuilder<Foo>()
.name(""fooReader"")
.resource(getResource(SIMPLE_XML))
.addFragmentRootElements(""foo"")
.currentItemCount(1)
.maxItemCount(2)
.unmarshaller(unmarshaller)
.xmlInputFactory(XMLInputFactory.newInstance())
.build();
reader.afterPropertiesSet();
ExecutionContext executionContext = new ExecutionContext();
reader.open(executionContext);
Foo item = reader.read();
assertNull(reader.read());
reader.update(executionContext);
reader.close();
assertEquals(4, item.getFirst());
assertEquals(""five"", item.getSecond());
assertEquals(""six"", item.getThird());
assertEquals(2, executionContext.size());
}
}",+ .xmlInputFactory(XMLInputFactory.newInstance()),1
18032,da34b18cb3092df4972e2b6fa5178d1059923910,ProjectKB,"public class main {
public void testWrongEncoding() throws Exception {
String wrongEncoding = ""stopwordsWrongEncoding.txt"";
SolrResourceLoader loader = new SolrResourceLoader(""solr/collection1"");
try {
List<String> lines = loader.getLines(wrongEncoding);
fail();
} catch (SolrException expected) {
assertTrue(expected.getCause() instanceof CharacterCodingException);
}
}
}","public class main {
public void testWrongEncoding() throws Exception {
String wrongEncoding = ""stopwordsWrongEncoding.txt"";
SolrResourceLoader loader = new SolrResourceLoader(""solr/collection1"");
try {
loader.getLines(wrongEncoding);
fail();
} catch (SolrException expected) {
assertTrue(expected.getCause() instanceof CharacterCodingException);
}
loader.close();
}
}",- List<String> lines = loader.getLines(wrongEncoding);+ loader.getLines(wrongEncoding);+ loader.close();,1
15335,044772641d12b9281185f6cf50f8485b8747132,ProjectKB,"public class main {
public static List<HttpRange> parseRanges(String ranges) {
if (!StringUtils.hasLength(ranges)) {
return Collections.emptyList();
}
if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {
throw new IllegalArgumentException(""Range '"" + ranges + ""' does not start with 'bytes='"");
}
ranges = ranges.substring(BYTE_RANGE_PREFIX.length());
String[] tokens = StringUtils.tokenizeToStringArray(ranges, "","");
List<HttpRange> result = new ArrayList<HttpRange>(tokens.length);
for (String token : tokens) {
result.add(parseRange(token));
}
return result;
}
}","public class main {
public static List<HttpRange> parseRanges(String ranges) {
if (!StringUtils.hasLength(ranges)) {
return Collections.emptyList();
}
if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {
throw new IllegalArgumentException(""Range '"" + ranges + ""' does not start with 'bytes='"");
}
ranges = ranges.substring(BYTE_RANGE_PREFIX.length());
String[] tokens = StringUtils.tokenizeToStringArray(ranges, "","");
Assert.isTrue(tokens.length <= MAX_RANGES, ""Too many ranges "" + tokens.length);
List<HttpRange> result = new ArrayList<HttpRange>(tokens.length);
for (String token : tokens) {
result.add(parseRange(token));
}
return result;
}
}","+ Assert.isTrue(tokens.length <= MAX_RANGES, ""Too many ranges "" + tokens.length);",1
16022,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
private static void initialize(InternalCache cache) {
try {
AttributesFactory factory = new AttributesFactory();
factory.setScope(Scope.LOCAL);
factory.setEntryTimeToLive(
new ExpirationAttributes(ADMIN_REGION_EXPIRY_INTERVAL, ExpirationAction.DESTROY));
cache.getLogger().fine(""ClientHealthMonitoringRegion, setting TTL for entry...."");
factory.addCacheListener(prepareCacheListener());
factory.setStatisticsEnabled(true);
RegionAttributes regionAttrs = factory.create();
InternalRegionArguments internalArgs = new InternalRegionArguments();
internalArgs.setIsUsedForMetaRegion(true);
internalArgs.setIsUsedForPartitionedRegionAdmin(false);
currentInstance = cache.createVMRegion(ADMIN_REGION_NAME, regionAttrs, internalArgs);
} catch (Exception ex) {
cache.getLogger().error(
""Error while creating an admin region"", ex);
}
}
}","public class main {
private static void initialize(InternalCache cache) {
try {
AttributesFactory factory = new AttributesFactory();
factory.setScope(Scope.LOCAL);
factory.setEntryTimeToLive(
new ExpirationAttributes(ADMIN_REGION_EXPIRY_INTERVAL, ExpirationAction.DESTROY));
cache.getLogger().fine(""ClientHealthMonitoringRegion, setting TTL for entry...."");
factory.addCacheListener(prepareCacheListener());
factory.setValueConstraint(ClientHealthStats.class);
factory.setStatisticsEnabled(true);
RegionAttributes regionAttrs = factory.create();
InternalRegionArguments internalArgs = new InternalRegionArguments();
internalArgs.setIsUsedForMetaRegion(true);
internalArgs.setIsUsedForPartitionedRegionAdmin(false);
currentInstance = cache.createVMRegion(ADMIN_REGION_NAME, regionAttrs, internalArgs);
} catch (Exception ex) {
cache.getLogger().error(
""Error while creating an admin region"", ex);
}
}
}",+ factory.setValueConstraint(ClientHealthStats.class);,1
17426,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
public void testMultiplatformMappingsCollecting() throws Exception {
String nonJavaClassName = ""random.platform.Mapping"";
MarshallerContextImpl marshCtx = new MarshallerContextImpl(null);
marshCtx.onMarshallerProcessorStarted(ctx, null);
MarshallerMappingItem item = new MarshallerMappingItem((byte) 2, 101, nonJavaClassName);
marshCtx.onMappingProposed(item);
marshCtx.onMappingAccepted(item);
ArrayList<Map<Integer, MappedName>> allMappings = marshCtx.getCachedMappings();
assertEquals(allMappings.size(), 3);
assertTrue(allMappings.get(0).isEmpty());
assertTrue(allMappings.get(1).isEmpty());
Map<Integer, MappedName> nonJavaMappings = allMappings.get(2);
assertNotNull(nonJavaMappings);
assertNotNull(nonJavaMappings.get(101));
assertEquals(nonJavaClassName, nonJavaMappings.get(101).className());
}
}","public class main {
public void testMultiplatformMappingsCollecting() throws Exception {
String nonJavaClassName = ""random.platform.Mapping"";
MarshallerContextImpl marshCtx = new MarshallerContextImpl(null, null);
marshCtx.onMarshallerProcessorStarted(ctx, null);
MarshallerMappingItem item = new MarshallerMappingItem((byte) 2, 101, nonJavaClassName);
marshCtx.onMappingProposed(item);
marshCtx.onMappingAccepted(item);
ArrayList<Map<Integer, MappedName>> allMappings = marshCtx.getCachedMappings();
assertEquals(allMappings.size(), 3);
assertTrue(allMappings.get(0).isEmpty());
assertTrue(allMappings.get(1).isEmpty());
Map<Integer, MappedName> nonJavaMappings = allMappings.get(2);
assertNotNull(nonJavaMappings);
assertNotNull(nonJavaMappings.get(101));
assertEquals(nonJavaClassName, nonJavaMappings.get(101).className());
}
}","- MarshallerContextImpl marshCtx = new MarshallerContextImpl(null);+ MarshallerContextImpl marshCtx = new MarshallerContextImpl(null, null);",1
3785,b954402272ddcfbb45dc1495520f920e70cc041c,ProjectKB,"public class main {
public void setJmxCreateConnector(boolean jmxCreateConnector) {
this.jmxCreateConnector = jmxCreateConnector;
}
}","public class main {
public void setJmxCreateConnector(boolean jmxCreateConnector) {
this.jmxCreateConnector = jmxCreateConnector;
}
}","- public boolean isValid(final AnyType object, final ConstraintValidatorContext context) {+ public boolean isValid(final AnyType anyType, final ConstraintValidatorContext context) {- boolean isValid;+ boolean isValid = true;+ if (isHtml(anyType.getKey())) {+ context.buildConstraintViolationWithTemplate(+ getTemplate(EntityViolationType.InvalidKey, ""Invalid key"")).+ addPropertyNode(""key"").addConstraintViolation();+ isValid = false;+ }+ boolean nameKindMatch;- switch (object.getKind()) {+ switch (anyType.getKind()) {- isValid = AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey());+ nameKindMatch = AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey());- isValid = AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());+ nameKindMatch = AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey());- isValid = !AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey())+ nameKindMatch = !AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey())- && !AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey())+ && !AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey())- && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(object.getKey());+ && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(anyType.getKey());- if (!isValid) {+ if (!nameKindMatch) {- return isValid;+ return isValid && nameKindMatch;",1
6146,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public void writeObject(ObjectOutput output, ToEmptyBytesKeyValueFilterConverter object) throws IOException {
}
}","public class main {
public void writeObject(ObjectOutput output, ToEmptyBytesKeyValueFilterConverter object) {
}
}","- public void writeObject(ObjectOutput output, ToEmptyBytesKeyValueFilterConverter object) throws IOException {+ public void writeObject(ObjectOutput output, ToEmptyBytesKeyValueFilterConverter object) {",1
16005,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
public static synchronized void publishClientStats(PoolImpl pool) {
InternalCache currentCache = GemFireCacheImpl.getInstance();
if (!initializeStatistics(currentCache)) {
return;     }
if (logger.isDebugEnabled()) {
logger.debug(""Entering ClientStatsManager#publishClientStats..."");
}
ClientHealthStats stats = getClientHealthStats(currentCache, pool);
try {
InternalDistributedSystem ds =
(InternalDistributedSystem) currentCache.getDistributedSystem();
ServerRegionProxy regionProxy =
new ServerRegionProxy(ClientHealthMonitoringRegion.ADMIN_REGION_NAME, pool);
EventID eventId = new EventID(ds);
@Released
EntryEventImpl event = new EntryEventImpl((Object) null);
try {
event.setEventId(eventId);
regionProxy.putForMetaRegion(ds.getDistributedMember(), stats, null, event, null, true);
} finally {
event.release();
}
} catch (DistributedSystemDisconnectedException e) {
throw e;
} catch (CacheWriterException cwx) {
pool.getCancelCriterion().checkCancelInProgress(cwx);
currentCache.getCancelCriterion().checkCancelInProgress(cwx);
logger.warn(
""Failed to send client health stats to cacheserver."",
cwx);
} catch (Exception e) {
pool.getCancelCriterion().checkCancelInProgress(e);
currentCache.getCancelCriterion().checkCancelInProgress(e);
logger.info(""Failed to publish client statistics"", e);
}
if (logger.isDebugEnabled()) {
logger.debug(""Exiting ClientStatsManager#publishClientStats."");
}
}
}","public class main {
public static synchronized void publishClientStats(PoolImpl pool) {
InternalCache currentCache = GemFireCacheImpl.getInstance();
if (!initializeStatistics(currentCache)) {
return;     }
if (logger.isDebugEnabled()) {
logger.debug(""Entering ClientStatsManager#publishClientStats..."");
}
ClientHealthStats stats = getClientHealthStats(currentCache, pool);
try {
InternalDistributedSystem ds =
(InternalDistributedSystem) currentCache.getDistributedSystem();
ServerRegionProxy regionProxy =
new ServerRegionProxy(ClientHealthMonitoringRegion.ADMIN_REGION_NAME, pool);
EventID eventId = new EventID(ds);
@Released
EntryEventImpl event = new EntryEventImpl((Object) null);
try {
event.setEventId(eventId);
regionProxy.putForMetaRegion(ds.getDistributedMember(), stats, null, event, null);
} finally {
event.release();
}
} catch (DistributedSystemDisconnectedException e) {
throw e;
} catch (CacheWriterException cwx) {
pool.getCancelCriterion().checkCancelInProgress(cwx);
currentCache.getCancelCriterion().checkCancelInProgress(cwx);
logger.warn(
""Failed to send client health stats to cacheserver."",
cwx);
} catch (Exception e) {
pool.getCancelCriterion().checkCancelInProgress(e);
currentCache.getCancelCriterion().checkCancelInProgress(e);
logger.info(""Failed to publish client statistics"", e);
}
if (logger.isDebugEnabled()) {
logger.debug(""Exiting ClientStatsManager#publishClientStats."");
}
}
}","- regionProxy.putForMetaRegion(ds.getDistributedMember(), stats, null, event, null, true);+ regionProxy.putForMetaRegion(ds.getDistributedMember(), stats, null, event, null);",1
4992,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.identityProviders().importFrom(Collections.<String, Object>emptyMap());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.identityProviders().importFrom(Collections.<String, Object>emptyMap());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
6777,784fabac7d1586a5614bd4bc8854fd62850dbe26,ProjectKB,"public class main {
public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory) {
if (sslSocketFactory == null) throw new NullPointerException(""sslSocketFactory == null"");
this.sslSocketFactory = sslSocketFactory;
this.certificateAuthorityCouncil = null;
return this;
}
}","public class main {
public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory) {
if (sslSocketFactory == null) throw new NullPointerException(""sslSocketFactory == null"");
this.sslSocketFactory = sslSocketFactory;
this.trustRootIndex = null;
return this;
}
}",- this.certificateAuthorityCouncil = null;+ this.trustRootIndex = null;,1
4766,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
clients.get(""REALM2"").realms().realm(REALM_NAME).remove();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- clients.get(""REALM2"").realms().realm(REALM_NAME).remove();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
4102,e3652b44a377436256f77a2749ed133bbafd2fb,ProjectKB,"public class main {
public static CuratorFramework createZKClient(Map conf) {
List<String> zkServers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);
Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo zkAuthInfo = new ZookeeperAuthInfo(conf);
CuratorFramework zkClient = Utils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo);
zkClient.start();
return zkClient;
}
}","public class main {
public static CuratorFramework createZKClient(Map conf, List<ACL> defaultAcls) {
List<String> zkServers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);
Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo zkAuthInfo = new ZookeeperAuthInfo(conf);
CuratorFramework zkClient = Utils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo, defaultAcls);
zkClient.start();
return zkClient;
}
}","- public static CuratorFramework createZKClient(Map conf) {+ public static CuratorFramework createZKClient(Map conf, List<ACL> defaultAcls) {- CuratorFramework zkClient = Utils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo);+ CuratorFramework zkClient = Utils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo, defaultAcls);",1
10590,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public void functionRequireExpectedPermission() throws Exception {
functionStringMap.entrySet().stream().forEach(entry -> {
Function function = entry.getKey();
String permission = entry.getValue();
gfsh.executeAndAssertThat(""execute function --region=testRegion --id="" + function.getId())
.tableHasRowCount(RESULT_HEADER, 1)
.tableHasColumnWithValuesContaining(RESULT_HEADER, permission).statusIsError();
});
}
}","public class main {
public void functionRequireExpectedPermission() throws Exception {
functionStringMap.entrySet().stream().forEach(entry -> {
Function function = entry.getKey();
String permission = entry.getValue();
gfsh.executeAndAssertThat(""execute function --region=testRegion --id="" + function.getId())
.tableHasRowCount(RESULT_HEADER, 1)
.tableHasRowWithValues(RESULT_HEADER, ""Exception: user not authorized for "" + permission)
.statusIsError();
});
}
}","- .tableHasColumnWithValuesContaining(RESULT_HEADER, permission).statusIsError();+ .tableHasRowWithValues(RESULT_HEADER, ""Exception: user not authorized for "" + permission)+ .statusIsError();",1
9089,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void testInvalidPermissionsForWaitUntilFlushedFunctionWithRegionParameter() {
Function thisFunction = waitUntilFlushedFunction;
ResourcePermission thisRequiredPermission = DATA_READ_REGION;
gfsh.executeAndAssertThat(
""execute function --region="" + regionName + "" --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisRequiredPermission.toString()).statusIsError();
}
}","public class main {
public void testInvalidPermissionsForWaitUntilFlushedFunctionWithRegionParameter() {
Function thisFunction = waitUntilFlushedFunction;
ResourcePermission thisRequiredPermission = DATA_READ_REGION;
gfsh.executeAndAssertThat(
""execute function --region="" + regionName + "" --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisRequiredPermission.toString()).statusIsError();
}
}","- FunctionService.registerFunction(luceneCreateIndexFunction);- FunctionService.registerFunction(luceneDescribeIndexFunction);- FunctionService.registerFunction(luceneDestroyIndexFunction);- FunctionService.registerFunction(luceneListIndexFunction);- FunctionService.registerFunction(luceneSearchIndexFunction);+ functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");+ functionStringMap.keySet().forEach(FunctionService::registerFunction);- FunctionService.registerFunction(dumpDirectoryFiles);+ FunctionService.registerFunction(new DumpDirectoryFiles());- FunctionService.registerFunction(luceneQueryFunction);- FunctionService.registerFunction(waitUntilFlushedFunction);- FunctionService.registerFunction(luceneGetPageFunction);",1
5330,b597f7a865a527a84ee3d6937075cfbb4470ed20,ProjectKB,"public class main {
public static AsciiString of(CharSequence name) {
if (name instanceof AsciiString) {
return of((AsciiString) name);
}
final String lowerCased = Ascii.toLowerCase(requireNonNull(name, ""name""));
final AsciiString cached = map.get(lowerCased);
return cached != null ? cached : AsciiString.cached(lowerCased);
}
}","public class main {
public static AsciiString of(CharSequence name) {
if (name instanceof AsciiString) {
return of((AsciiString) name);
}
final String lowerCased = Ascii.toLowerCase(requireNonNull(name, ""name""));
final AsciiString cached = map.get(lowerCased);
if (cached != null) {
return cached;
}
return validate(AsciiString.cached(lowerCased));
}
}",- return cached != null ? cached : AsciiString.cached(lowerCased);+ if (cached != null) {+ return cached;+ }+ return validate(AsciiString.cached(lowerCased));,1
8226,8b54b20fc488ae3e83f4a350a707dc0303ade23,ProjectKB,"public class main {
private static String getHostContextSuitableForServletContext(String ctx) {
if (ctx == null || """".equals(ctx)) ctx = ""/solr"";
if (ctx.endsWith(""/"")) ctx = ctx.substring(0,ctx.length()-1);
if (!ctx.startsWith(""/"")) ctx = ""/"" + ctx;
return ctx;
}
private Exception checkForExceptions(String message, Collection<Future<JettySolrRunner>> futures) throws InterruptedException {
Exception parsed = new Exception(message);
boolean ok = true;
for (Future<JettySolrRunner> future : futures) {
try {
future.get();
}
catch (ExecutionException e) {
parsed.addSuppressed(e.getCause());
ok = false;
}
catch (InterruptedException e) {
Thread.interrupted();
throw e;
}
}","public class main {
private static String getHostContextSuitableForServletContext(String ctx) {
if (ctx == null || """".equals(ctx)) ctx = ""/solr"";
if (ctx.endsWith(""/"")) ctx = ctx.substring(0,ctx.length()-1);
if (!ctx.startsWith(""/"")) ctx = ""/"" + ctx;
return ctx;
}
}","- }- private Exception checkForExceptions(String message, Collection<Future<JettySolrRunner>> futures) throws InterruptedException {- Exception parsed = new Exception(message);- boolean ok = true;- for (Future<JettySolrRunner> future : futures) {- try {- future.get();- }- catch (ExecutionException e) {- parsed.addSuppressed(e.getCause());- ok = false;- }- catch (InterruptedException e) {- Thread.interrupted();- throw e;",1
7069,8386d8f7260143802553bc6dbae2880d6c0bafda,ProjectKB,"public class main {
protected RouteBuilder createRouteBuilder() throws Exception {
return new RouteBuilder() {
public void configure() throws Exception {
from(""direct:in"").marshal().xstream().to(""mock:result"");
from(""direct:marshal"").marshal().xstream(""UTF-8"");
from(""direct:reverse"").unmarshal().xstream(""UTF-8"").to(""mock:reverse"");
}
};
}
}","public class main {
protected RouteBuilder createRouteBuilder() throws Exception {
return new RouteBuilder() {
public void configure() throws Exception {
from(""direct:in"").marshal().xstream(PurchaseOrder.class).to(""mock:result"");
from(""direct:marshal"").marshal().xstream(""UTF-8"", PurchaseOrder.class);
from(""direct:reverse"").unmarshal().xstream(""UTF-8"", PurchaseOrder.class).to(""mock:reverse"");
}
};
}
}","- from(""direct:in"").marshal().xstream().to(""mock:result"");+ from(""direct:in"").marshal().xstream(PurchaseOrder.class).to(""mock:result"");- from(""direct:marshal"").marshal().xstream(""UTF-8"");+ from(""direct:marshal"").marshal().xstream(""UTF-8"", PurchaseOrder.class);- from(""direct:reverse"").unmarshal().xstream(""UTF-8"").to(""mock:reverse"");+ from(""direct:reverse"").unmarshal().xstream(""UTF-8"", PurchaseOrder.class).to(""mock:reverse"");",1
4927,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.groups().group(group.getId()).roles().realmLevel().listAll();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.groups().group(group.getId()).roles().realmLevel().listAll();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
11122,823386ab117d231df15eab4cb4b7a98f8af546c,ProjectKB,"public class main {
public Object extract(String valueAsString, Event event) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
return PropertyUtils.getProperty(event, valueAsString);
}
}","public class main {
public Object extract(String valueAsString, Event event) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
return PropertyUtils.getProperty(event.getProfile(), ""properties."" + valueAsString);
}
}","- return PropertyUtils.getProperty(event, valueAsString);+ return PropertyUtils.getProperty(event.getProfile(), ""properties."" + valueAsString);",1
4981,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.identityProviders().findAll();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.identityProviders().findAll();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
9118,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void execute(FunctionContext<Object[]> context) {
Cache cache = context.getCache();
DistributedMember member = cache.getDistributedSystem().getDistributedMember();
try {
String[] functionArgs = null;
Object[] args = context.getArguments();
if (args == null) {
context.getResultSender().lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS));
return;
}
String functionId = ((String) args[0]);
String filterString = ((String) args[1]);
String resultCollectorName = ((String) args[2]);
String argumentsString = ((String) args[3]);
String onRegion = ((String) args[4]);
Properties credentials = (Properties) args[5];
SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
try {
securityService.login(credentials);
if (argumentsString != null && argumentsString.length() > 0) {
functionArgs = argumentsString.split("","");
}
Set<String> filters = new HashSet<>();
ResultCollector resultCollectorInstance = null;
if (resultCollectorName != null && resultCollectorName.length() > 0) {
resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
.forName(resultCollectorName).newInstance();
}
if (filterString != null && filterString.length() > 0) {
filters.add(filterString);
}
Function<?> function = FunctionService.getFunction(functionId);
if (function == null) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
(CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
functionId))));
return;
}
function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
Execution execution = null;
if (onRegion != null && onRegion.length() > 0) {
Region region = cache.getRegion(onRegion);
if (region == null) {
context.getResultSender().lastResult(
new CliFunctionResult(member.getId(), false, onRegion + "" does not exist""));
return;
}
execution = FunctionService.onRegion(region);
} else {
execution = FunctionService.onMember(member);
}
if (execution == null) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
functionId, member.getId(), onRegion,
CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR)));
return;
}
if (resultCollectorInstance != null) {
execution = execution.withCollector(resultCollectorInstance);
}
if (functionArgs != null && functionArgs.length > 0) {
execution = execution.setArguments(functionArgs);
}
if (filters.size() > 0) {
execution = execution.withFilter(filters);
}
List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
List<String> resultMessage = new ArrayList<>();
boolean functionSuccess = true;
if (results != null) {
for (Object resultObj : results) {
if (resultObj != null) {
if (resultObj instanceof Exception) {
resultMessage.add(((Exception) resultObj).getMessage());
functionSuccess = false;
} else {
resultMessage.add(resultObj.toString());
}
}
}
}
context.getResultSender().lastResult(
new CliFunctionResult(member.getId(), functionSuccess, resultMessage.toString()));
} catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
resultCollectorName, e.getMessage())));
} catch (Exception e) {
context.getResultSender().lastResult(
new CliFunctionResult(member.getId(), false, ""Exception: "" + e.getMessage()));
} finally {
securityService.logout();
}
} catch (Exception ex) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false, ex.getMessage()));
}
}
}","public class main {
public void execute(FunctionContext<Object[]> context) {
Cache cache = context.getCache();
DistributedMember member = cache.getDistributedSystem().getDistributedMember();
String[] functionArgs = null;
Object[] args = context.getArguments();
if (args == null) {
context.getResultSender().lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS));
return;
}
String functionId = ((String) args[0]);
String filterString = ((String) args[1]);
String resultCollectorName = ((String) args[2]);
String argumentsString = ((String) args[3]);
String onRegion = ((String) args[4]);
Properties credentials = (Properties) args[5];
SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
boolean loginNeeded = false;
try {
Subject subject = securityService.getSubject();
loginNeeded = subject == null || !subject.isAuthenticated();
} catch (AuthenticationRequiredException e) {
loginNeeded = true;
}
boolean loginSuccessful = false;
try {
if (loginNeeded) {
securityService.login(credentials);
loginSuccessful = true;
}
if (argumentsString != null && argumentsString.length() > 0) {
functionArgs = argumentsString.split("","");
}
Set<String> filters = new HashSet<>();
ResultCollector resultCollectorInstance = null;
if (resultCollectorName != null && resultCollectorName.length() > 0) {
resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
.forName(resultCollectorName).newInstance();
}
if (filterString != null && filterString.length() > 0) {
filters.add(filterString);
}
Function<?> function = FunctionService.getFunction(functionId);
if (function == null) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
(CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
functionId))));
return;
}
function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
Execution execution = null;
if (onRegion != null && onRegion.length() > 0) {
Region region = cache.getRegion(onRegion);
if (region == null) {
context.getResultSender().lastResult(
new CliFunctionResult(member.getId(), false, onRegion + "" does not exist""));
return;
}
execution = FunctionService.onRegion(region);
} else {
execution = FunctionService.onMember(member);
}
if (execution == null) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
functionId, member.getId(), onRegion,
CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR)));
return;
}
if (resultCollectorInstance != null) {
execution = execution.withCollector(resultCollectorInstance);
}
if (functionArgs != null && functionArgs.length > 0) {
execution = execution.setArguments(functionArgs);
}
if (filters.size() > 0) {
execution = execution.withFilter(filters);
}
List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
List<String> resultMessage = new ArrayList<>();
boolean functionSuccess = true;
if (results != null) {
for (Object resultObj : results) {
if (resultObj != null) {
if (resultObj instanceof Exception) {
resultMessage.add(((Exception) resultObj).getMessage());
functionSuccess = false;
} else {
resultMessage.add(resultObj.toString());
}
}
}
}
context.getResultSender().lastResult(
new CliFunctionResult(member.getId(), functionSuccess, resultMessage.toString()));
} catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false,
CliStrings.format(
CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
resultCollectorName, e.getMessage())));
} catch (Exception e) {
logger.error(""error executing function "" + functionId, e);
context.getResultSender()
.lastResult(new CliFunctionResult(member.getId(), false, ""Exception: "" + e.getMessage()));
} finally {
if (loginSuccessful) {
securityService.logout();
}
}
}
}","- try {+ boolean loginNeeded = false;+ Subject subject = securityService.getSubject();+ loginNeeded = subject == null || !subject.isAuthenticated();+ } catch (AuthenticationRequiredException e) {+ loginNeeded = true;+ }+ boolean loginSuccessful = false;+ try {+ if (loginNeeded) {+ loginSuccessful = true;+ }+ logger.error(""error executing function "" + functionId, e);- context.getResultSender().lastResult(+ context.getResultSender()- new CliFunctionResult(member.getId(), false, ""Exception: "" + e.getMessage()));+ .lastResult(new CliFunctionResult(member.getId(), false, ""Exception: "" + e.getMessage()));+ if (loginSuccessful) {- } catch (Exception ex) {- context.getResultSender()- .lastResult(new CliFunctionResult(member.getId(), false, ex.getMessage()));",1
4790,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().get(foo.getId()).toRepresentation();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().get(foo.getId()).toRepresentation();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
932,e9db95831b9db69fbc0bef499b0d3f41bc6448f,ProjectKB,"public class main {
public CloudSolrClient getSolrClient() {
return solrClient;
}
public SolrZkClient getZkClient() {
return solrClient.getZkStateReader().getZkClient();
}
protected CloudSolrClient buildSolrClient() {
return new Builder(Collections.singletonList(getZkServer().getZkAddress()), Optional.empty())
.withSocketTimeout(90000).withConnectionTimeout(15000).build();   }
}","public class main {
public CloudSolrClient getSolrClient() {
return solrClient;
}
}","+ }- }- public SolrZkClient getZkClient() {- return solrClient.getZkStateReader().getZkClient();- }- protected CloudSolrClient buildSolrClient() {- return new Builder(Collections.singletonList(getZkServer().getZkAddress()), Optional.empty())- .withSocketTimeout(90000).withConnectionTimeout(15000).build();   }",1
595,8a06bd1ccef382461c7b0a63f2012f4aeac9075,ProjectKB,"public class main {
public void receiveConnection(Socket sock) {
Long sid = null;
try {
DataInputStream din = new DataInputStream(sock.getInputStream());
sid = din.readLong();
if (sid < 0) {                 sid = din.readLong();
int num_remaining_bytes = din.readInt();
if (num_remaining_bytes < 0 || num_remaining_bytes > maxBuffer) {
LOG.error(""Unreasonable buffer length: {}"", num_remaining_bytes);
closeSocket(sock);
return;
}
byte[] b = new byte[num_remaining_bytes];
int num_read = din.read(b);
if (num_read != num_remaining_bytes) {
LOG.error(""Read only "" + num_read + "" bytes out of "" + num_remaining_bytes + "" sent by server "" + sid);
}
}
if (sid == QuorumPeer.OBSERVER_ID) {
sid = observerCounter--;
LOG.info(""Setting arbitrary identifier to observer: "" + sid);
}
} catch (IOException e) {
closeSocket(sock);
LOG.warn(""Exception reading or writing challenge: "" + e.toString());
return;
}
if (sid < self.getId()) {
SendWorker sw = senderWorkerMap.get(sid);
if (sw != null) {
sw.finish();
}
LOG.debug(""Create new connection to server: "" + sid);
closeSocket(sock);
connectOne(sid);
} else {
SendWorker sw = new SendWorker(sock, sid);
RecvWorker rw = new RecvWorker(sock, sid, sw);
sw.setRecv(rw);
SendWorker vsw = senderWorkerMap.get(sid);
if(vsw != null)
vsw.finish();
senderWorkerMap.put(sid, sw);
if (!queueSendMap.containsKey(sid)) {
queueSendMap.put(sid, new ArrayBlockingQueue<ByteBuffer>(
SEND_CAPACITY));
}
sw.start();
rw.start();
return;
}
}","public class main {
public void receiveConnection(final Socket sock) {
DataInputStream din = null;
try {
din = new DataInputStream(
new BufferedInputStream(sock.getInputStream()));
handleConnection(sock, din);
} catch (IOException e) {
LOG.error(""Exception handling connection, addr: {}, closing server connection"",
sock.getRemoteSocketAddress());
closeSocket(sock);
}
}","- public void receiveConnection(Socket sock) {+ public void receiveConnection(final Socket sock) {- Long sid = null;+ DataInputStream din = null;- DataInputStream din = new DataInputStream(sock.getInputStream());- sid = din.readLong();- if (sid < 0) {                 sid = din.readLong();- int num_remaining_bytes = din.readInt();- if (num_remaining_bytes < 0 || num_remaining_bytes > maxBuffer) {- LOG.error(""Unreasonable buffer length: {}"", num_remaining_bytes);+ din = new DataInputStream(+ new BufferedInputStream(sock.getInputStream()));+ handleConnection(sock, din);+ } catch (IOException e) {+ LOG.error(""Exception handling connection, addr: {}, closing server connection"",+ sock.getRemoteSocketAddress());- return;- }- byte[] b = new byte[num_remaining_bytes];- int num_read = din.read(b);- if (num_read != num_remaining_bytes) {- LOG.error(""Read only "" + num_read + "" bytes out of "" + num_remaining_bytes + "" sent by server "" + sid);- }- }- if (sid == QuorumPeer.OBSERVER_ID) {- sid = observerCounter--;- LOG.info(""Setting arbitrary identifier to observer: "" + sid);- }- } catch (IOException e) {- closeSocket(sock);- LOG.warn(""Exception reading or writing challenge: "" + e.toString());- return;- }- if (sid < self.getId()) {- SendWorker sw = senderWorkerMap.get(sid);- if (sw != null) {- sw.finish();- }- LOG.debug(""Create new connection to server: "" + sid);- closeSocket(sock);- connectOne(sid);- } else {- SendWorker sw = new SendWorker(sock, sid);- RecvWorker rw = new RecvWorker(sock, sid, sw);- sw.setRecv(rw);- SendWorker vsw = senderWorkerMap.get(sid);- if(vsw != null)- vsw.finish();- senderWorkerMap.put(sid, sw);- if (!queueSendMap.containsKey(sid)) {- queueSendMap.put(sid, new ArrayBlockingQueue<ByteBuffer>(- SEND_CAPACITY));- }- sw.start();- rw.start();- return;",1
9517,8a599448781acd481aa9dab1b0bde3424e00ced,ProjectKB,"public class main {
private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {
if (redirectUri == null) {
return false;
}
try {
URL url = new URL(redirectUri);
return request.getServerName().equals(url.getHost());
} catch (MalformedURLException e) {
return false;
}
}
}","public class main {
private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {
if (redirectUri == null) {
return false;
}
try {
URL url = new URL(redirectUri);
return request.getServerName().equals(url.getHost());
} catch (MalformedURLException e) {
return false;
}
}
}","- } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {+ } else if (UaaUrlUtils.uriHasMatchingHost(redirectFormParam, request.getServerName())) {",1
11320,7de5c8dcd7e2f59f4f5a0c6c9b92cc9e785f9eac,ProjectKB,"public class main {
private DecimalUtils() {
throw new RuntimeException(""DecimalUtils cannot be instantiated."");
}
}","public class main {
private DecimalUtils() {
throw new RuntimeException(""DecimalUtils cannot be instantiated."");
}
}","+ if (object instanceof DestinationFacade) {+ if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {+ throw new UnsupportedOperationException(""Unsupported method "" + request.getMethod() + "" for path "" + request.getRequestURI());+ }+ if (!request.getSession().getAttribute(""secret"").equals(request.getParameter(""secret""))) {+ throw new UnsupportedOperationException(""Possible CSRF attack"");+ }+ }",1
13100,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_MANAGE_GATEWAY);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_MANAGE_GATEWAY);
}
}","- functionStringMap.put(new AlterConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new AlterConnectionFunction(), ""*"");- functionStringMap.put(new AlterMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new AlterMappingFunction(), ""*"");- functionStringMap.put(new CreateConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new CreateConnectionFunction(), ""*"");- functionStringMap.put(new CreateMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new CreateMappingFunction(), ""*"");- functionStringMap.put(new DescribeConnectionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeConnectionFunction(), ""*"");- functionStringMap.put(new DescribeMappingFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeMappingFunction(), ""*"");- functionStringMap.put(new DestroyConnectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyConnectionFunction(), ""*"");- functionStringMap.put(new DestroyMappingFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyMappingFunction(), ""*"");- functionStringMap.put(new ListConnectionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListConnectionFunction(), ""*"");- functionStringMap.put(new ListMappingFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListMappingFunction(), ""*"");- functionStringMap.put(new InheritsDefaultPermissionsJDBCFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new InheritsDefaultPermissionsJDBCFunction(), ""*"");",1
17413,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
public ClientMarshallerContext(@Nullable List<PluginProvider> plugins) {
super(plugins);
}
}","public class main {
public ClientMarshallerContext(@Nullable List<PluginProvider> plugins) {
super(plugins, null);
}
}","- super(plugins);+ super(plugins, null);",1
7572,a54f3fb8225ef7d5021ca7d4fb52bef1e884568e,ProjectKB,"public class main {
public void checkTokenKeyValuesAnonymous() throws Exception {
MvcResult result = getMockMvc().perform(
get(""/token_key"")
.accept(MediaType.APPLICATION_JSON))
.andDo(print())
.andExpect(status().isOk())
.andReturn();
Map<String, Object> key = JsonUtils.readValue(result.getResponse().getContentAsString(), Map.class);
validateKey(key);
}
}","public class main {
public void checkTokenKeyValuesAnonymous() throws Exception {
MvcResult result = getMockMvc().perform(
get(""/token_key"")
.accept(MediaType.APPLICATION_JSON))
.andExpect(status().isOk())
.andReturn();
Map<String, Object> key = JsonUtils.readValue(result.getResponse().getContentAsString(), Map.class);
validateKey(key);
}
}",- .andDo(print()),1
13471,96cedb87b94c07c11152580bf36978186d622b5,ProjectKB,"public class main {
public static String getName(int n) {
return NAME_MAP.get(n);
}
}","public class main {
public static String getName(int n) {
return NAME_MAP.get(n);
}
}",- ObjectInputStream in = new ObjectInputStream(socket.getInputStream());+ FilteredObjectInputStream in = new FilteredObjectInputStream(socket.getInputStream());,1
5972,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public boolean track(byte[] key, short status, List<String> whitelist) {
int segment = HotRodConstants.hasCompatibility(status) ?
segmentConsistentHash.getSegment(MarshallerUtil.bytes2obj(marshaller, key, status, whitelist)) :
segmentConsistentHash.getSegment(key);
Set<WrappedByteArray> keys = keysPerSegment.get(segment);
assert keys != null : ""Segment "" + segment + "" not initialized, tracking key "" + Util.toStr(key);
boolean result = keys.add(new WrappedByteArray(key));
if (trace)
log.trackingSegmentKey(Util.printArray(key), segment, !result);
return result;
}
}","public class main {
public boolean track(byte[] key, short status, List<String> whitelist) {
int segment = HotRodConstants.hasCompatibility(status) ?
segmentConsistentHash.getSegment(dataFormat.keyToObj(key, status, whitelist)) :
segmentConsistentHash.getSegment(key);
Set<WrappedByteArray> keys = keysPerSegment.get(segment);
assert keys != null : ""Segment "" + segment + "" not initialized, tracking key "" + Util.toStr(key);
boolean result = keys.add(new WrappedByteArray(key));
if (trace)
log.trackingSegmentKey(Util.printArray(key), segment, !result);
return result;
}
}","- segmentConsistentHash.getSegment(MarshallerUtil.bytes2obj(marshaller, key, status, whitelist)) :+ segmentConsistentHash.getSegment(dataFormat.keyToObj(key, status, whitelist)) :",1
3800,b954402272ddcfbb45dc1495520f920e70cc041c,ProjectKB,"public class main {
public String getConnectorPort() {
return connectorPort;
}
}","public class main {
public String getConnectorPort() {
return connectorPort;
}
}","- public boolean isValid(final AnyType object, final ConstraintValidatorContext context) {+ public boolean isValid(final AnyType anyType, final ConstraintValidatorContext context) {- boolean isValid;+ boolean isValid = true;+ if (isHtml(anyType.getKey())) {+ context.buildConstraintViolationWithTemplate(+ getTemplate(EntityViolationType.InvalidKey, ""Invalid key"")).+ addPropertyNode(""key"").addConstraintViolation();+ isValid = false;+ }+ boolean nameKindMatch;- switch (object.getKind()) {+ switch (anyType.getKind()) {- isValid = AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey());+ nameKindMatch = AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey());- isValid = AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());+ nameKindMatch = AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey());- isValid = !AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey())+ nameKindMatch = !AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey())- && !AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey())+ && !AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey())- && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(object.getKey());+ && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(anyType.getKey());- if (!isValid) {+ if (!nameKindMatch) {- return isValid;+ return isValid && nameKindMatch;",1
517,8a06bd1ccef382461c7b0a63f2012f4aeac9075,ProjectKB,"public class main {
private long getRefreshTime(KerberosTicket tgt) {
long start = tgt.getStartTime().getTime();
long expires = tgt.getEndTime().getTime();
LOG.info(""TGT valid starting at:        "" + tgt.getStartTime().toString());
LOG.info(""TGT expires:                  "" + tgt.getEndTime().toString());
long proposedRefresh = start + (long) ((expires - start) *
(TICKET_RENEW_WINDOW + (TICKET_RENEW_JITTER * rng.nextDouble())));
if (proposedRefresh > expires) {
return System.currentTimeMillis();
}
else {
return proposedRefresh;
}
}
}","public class main {
private long getRefreshTime(KerberosTicket tgt) {
long start = tgt.getStartTime().getTime();
long expires = tgt.getEndTime().getTime();
LOG.info(""TGT valid starting at:        "" + tgt.getStartTime().toString());
LOG.info(""TGT expires:                  "" + tgt.getEndTime().toString());
long proposedRefresh = start + (long) ((expires - start) *
(TICKET_RENEW_WINDOW + (TICKET_RENEW_JITTER * rng.nextDouble())));
if (proposedRefresh > expires) {
return System.currentTimeMillis();
}
else {
return proposedRefresh;
}
}
}","+ LOG.info(""{}- LOG.info(""successfully logged in."");- return loginContext;- }",1
9749,38a882331035ffed205d15a5c92b471fd09659c,ProjectKB,"public class main {
public ForkChannel send(Message msg) throws Exception {
checkClosedOrNotConnected();
FORK.ForkHeader hdr=(FORK.ForkHeader)msg.getHeader(FORK.ID);
if(hdr != null)
hdr.setForkChannelId(fork_channel_id);
else {
hdr=new FORK.ForkHeader(null, fork_channel_id);
msg.putHeader(FORK.ID, hdr);
}
prot_stack.down(new Event(Event.MSG, msg));
return this;
}
}","public class main {
public ForkChannel send(Message msg) throws Exception {
checkClosedOrNotConnected();
FORK.ForkHeader hdr=msg.getHeader(FORK.ID);
if(hdr != null)
hdr.setForkChannelId(fork_channel_id);
else {
hdr=new FORK.ForkHeader(null, fork_channel_id);
msg.putHeader(FORK.ID, hdr);
}
prot_stack.down(new Event(Event.MSG, msg));
return this;
}
}",- FORK.ForkHeader hdr=(FORK.ForkHeader)msg.getHeader(FORK.ID);+ FORK.ForkHeader hdr=msg.getHeader(FORK.ID);,1
15645,d1baf6ba593561f39e2da0a71a8440797005b55,ProjectKB,"public class main {
private static Document loadConfigFile(SolrResourceLoader resourceLoader, String parseContextConfigLoc) throws Exception {
try (InputStream in = resourceLoader.openResource(parseContextConfigLoc)) {
return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in, parseContextConfigLoc);
}
}
}","public class main {
private static Document loadConfigFile(SolrResourceLoader resourceLoader, String parseContextConfigLoc) throws Exception {
return SafeXMLParsing.parseConfigXML(log, resourceLoader, parseContextConfigLoc);
}
}","+ return SafeXMLParsing.parseConfigXML(log, resourceLoader, parseContextConfigLoc);- try (InputStream in = resourceLoader.openResource(parseContextConfigLoc)) {- return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in, parseContextConfigLoc);- }",1
4923,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.groups().group(group.getId()).update(group);
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.groups().group(group.getId()).update(group);+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
4770,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.logoutAll();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.logoutAll();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
19710,735ee02c693964b5f700af13a2adfeae56b848a4,ProjectKB,"public class main {
public DefaultHttpBinding(HttpCommonEndpoint endpoint) {
this.headerFilterStrategy = endpoint.getHeaderFilterStrategy();
this.transferException = endpoint.isTransferException();
this.allowJavaSerializedObject = endpoint.getComponent().isAllowJavaSerializedObject();
}
}","public class main {
public DefaultHttpBinding(HttpCommonEndpoint endpoint) {
this.headerFilterStrategy = endpoint.getHeaderFilterStrategy();
this.transferException = endpoint.isTransferException();
if (endpoint.getComponent() != null) {
this.allowJavaSerializedObject = endpoint.getComponent().isAllowJavaSerializedObject();
}
}
}",+ if (endpoint.getComponent() != null) {+ },1
11609,060ecc,ProjectKB,"public class main {
public void testSingle() throws IOException {
Set<String> expected = new HashSet<>();
expected.add(""host"");
doTestVary(""Host"", expected);
}
}","public class main {
public void testSingle() throws IOException {
Set<String> expected = new HashSet<>();
expected.add(""host"");
doTestVary(""Host"", expected, true);
}
}","- doTestVary(""Host"", expected);+ doTestVary(""Host"", expected, true);",1
9077,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void testInvalidPermissionsForLuceneDescribeIndexFunction() {
Function thisFunction = luceneDescribeIndexFunction;
ResourcePermission thisRequiredPermission = CLUSTER_READ_LUCENE;
gfsh.executeAndAssertThat(""execute function --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisRequiredPermission.toString()).statusIsError();
}
}","public class main {
public void testInvalidPermissionsForLuceneDescribeIndexFunction() {
Function thisFunction = luceneDescribeIndexFunction;
ResourcePermission thisRequiredPermission = CLUSTER_READ_LUCENE;
gfsh.executeAndAssertThat(""execute function --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisRequiredPermission.toString()).statusIsError();
}
}","- FunctionService.registerFunction(luceneCreateIndexFunction);- FunctionService.registerFunction(luceneDescribeIndexFunction);- FunctionService.registerFunction(luceneDestroyIndexFunction);- FunctionService.registerFunction(luceneListIndexFunction);- FunctionService.registerFunction(luceneSearchIndexFunction);+ functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");+ functionStringMap.keySet().forEach(FunctionService::registerFunction);- FunctionService.registerFunction(dumpDirectoryFiles);+ FunctionService.registerFunction(new DumpDirectoryFiles());- FunctionService.registerFunction(luceneQueryFunction);- FunctionService.registerFunction(waitUntilFlushedFunction);- FunctionService.registerFunction(luceneGetPageFunction);",1
13467,4cba3b5a350f4d477466fc73b32cbd653eee840,ProjectKB,"public class main {
public void run() {
try {
ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
while (!closed) {
Message msg = (Message) in.readObject();
handle(msg);
}
} catch (EOFException eof) {
try {
close();
} catch (Exception unused) {
}
} catch (Exception e) {
if (!closed) {
LOG.log(Level.WARNING, ""Error in inbound message handling."", e);
try {
close();
} catch (Exception unused) {
}
}
}
}
}","public class main {
public void run() {
try {
FilteredObjectInputStream in = new FilteredObjectInputStream(socket.getInputStream());
while (!closed) {
Message msg = (Message) in.readObject();
handle(msg);
}
} catch (EOFException eof) {
try {
close();
} catch (Exception unused) {
}
} catch (Exception e) {
if (!closed) {
LOG.log(Level.WARNING, ""Error in inbound message handling."", e);
try {
close();
} catch (Exception unused) {
}
}
}
}
}",- ObjectInputStream in = new ObjectInputStream(socket.getInputStream());+ FilteredObjectInputStream in = new FilteredObjectInputStream(socket.getInputStream());,1
14955,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
public void close() throws IOException {
os.close();
}
}","public class main {
public void close() throws IOException {
is.close();
}
}",- os.close();+ is.close();,1
15446,ff2228fdaf131d57b5c8c5918ee8d07c6dd9bba,ProjectKB,"public class main {
protected SimpleBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel) {
SimpleBrokerMessageHandler handler = new SimpleBrokerMessageHandler(getClientInboundChannel(),
getClientOutboundChannel(), brokerChannel, getDestinationPrefixes());
if (this.taskScheduler != null) {
handler.setTaskScheduler(this.taskScheduler);
}
if (this.heartbeat != null) {
handler.setHeartbeatValue(this.heartbeat);
}
return handler;
}
}","public class main {
protected SimpleBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel) {
SimpleBrokerMessageHandler handler = new SimpleBrokerMessageHandler(getClientInboundChannel(),
getClientOutboundChannel(), brokerChannel, getDestinationPrefixes());
if (this.taskScheduler != null) {
handler.setTaskScheduler(this.taskScheduler);
}
if (this.heartbeat != null) {
handler.setHeartbeatValue(this.heartbeat);
}
handler.setSelectorHeaderName(this.selectorHeaderName);
return handler;
}
}",+ handler.setSelectorHeaderName(this.selectorHeaderName);,1
325,515c822148d52de9e7cdf4f6b01f7b793f2f273f,ProjectKB,"public class main {
protected boolean isText(String contentType) {
if (contentType != null) {
String temp = contentType.toLowerCase();
if (temp.contains(""text"") || temp.contains(""html"")) {
return true;
}
}
return false;
}
protected int copyStream(InputStream is, OutputStream os, int bufferSize) throws IOException {
try {
return IOHelper.copy(is, os, bufferSize, true);
} finally {
IOHelper.close(os, is);
}
}
protected void doWriteDirectResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException {
String contentType = message.getHeader(Exchange.CONTENT_TYPE, String.class);
if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {
try {
Object object = message.getMandatoryBody(Serializable.class);
HttpHelper.writeObjectToServletResponse(response, object);
return;
} catch (InvalidPayloadException e) {
throw new IOException(e);
}
}
}","public class main {
protected boolean isText(String contentType) {
if (contentType != null) {
String temp = contentType.toLowerCase();
if (temp.contains(""text"") || temp.contains(""html"")) {
return true;
}
}","- }- }- return false;- }- protected int copyStream(InputStream is, OutputStream os, int bufferSize) throws IOException {- try {- return IOHelper.copy(is, os, bufferSize, true);- } finally {- IOHelper.close(os, is);- }- }- protected void doWriteDirectResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException {- String contentType = message.getHeader(Exchange.CONTENT_TYPE, String.class);- if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {- try {- Object object = message.getMandatoryBody(Serializable.class);- HttpHelper.writeObjectToServletResponse(response, object);- return;- } catch (InvalidPayloadException e) {- throw new IOException(e);- }",1
505,8a06bd1ccef382461c7b0a63f2012f4aeac9075,ProjectKB,"public class main {
public void testLookingDiffRounds() {
MockFLE fle = new MockFLE(peer, new QuorumCnxManager(peer));
HashMap<Long, Vote> votes = new HashMap<Long, Vote>();
votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));
votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));
votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));
votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));
Assert.assertFalse(fle.termPredicate(votes,
new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)));
}
}","public class main {
public void testLookingDiffRounds() {
MockFLE fle = new MockFLE(peer, peer.createCnxnManager());
HashMap<Long, Vote> votes = new HashMap<Long, Vote>();
votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));
votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));
votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));
votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));
Assert.assertFalse(fle.termPredicate(votes,
new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)));
}
}","- MockFLE fle = new MockFLE(peer, new QuorumCnxManager(peer));+ MockFLE fle = new MockFLE(peer, peer.createCnxnManager());",1
13970,75411ab34a3d53c43c2d508b12314a9788aa417,ProjectKB,"public class main {
public void testSocketTimeout() throws Exception {
QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 2000, 2, 2);
QuorumCnxManager cnxManager = new QuorumCnxManager(peer);
QuorumCnxManager.Listener listener = cnxManager.listener;
if(listener != null){
listener.start();
} else {
LOG.error(""Null listener when initializing cnx manager"");
}
int port = peers.get(peer.getId()).electionAddr.getPort();
LOG.info(""Election port: "" + port);
Thread.sleep(1000);
Socket sock = new Socket();
sock.connect(peers.get(1L).electionAddr, 5000);
long begin = Time.currentElapsedTime();
cnxManager.receiveConnection(sock);
long end = Time.currentElapsedTime();
if((end - begin) > ((peer.getSyncLimit() * peer.getTickTime()) + 500)) Assert.fail(""Waited more than necessary"");
cnxManager.halt();
Assert.assertFalse(cnxManager.listener.isAlive());
}
}","public class main {
public void testSocketTimeout() throws Exception {
QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 2000, 2, 2);
QuorumCnxManager cnxManager = peer.createCnxnManager();
QuorumCnxManager.Listener listener = cnxManager.listener;
if(listener != null){
listener.start();
} else {
LOG.error(""Null listener when initializing cnx manager"");
}
int port = peers.get(peer.getId()).electionAddr.getPort();
LOG.info(""Election port: "" + port);
Thread.sleep(1000);
Socket sock = new Socket();
sock.connect(peers.get(1L).electionAddr, 5000);
long begin = Time.currentElapsedTime();
cnxManager.receiveConnection(sock);
long end = Time.currentElapsedTime();
if((end - begin) > ((peer.getSyncLimit() * peer.getTickTime()) + 500)) Assert.fail(""Waited more than necessary"");
cnxManager.halt();
Assert.assertFalse(cnxManager.listener.isAlive());
}
}",- QuorumCnxManager cnxManager = new QuorumCnxManager(peer);+ QuorumCnxManager cnxManager = peer.createCnxnManager();,1
6363,adb1e6d19c681f394c9513799b81b527b0cb007,ProjectKB,"public class main {
protected void verifyAuthorizationPage(String page) {
assertTrue(page.contains(""action='/oauth/authorize'""));
assertTrue(page.contains(""<input name='user_oauth_approval'""));
assertFalse(page.contains(""type='radio"")); 	}
}","public class main {
protected void verifyAuthorizationPage(String page) {
assertTrue(page.contains(""action=\""/oauth/authorize\""""));
assertTrue(page.contains(""<input name=\""user_oauth_approval\""""));
assertFalse(page.contains(""type=\""radio"")); 	}
}","- assertTrue(page.contains(""action='/oauth/authorize'""));+ assertTrue(page.contains(""action=\""/oauth/authorize\""""));- assertTrue(page.contains(""<input name='user_oauth_approval'""));+ assertTrue(page.contains(""<input name=\""user_oauth_approval\""""));- assertFalse(page.contains(""type='radio"")); 	}+ assertFalse(page.contains(""type=\""radio"")); 	}",1
18271,95846b173d83c2eb42db75dae3e7d5e13a633946,ProjectKB,"public class main {
public ClientDataSink createSink() {
try {
return new ClientDataSinkImpl(urlEncoder);
}
catch (IOException ex) {
throw new RuntimeException(ex);
}
}
}","public class main {
public ClientDataSink createSink() {
try {
return new ClientDataSinkImpl(urlEncoder, hmacKey);
} catch (IOException ex) {
throw new RuntimeException(ex);
}
}
}","- return new ClientDataSinkImpl(urlEncoder);+ return new ClientDataSinkImpl(urlEncoder, hmacKey);- }- catch (IOException ex) {+ } catch (IOException ex) {",1
7585,a54f3fb8225ef7d5021ca7d4fb52bef1e884568e,ProjectKB,"public class main {
public void changePassword_Resets_All_Sessions() throws Exception {
ScimUser user = createUser();
MockHttpSession session = new MockHttpSession();
MockHttpSession afterLoginSessionA = (MockHttpSession) getMockMvc().perform(post(""/login.do"")
.session(session)
.accept(TEXT_HTML_VALUE)
.param(""username"", user.getUserName())
.param(""password"", ""secr3T""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/""))
.andReturn().getRequest().getSession(false);
session = new MockHttpSession();
MockHttpSession afterLoginSessionB = (MockHttpSession) getMockMvc().perform(post(""/login.do"")
.session(session)
.accept(TEXT_HTML_VALUE)
.param(""username"", user.getUserName())
.param(""password"", ""secr3T""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/""))
.andReturn().getRequest().getSession(false);
assertNotNull(afterLoginSessionA.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
assertNotNull(afterLoginSessionB.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
getMockMvc().perform(get(""/profile"").session(afterLoginSessionB))
.andExpect(status().isOk());
Thread.sleep(1000 - (System.currentTimeMillis() % 1000) + 1);
MockHttpSession afterPasswordChange = (MockHttpSession) getMockMvc().perform(post(""/change_password.do"")
.session(afterLoginSessionA)
.with(csrf())
.accept(TEXT_HTML_VALUE)
.param(""current_password"", ""secr3T"")
.param(""new_password"", ""secr3T1"")
.param(""confirm_password"", ""secr3T1""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""profile""))
.andReturn().getRequest().getSession(false);
assertTrue(afterLoginSessionA.isInvalid());
assertNotNull(afterPasswordChange);
assertNotNull(afterPasswordChange.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
assertNotSame(afterLoginSessionA, afterPasswordChange);
getMockMvc().perform(
get(""/profile"")
.session(afterLoginSessionB)
.accept(TEXT_HTML))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/login""));
}
}","public class main {
public void changePassword_Resets_All_Sessions() throws Exception {
ScimUser user = createUser();
MockHttpSession session = new MockHttpSession();
MockHttpSession afterLoginSessionA = (MockHttpSession) getMockMvc().perform(post(""/login.do"")
.with(cookieCsrf())
.session(session)
.accept(TEXT_HTML_VALUE)
.param(""username"", user.getUserName())
.param(""password"", ""secr3T""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/""))
.andReturn().getRequest().getSession(false);
session = new MockHttpSession();
MockHttpSession afterLoginSessionB = (MockHttpSession) getMockMvc().perform(post(""/login.do"")
.with(cookieCsrf())
.session(session)
.accept(TEXT_HTML_VALUE)
.param(""username"", user.getUserName())
.param(""password"", ""secr3T""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/""))
.andReturn().getRequest().getSession(false);
assertNotNull(afterLoginSessionA.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
assertNotNull(afterLoginSessionB.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
getMockMvc().perform(get(""/profile"").session(afterLoginSessionB))
.andExpect(status().isOk());
Thread.sleep(1000 - (System.currentTimeMillis() % 1000) + 1);
MockHttpSession afterPasswordChange = (MockHttpSession) getMockMvc().perform(post(""/change_password.do"")
.session(afterLoginSessionA)
.with(csrf())
.accept(TEXT_HTML_VALUE)
.param(""current_password"", ""secr3T"")
.param(""new_password"", ""secr3T1"")
.param(""confirm_password"", ""secr3T1""))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""profile""))
.andReturn().getRequest().getSession(false);
assertTrue(afterLoginSessionA.isInvalid());
assertNotNull(afterPasswordChange);
assertNotNull(afterPasswordChange.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));
assertNotSame(afterLoginSessionA, afterPasswordChange);
getMockMvc().perform(
get(""/profile"")
.session(afterLoginSessionB)
.accept(TEXT_HTML))
.andExpect(status().isFound())
.andExpect(redirectedUrl(""/login""));
}
}",+ .with(cookieCsrf())+ .with(cookieCsrf()),1
13850,75411ab34a3d53c43c2d508b12314a9788aa417,ProjectKB,"public class main {
protected QuorumPeer getQuorumPeer() {
return new QuorumPeer();
}
}","public class main {
protected QuorumPeer getQuorumPeer() throws SaslException {
return new QuorumPeer();
}
}",- protected QuorumPeer getQuorumPeer() {+ protected QuorumPeer getQuorumPeer() throws SaslException {,1
10037,bc7d01048579430b4b2df668178809b63d3f1929,ProjectKB,"public class main {
public static boolean isPreFlightRequest(ServerHttpRequest request) {
return (request.getMethod() == HttpMethod.OPTIONS && request.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));
}
}","public class main {
public static boolean isPreFlightRequest(ServerHttpRequest request) {
HttpHeaders headers = request.getHeaders();
return (request.getMethod() == HttpMethod.OPTIONS
&& headers.containsKey(HttpHeaders.ORIGIN)
&& headers.containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));
}
}",- return (request.getMethod() == HttpMethod.OPTIONS && request.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));+ HttpHeaders headers = request.getHeaders();+ return (request.getMethod() == HttpMethod.OPTIONS+ && headers.containsKey(HttpHeaders.ORIGIN)+ && headers.containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));,1
12894,13433cd7dd06267fc261f0b1d4764f8e3432c824,ProjectKB,"public class main {
public AuthorizationCodeRequestUrl newAuthorizationUrl() {
return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(
scopes);
}
}","public class main {
public AuthorizationCodeRequestUrl newAuthorizationUrl() {
AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);
url.setScopes(scopes);
if (pkce != null) {
url.setCodeChallenge(pkce.getChallenge());
url.setCodeChallengeMethod(pkce.getChallengeMethod());
}
return url;
}
}","- return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(+ AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);- scopes);+ url.setScopes(scopes);+ if (pkce != null) {+ url.setCodeChallenge(pkce.getChallenge());+ url.setCodeChallengeMethod(pkce.getChallengeMethod());+ }+ return url;",1
5031,3f68cd633f03370d33c2603a6496e81273782601,ProjectKB,"public class main {
protected boolean isInvalidPath(String path) {
return (path.contains(""WEB-INF"") || path.contains(""META-INF"") || StringUtils.cleanPath(path).startsWith(""..""));
}
}","public class main {
protected boolean isInvalidPath(String path) {
if (logger.isTraceEnabled()) {
logger.trace(""Applying \""invalid path\"" checks to path: "" + path);
}
if (path.contains(""WEB-INF"") || path.contains(""META-INF"")) {
if (logger.isTraceEnabled()) {
logger.trace(""Path contains \""WEB-INF\"" or \""META-INF\""."");
}
return true;
}
if (path.contains("":/"")) {
String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);
if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(""url:"")) {
if (logger.isTraceEnabled()) {
logger.trace(""Path represents URL or has \""url:\"" prefix."");
}
return true;
}
}
if (path.contains(""../"")) {
path = StringUtils.cleanPath(path);
if (path.contains(""../"")) {
if (logger.isTraceEnabled()) {
logger.trace(""Path contains \""../\"" after call to StringUtils#cleanPath."");
}
return true;
}
}
return false;
}
}","- return (path.contains(""WEB-INF"") || path.contains(""META-INF"") || StringUtils.cleanPath(path).startsWith(""..""));+ if (logger.isTraceEnabled()) {+ logger.trace(""Applying \""invalid path\"" checks to path: "" + path);+ }+ if (path.contains(""WEB-INF"") || path.contains(""META-INF"")) {+ if (logger.isTraceEnabled()) {+ logger.trace(""Path contains \""WEB-INF\"" or \""META-INF\""."");+ }+ return true;+ }+ if (path.contains("":/"")) {+ String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);+ if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(""url:"")) {+ if (logger.isTraceEnabled()) {+ logger.trace(""Path represents URL or has \""url:\"" prefix."");+ }+ return true;+ }+ }+ if (path.contains(""../"")) {+ path = StringUtils.cleanPath(path);+ if (path.contains(""../"")) {+ if (logger.isTraceEnabled()) {+ logger.trace(""Path contains \""../\"" after call to StringUtils#cleanPath."");+ }+ return true;+ }+ }+ return false;",1
4760,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.getGroupByPath(""sample"");
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.getGroupByPath(""sample"");+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
14337,59a0cbb98cef10ddf62d294670aa2e4eb9f8cf8c,ProjectKB,"public class main {
public void testUnsupportedVersionInProduceRequest() throws Exception {
final long producerId = 343434L;
TransactionManager transactionManager = new TransactionManager();
setupWithTransactionState(transactionManager);
client.setNode(new Node(1, ""localhost"", 33343));
prepareAndReceiveInitProducerId(producerId, Errors.NONE);
assertTrue(transactionManager.hasProducerId());
Future<RecordMetadata> future = accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(),
null, null, MAX_BLOCK_TIMEOUT).future;
client.prepareUnsupportedVersionResponse(new MockClient.RequestMatcher() {
@Override
public boolean matches(AbstractRequest body) {
return body instanceof ProduceRequest && ((ProduceRequest) body).isIdempotent();
}
});
sender.run(time.milliseconds());
assertFutureFailure(future, UnsupportedVersionException.class);
assertTrue(transactionManager.hasFatalError());
assertSendFailure(UnsupportedVersionException.class);
}
}","public class main {
public void testUnsupportedVersionInProduceRequest() throws Exception {
final long producerId = 343434L;
TransactionManager transactionManager = new TransactionManager();
setupWithTransactionState(transactionManager);
client.setNode(new Node(1, ""localhost"", 33343));
prepareAndReceiveInitProducerId(producerId, Errors.NONE);
assertTrue(transactionManager.hasProducerId());
Future<RecordMetadata> future = accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(),
null, null, MAX_BLOCK_TIMEOUT).future;
client.prepareUnsupportedVersionResponse(new MockClient.RequestMatcher() {
@Override
public boolean matches(AbstractRequest body) {
return body instanceof ProduceRequest && ((ProduceRequest) body).hasIdempotentRecords();
}
});
sender.run(time.milliseconds());
assertFutureFailure(future, UnsupportedVersionException.class);
assertTrue(transactionManager.hasFatalError());
assertSendFailure(UnsupportedVersionException.class);
}
}",- return body instanceof ProduceRequest && ((ProduceRequest) body).isIdempotent();+ return body instanceof ProduceRequest && ((ProduceRequest) body).hasIdempotentRecords();,1
13030,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
private static void addMemberHostHeader(final StringBuilder netstatInfo, final String id,
final String host, final String lineSeparator) {
String osInfo = getOsName() + "" "" + getOsVersion() + "" "" + getOsArchitecture();
StringBuilder memberPlatFormInfo = new StringBuilder();
memberPlatFormInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__FOR_HOST_1_OS_2_MEMBER_0,
new Object[] {id, host, osInfo, lineSeparator}));
int nameIdLength = Math.max(Math.max(id.length(), host.length()), osInfo.length()) * 2;
StringBuilder netstatInfoBottom = new StringBuilder();
for (int i = 0; i < nameIdLength; i++) {
netstatInfo.append(""#"");
netstatInfoBottom.append(""#"");
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
private static void addMemberHostHeader(final StringBuilder netstatInfo, final String id,
final String host, final String lineSeparator) {
String osInfo = getOsName() + "" "" + getOsVersion() + "" "" + getOsArchitecture();
StringBuilder memberPlatFormInfo = new StringBuilder();
memberPlatFormInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__FOR_HOST_1_OS_2_MEMBER_0,
new Object[] {id, host, osInfo, lineSeparator}));
int nameIdLength = Math.max(Math.max(id.length(), host.length()), osInfo.length()) * 2;
StringBuilder netstatInfoBottom = new StringBuilder();
for (int i = 0; i < nameIdLength; i++) {
netstatInfo.append(""#"");
netstatInfoBottom.append(""#"");
}
}","- functionStringMap.put(new AlterRuntimeConfigFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new AlterRuntimeConfigFunction(), ""*"");- functionStringMap.put(new ChangeLogLevelFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new ChangeLogLevelFunction(), ""*"");- functionStringMap.put(new CloseDurableClientFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableClientFunction(), ""*"");- functionStringMap.put(new CloseDurableCqFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableCqFunction(), ""*"");- functionStringMap.put(new ContinuousQueryFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ContinuousQueryFunction(), ""*"");- functionStringMap.put(new CreateAsyncEventQueueFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new CreateAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new CreateDefinedIndexesFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateDefinedIndexesFunction(), ""*"");- functionStringMap.put(new CreateDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new CreateDiskStoreFunction(), ""*"");- functionStringMap.put(new CreateIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateIndexFunction(), ""*"");- functionStringMap.put(new DataCommandFunction(), ""DATA"");+ functionStringMap.put(new DataCommandFunction(), ""*"");- functionStringMap.put(new DeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new DeployFunction(), ""*"");- functionStringMap.put(new DescribeDiskStoreFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new DestroyDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new DestroyDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new DestroyIndexFunction(), ""*"");- functionStringMap.put(new ExportConfigFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportConfigFunction(), ""*"");- functionStringMap.put(new ExportDataFunction(), ""DATA:READ"");+ functionStringMap.put(new ExportDataFunction(), ""*"");- functionStringMap.put(new ExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportLogsFunction(), ""*"");- functionStringMap.put(new FetchRegionAttributesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchRegionAttributesFunction(), ""*"");- functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""*"");- functionStringMap.put(new GarbageCollectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new GarbageCollectionFunction(), ""*"");- functionStringMap.put(new GatewayReceiverCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewayReceiverCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderDestroyFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderDestroyFunction(), ""*"");- functionStringMap.put(new GetMemberConfigInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberConfigInformationFunction(), ""*"");- functionStringMap.put(new GetMemberInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberInformationFunction(), ""*"");- functionStringMap.put(new GetRegionDescriptionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionDescriptionFunction(), ""*"");- functionStringMap.put(new GetRegionsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionsFunction(), ""*"");- functionStringMap.put(new GetStackTracesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetStackTracesFunction(), ""*"");- functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""*"");- functionStringMap.put(new ImportDataFunction(), ""DATA:WRITE"");+ functionStringMap.put(new ImportDataFunction(), ""*"");- functionStringMap.put(new ListAsyncEventQueuesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListAsyncEventQueuesFunction(), ""*"");- functionStringMap.put(new ListDeployedFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDeployedFunction(), ""*"");- functionStringMap.put(new ListDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDiskStoresFunction(), ""*"");- functionStringMap.put(new ListDurableCqNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDurableCqNamesFunction(), ""*"");- functionStringMap.put(new ListFunctionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListFunctionFunction(), ""*"");- functionStringMap.put(new ListIndexFunction(), ""CLUSTER:READ:QUERY"");+ functionStringMap.put(new ListIndexFunction(), ""*"");- functionStringMap.put(new NetstatFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new NetstatFunction(), ""*"");- functionStringMap.put(new RebalanceFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RebalanceFunction(), ""*"");- functionStringMap.put(new RegionAlterFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionAlterFunction(), ""*"");- functionStringMap.put(new RegionCreateFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionCreateFunction(), ""*"");- functionStringMap.put(new RegionDestroyFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionDestroyFunction(), ""*"");- functionStringMap.put(new ShowMissingDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ShowMissingDiskStoresFunction(), ""*"");- functionStringMap.put(new ShutDownFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new ShutDownFunction(), ""*"");- functionStringMap.put(new SizeExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new SizeExportLogsFunction(), ""*"");- functionStringMap.put(new UndeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UndeployFunction(), ""*"");- functionStringMap.put(new UnregisterFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UnregisterFunction(), ""*"");- functionStringMap.put(new GetRegionNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionNamesFunction(), ""*"");- functionStringMap.put(new RecreateCacheFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new RecreateCacheFunction(), ""*"");- functionStringMap.put(new DownloadJarFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DownloadJarFunction(), ""*"");",1
7710,702bf1,ProjectKB,"public class main {
private HeaderParseStatus skipLine() throws IOException {
headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;
boolean eol = false;
while (!eol) {
if (pos >= lastValid) {
if (!fill(true,false)) {
return HeaderParseStatus.NEED_MORE_DATA;
}
}
if (buf[pos] == Constants.CR) {
} else if (buf[pos] == Constants.LF) {
eol = true;
} else {
headerData.lastSignificantChar = pos;
}
pos++;
}
if (rejectIllegalHeaderName || log.isDebugEnabled()) {
String message = sm.getString(""iib.invalidheader"", HeaderUtil.toPrintableString(
buf, headerData.lineStart, headerData.lastSignificantChar - headerData.lineStart + 1));
if (rejectIllegalHeaderName) {
throw new IllegalArgumentException(message);
}
log.debug(message);
}
headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}","public class main {
private HeaderParseStatus skipLine() throws IOException {
headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;
boolean eol = false;
byte chr = 0;
byte prevChr = 0;
while (!eol) {
if (pos >= lastValid) {
if (!fill(true,false)) {
return HeaderParseStatus.NEED_MORE_DATA;
}
}
prevChr = chr;
chr = buf[pos];
if (chr == Constants.CR) {
} else if (prevChr == Constants.CR && chr == Constants.LF) {
eol = true;
} else {
headerData.lastSignificantChar = pos;
}
pos++;
}
if (rejectIllegalHeaderName || log.isDebugEnabled()) {
String message = sm.getString(""iib.invalidheader"", HeaderUtil.toPrintableString(
buf, headerData.lineStart, headerData.lastSignificantChar - headerData.lineStart + 1));
if (rejectIllegalHeaderName) {
throw new IllegalArgumentException(message);
}
log.debug(message);
}
headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}",+ byte chr = 0;+ byte prevChr = 0;+ prevChr = chr;+ chr = buf[pos];- if (buf[pos] == Constants.CR) {+ if (chr == Constants.CR) {- } else if (buf[pos] == Constants.LF) {+ } else if (prevChr == Constants.CR && chr == Constants.LF) {,1
6677,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {
CuratorFramework fk;
if (authConf != null) {
fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));
} else {
fk = Utils.newCurator(conf, servers, port, root);
}
fk.getCuratorListenable().addListener(new CuratorListener() {
@Override
public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {
if (e.getType().equals(CuratorEventType.WATCHED)) {
WatchedEvent event = e.getWatchedEvent();
watcher.execute(event.getState(), event.getType(), event.getPath());
}
}
});
fk.start();
return fk;
}
}","public class main {
public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf, List<ACL> defaultAcl) {
CuratorFramework fk;
if (authConf != null) {
fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf), defaultAcl);
} else {
fk = Utils.newCurator(conf, servers, port, root, defaultAcl);
}
fk.getCuratorListenable().addListener(new CuratorListener() {
@Override
public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {
if (e.getType().equals(CuratorEventType.WATCHED)) {
WatchedEvent event = e.getWatchedEvent();
watcher.execute(event.getState(), event.getType(), event.getPath());
}
}
});
fk.start();
return fk;
}
}","- public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf) {+ public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf, List<ACL> defaultAcl) {- fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf));+ fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf), defaultAcl);- fk = Utils.newCurator(conf, servers, port, root);+ fk = Utils.newCurator(conf, servers, port, root, defaultAcl);",1
12596,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public synchronized void doHandshake(final NextFilter nextFilter) {
LOGGER.debug("" doHandshake()"");
writeRequest(nextFilter, request, ((Integer) getSession().getAttribute(HANDSHAKE_STEP)).intValue());
}
}","public class main {
public synchronized void doHandshake(final NextFilter nextFilter) {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug("" doHandshake()"");
}
writeRequest(nextFilter, request, ((Integer) getSession().getAttribute(HANDSHAKE_STEP)).intValue());
}
}",+ if (LOGGER.isDebugEnabled()) {+ },1
5320,128360856d50d7b39473644e6c1c21ba11766195,ProjectKB,"public class main {
public void testCustomParamTemplate() throws Exception {
org.apache.solr.response.VelocityResponseWriter vrw = new VelocityResponseWriter();
NamedList<String> nl = new NamedList<>();
nl.add(VelocityResponseWriter.PARAMS_RESOURCE_LOADER_ENABLED, ""true"");
vrw.init(nl);
SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,""custom"",
SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+""custom"",""$response.response.response_data"");
SolrQueryResponse rsp = new SolrQueryResponse();
StringWriter buf = new StringWriter();
rsp.add(""response_data"", ""testing"");
vrw.write(buf, req, rsp);
assertEquals(""testing"", buf.toString());
}
}","public class main {
public void testCustomParamTemplate() throws Exception {
org.apache.solr.response.VelocityResponseWriter vrw = new VelocityResponseWriter();
NamedList<String> nl = new NamedList<>();
nl.add(VelocityResponseWriter.PARAMS_RESOURCE_LOADER_ENABLED, ""true"");
vrw.init(nl);
SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,""custom"",
SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+""custom"",""$response.response.response_data"");
SolrQueryResponse rsp = new SolrQueryResponse();
StringWriter buf = new StringWriter();
rsp.add(""response_data"", ""testing"");
vrw.write(buf, req, rsp);
assertEquals(""testing"", buf.toString());
}
}","- fail(""template broke outside the box, retrieved OS: "" + buf);+ fail(""template broke outside the box, retrieved: "" + buf);",1
5236,246a6db1cad205ca9b6fca00c544ab7443ba202,ProjectKB,"public class main {
public void simpleBroker() throws Exception {
loadBeanDefinitions(""websocket-config-broker-simple.xml"");
HandlerMapping hm = this.appContext.getBean(HandlerMapping.class);
assertThat(hm, Matchers.instanceOf(SimpleUrlHandlerMapping.class));
SimpleUrlHandlerMapping suhm = (SimpleUrlHandlerMapping) hm;
assertThat(suhm.getUrlMap().keySet(), Matchers.hasSize(4));
assertThat(suhm.getUrlMap().values(), Matchers.hasSize(4));
HttpRequestHandler httpRequestHandler = (HttpRequestHandler) suhm.getUrlMap().get(""/foo"");
assertNotNull(httpRequestHandler);
assertThat(httpRequestHandler, Matchers.instanceOf(WebSocketHttpRequestHandler.class));
WebSocketHttpRequestHandler wsHttpRequestHandler = (WebSocketHttpRequestHandler) httpRequestHandler;
HandshakeHandler handshakeHandler = wsHttpRequestHandler.getHandshakeHandler();
assertNotNull(handshakeHandler);
assertTrue(handshakeHandler instanceof TestHandshakeHandler);
List<HandshakeInterceptor> interceptors = wsHttpRequestHandler.getHandshakeInterceptors();
assertThat(interceptors, contains(instanceOf(FooTestInterceptor.class),
instanceOf(BarTestInterceptor.class), instanceOf(OriginHandshakeInterceptor.class)));
WebSocketSession session = new TestWebSocketSession(""id"");
wsHttpRequestHandler.getWebSocketHandler().afterConnectionEstablished(session);
assertEquals(true, session.getAttributes().get(""decorated""));
WebSocketHandler wsHandler = wsHttpRequestHandler.getWebSocketHandler();
assertThat(wsHandler, Matchers.instanceOf(ExceptionWebSocketHandlerDecorator.class));
wsHandler = ((ExceptionWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(LoggingWebSocketHandlerDecorator.class));
wsHandler = ((LoggingWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(TestWebSocketHandlerDecorator.class));
wsHandler = ((TestWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(SubProtocolWebSocketHandler.class));
assertSame(wsHandler, this.appContext.getBean(MessageBrokerBeanDefinitionParser.WEB_SOCKET_HANDLER_BEAN_NAME));
SubProtocolWebSocketHandler subProtocolWsHandler = (SubProtocolWebSocketHandler) wsHandler;
assertEquals(Arrays.asList(""v10.stomp"", ""v11.stomp"", ""v12.stomp""), subProtocolWsHandler.getSubProtocols());
assertEquals(25 * 1000, subProtocolWsHandler.getSendTimeLimit());
assertEquals(1024 * 1024, subProtocolWsHandler.getSendBufferSizeLimit());
Map<String, SubProtocolHandler> handlerMap = subProtocolWsHandler.getProtocolHandlerMap();
StompSubProtocolHandler stompHandler = (StompSubProtocolHandler) handlerMap.get(""v12.stomp"");
assertNotNull(stompHandler);
assertEquals(128 * 1024, stompHandler.getMessageSizeLimit());
assertNotNull(stompHandler.getErrorHandler());
assertEquals(TestStompErrorHandler.class, stompHandler.getErrorHandler().getClass());
assertNotNull(new DirectFieldAccessor(stompHandler).getPropertyValue(""eventPublisher""));
httpRequestHandler = (HttpRequestHandler) suhm.getUrlMap().get(""/test/**"");
assertNotNull(httpRequestHandler);
assertThat(httpRequestHandler, Matchers.instanceOf(SockJsHttpRequestHandler.class));
SockJsHttpRequestHandler sockJsHttpRequestHandler = (SockJsHttpRequestHandler) httpRequestHandler;
wsHandler = unwrapWebSocketHandler(sockJsHttpRequestHandler.getWebSocketHandler());
assertNotNull(wsHandler);
assertThat(wsHandler, Matchers.instanceOf(SubProtocolWebSocketHandler.class));
assertNotNull(sockJsHttpRequestHandler.getSockJsService());
assertThat(sockJsHttpRequestHandler.getSockJsService(), Matchers.instanceOf(DefaultSockJsService.class));
DefaultSockJsService defaultSockJsService = (DefaultSockJsService) sockJsHttpRequestHandler.getSockJsService();
WebSocketTransportHandler wsTransportHandler = (WebSocketTransportHandler) defaultSockJsService
.getTransportHandlers().get(TransportType.WEBSOCKET);
assertNotNull(wsTransportHandler.getHandshakeHandler());
assertThat(wsTransportHandler.getHandshakeHandler(), Matchers.instanceOf(TestHandshakeHandler.class));
assertFalse(defaultSockJsService.shouldSuppressCors());
ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) defaultSockJsService.getTaskScheduler();
assertEquals(Runtime.getRuntime().availableProcessors(), scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());
assertTrue(scheduler.getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy());
interceptors = defaultSockJsService.getHandshakeInterceptors();
assertThat(interceptors, contains(instanceOf(FooTestInterceptor.class),
instanceOf(BarTestInterceptor.class), instanceOf(OriginHandshakeInterceptor.class)));
assertTrue(defaultSockJsService.getAllowedOrigins().contains(""http:		assertTrue(defaultSockJsService.getAllowedOrigins().contains(""http:
SimpUserRegistry userRegistry = this.appContext.getBean(SimpUserRegistry.class);
assertNotNull(userRegistry);
assertEquals(DefaultSimpUserRegistry.class, userRegistry.getClass());
UserDestinationResolver userDestResolver = this.appContext.getBean(UserDestinationResolver.class);
assertNotNull(userDestResolver);
assertThat(userDestResolver, Matchers.instanceOf(DefaultUserDestinationResolver.class));
DefaultUserDestinationResolver defaultUserDestResolver = (DefaultUserDestinationResolver) userDestResolver;
assertEquals(""/personal/"", defaultUserDestResolver.getDestinationPrefix());
UserDestinationMessageHandler userDestHandler = this.appContext.getBean(UserDestinationMessageHandler.class);
assertNotNull(userDestHandler);
SimpleBrokerMessageHandler brokerMessageHandler = this.appContext.getBean(SimpleBrokerMessageHandler.class);
assertNotNull(brokerMessageHandler);
Collection<String> prefixes = brokerMessageHandler.getDestinationPrefixes();
assertEquals(Arrays.asList(""/topic"", ""/queue""), new ArrayList<String>(prefixes));
assertNotNull(brokerMessageHandler.getTaskScheduler());
assertArrayEquals(new long[] {15000, 15000}, brokerMessageHandler.getHeartbeatValue());
List<Class<? extends MessageHandler>> subscriberTypes =
Arrays.<Class<? extends MessageHandler>>asList(SimpAnnotationMethodMessageHandler.class,
UserDestinationMessageHandler.class, SimpleBrokerMessageHandler.class);
testChannel(""clientInboundChannel"", subscriberTypes, 2);
testExecutor(""clientInboundChannel"", Runtime.getRuntime().availableProcessors() * 2, Integer.MAX_VALUE, 60);
subscriberTypes = Collections.singletonList(SubProtocolWebSocketHandler.class);
testChannel(""clientOutboundChannel"", subscriberTypes, 1);
testExecutor(""clientOutboundChannel"", Runtime.getRuntime().availableProcessors() * 2, Integer.MAX_VALUE, 60);
subscriberTypes = Arrays.<Class<? extends MessageHandler>>asList(
SimpleBrokerMessageHandler.class, UserDestinationMessageHandler.class);
testChannel(""brokerChannel"", subscriberTypes, 1);
try {
this.appContext.getBean(""brokerChannelExecutor"", ThreadPoolTaskExecutor.class);
fail(""expected exception"");
}
catch (NoSuchBeanDefinitionException ex) {
}
assertNotNull(this.appContext.getBean(""webSocketScopeConfigurer"", CustomScopeConfigurer.class));
DirectFieldAccessor subscriptionRegistryAccessor = new DirectFieldAccessor(brokerMessageHandler.getSubscriptionRegistry());
String pathSeparator = (String) new DirectFieldAccessor(subscriptionRegistryAccessor.getPropertyValue(""pathMatcher"")).getPropertyValue(""pathSeparator"");
assertEquals(""."", pathSeparator);
}
}","public class main {
public void simpleBroker() throws Exception {
loadBeanDefinitions(""websocket-config-broker-simple.xml"");
HandlerMapping hm = this.appContext.getBean(HandlerMapping.class);
assertThat(hm, Matchers.instanceOf(SimpleUrlHandlerMapping.class));
SimpleUrlHandlerMapping suhm = (SimpleUrlHandlerMapping) hm;
assertThat(suhm.getUrlMap().keySet(), Matchers.hasSize(4));
assertThat(suhm.getUrlMap().values(), Matchers.hasSize(4));
HttpRequestHandler httpRequestHandler = (HttpRequestHandler) suhm.getUrlMap().get(""/foo"");
assertNotNull(httpRequestHandler);
assertThat(httpRequestHandler, Matchers.instanceOf(WebSocketHttpRequestHandler.class));
WebSocketHttpRequestHandler wsHttpRequestHandler = (WebSocketHttpRequestHandler) httpRequestHandler;
HandshakeHandler handshakeHandler = wsHttpRequestHandler.getHandshakeHandler();
assertNotNull(handshakeHandler);
assertTrue(handshakeHandler instanceof TestHandshakeHandler);
List<HandshakeInterceptor> interceptors = wsHttpRequestHandler.getHandshakeInterceptors();
assertThat(interceptors, contains(instanceOf(FooTestInterceptor.class),
instanceOf(BarTestInterceptor.class), instanceOf(OriginHandshakeInterceptor.class)));
WebSocketSession session = new TestWebSocketSession(""id"");
wsHttpRequestHandler.getWebSocketHandler().afterConnectionEstablished(session);
assertEquals(true, session.getAttributes().get(""decorated""));
WebSocketHandler wsHandler = wsHttpRequestHandler.getWebSocketHandler();
assertThat(wsHandler, Matchers.instanceOf(ExceptionWebSocketHandlerDecorator.class));
wsHandler = ((ExceptionWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(LoggingWebSocketHandlerDecorator.class));
wsHandler = ((LoggingWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(TestWebSocketHandlerDecorator.class));
wsHandler = ((TestWebSocketHandlerDecorator) wsHandler).getDelegate();
assertThat(wsHandler, Matchers.instanceOf(SubProtocolWebSocketHandler.class));
assertSame(wsHandler, this.appContext.getBean(MessageBrokerBeanDefinitionParser.WEB_SOCKET_HANDLER_BEAN_NAME));
SubProtocolWebSocketHandler subProtocolWsHandler = (SubProtocolWebSocketHandler) wsHandler;
assertEquals(Arrays.asList(""v10.stomp"", ""v11.stomp"", ""v12.stomp""), subProtocolWsHandler.getSubProtocols());
assertEquals(25 * 1000, subProtocolWsHandler.getSendTimeLimit());
assertEquals(1024 * 1024, subProtocolWsHandler.getSendBufferSizeLimit());
Map<String, SubProtocolHandler> handlerMap = subProtocolWsHandler.getProtocolHandlerMap();
StompSubProtocolHandler stompHandler = (StompSubProtocolHandler) handlerMap.get(""v12.stomp"");
assertNotNull(stompHandler);
assertEquals(128 * 1024, stompHandler.getMessageSizeLimit());
assertNotNull(stompHandler.getErrorHandler());
assertEquals(TestStompErrorHandler.class, stompHandler.getErrorHandler().getClass());
assertNotNull(new DirectFieldAccessor(stompHandler).getPropertyValue(""eventPublisher""));
httpRequestHandler = (HttpRequestHandler) suhm.getUrlMap().get(""/test/**"");
assertNotNull(httpRequestHandler);
assertThat(httpRequestHandler, Matchers.instanceOf(SockJsHttpRequestHandler.class));
SockJsHttpRequestHandler sockJsHttpRequestHandler = (SockJsHttpRequestHandler) httpRequestHandler;
wsHandler = unwrapWebSocketHandler(sockJsHttpRequestHandler.getWebSocketHandler());
assertNotNull(wsHandler);
assertThat(wsHandler, Matchers.instanceOf(SubProtocolWebSocketHandler.class));
assertNotNull(sockJsHttpRequestHandler.getSockJsService());
assertThat(sockJsHttpRequestHandler.getSockJsService(), Matchers.instanceOf(DefaultSockJsService.class));
DefaultSockJsService defaultSockJsService = (DefaultSockJsService) sockJsHttpRequestHandler.getSockJsService();
WebSocketTransportHandler wsTransportHandler = (WebSocketTransportHandler) defaultSockJsService
.getTransportHandlers().get(TransportType.WEBSOCKET);
assertNotNull(wsTransportHandler.getHandshakeHandler());
assertThat(wsTransportHandler.getHandshakeHandler(), Matchers.instanceOf(TestHandshakeHandler.class));
assertFalse(defaultSockJsService.shouldSuppressCors());
ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) defaultSockJsService.getTaskScheduler();
assertEquals(Runtime.getRuntime().availableProcessors(), scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());
assertTrue(scheduler.getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy());
interceptors = defaultSockJsService.getHandshakeInterceptors();
assertThat(interceptors, contains(instanceOf(FooTestInterceptor.class),
instanceOf(BarTestInterceptor.class), instanceOf(OriginHandshakeInterceptor.class)));
assertTrue(defaultSockJsService.getAllowedOrigins().contains(""http:		assertTrue(defaultSockJsService.getAllowedOrigins().contains(""http:
SimpUserRegistry userRegistry = this.appContext.getBean(SimpUserRegistry.class);
assertNotNull(userRegistry);
assertEquals(DefaultSimpUserRegistry.class, userRegistry.getClass());
UserDestinationResolver userDestResolver = this.appContext.getBean(UserDestinationResolver.class);
assertNotNull(userDestResolver);
assertThat(userDestResolver, Matchers.instanceOf(DefaultUserDestinationResolver.class));
DefaultUserDestinationResolver defaultUserDestResolver = (DefaultUserDestinationResolver) userDestResolver;
assertEquals(""/personal/"", defaultUserDestResolver.getDestinationPrefix());
UserDestinationMessageHandler userDestHandler = this.appContext.getBean(UserDestinationMessageHandler.class);
assertNotNull(userDestHandler);
SimpleBrokerMessageHandler brokerMessageHandler = this.appContext.getBean(SimpleBrokerMessageHandler.class);
assertNotNull(brokerMessageHandler);
Collection<String> prefixes = brokerMessageHandler.getDestinationPrefixes();
assertEquals(Arrays.asList(""/topic"", ""/queue""), new ArrayList<String>(prefixes));
DefaultSubscriptionRegistry registry = (DefaultSubscriptionRegistry) brokerMessageHandler.getSubscriptionRegistry();
assertEquals(""my-selector"", registry.getSelectorHeaderName());
assertNotNull(brokerMessageHandler.getTaskScheduler());
assertArrayEquals(new long[] {15000, 15000}, brokerMessageHandler.getHeartbeatValue());
List<Class<? extends MessageHandler>> subscriberTypes =
Arrays.<Class<? extends MessageHandler>>asList(SimpAnnotationMethodMessageHandler.class,
UserDestinationMessageHandler.class, SimpleBrokerMessageHandler.class);
testChannel(""clientInboundChannel"", subscriberTypes, 2);
testExecutor(""clientInboundChannel"", Runtime.getRuntime().availableProcessors() * 2, Integer.MAX_VALUE, 60);
subscriberTypes = Collections.singletonList(SubProtocolWebSocketHandler.class);
testChannel(""clientOutboundChannel"", subscriberTypes, 1);
testExecutor(""clientOutboundChannel"", Runtime.getRuntime().availableProcessors() * 2, Integer.MAX_VALUE, 60);
subscriberTypes = Arrays.<Class<? extends MessageHandler>>asList(
SimpleBrokerMessageHandler.class, UserDestinationMessageHandler.class);
testChannel(""brokerChannel"", subscriberTypes, 1);
try {
this.appContext.getBean(""brokerChannelExecutor"", ThreadPoolTaskExecutor.class);
fail(""expected exception"");
}
catch (NoSuchBeanDefinitionException ex) {
}
assertNotNull(this.appContext.getBean(""webSocketScopeConfigurer"", CustomScopeConfigurer.class));
DirectFieldAccessor subscriptionRegistryAccessor = new DirectFieldAccessor(brokerMessageHandler.getSubscriptionRegistry());
String pathSeparator = (String) new DirectFieldAccessor(subscriptionRegistryAccessor.getPropertyValue(""pathMatcher"")).getPropertyValue(""pathSeparator"");
assertEquals(""."", pathSeparator);
}
}","+ DefaultSubscriptionRegistry registry = (DefaultSubscriptionRegistry) brokerMessageHandler.getSubscriptionRegistry();+ assertEquals(""my-selector"", registry.getSelectorHeaderName());",1
8688,d50df341432df1049c6c85bf2dcda9eb0be04d73,ProjectKB,"public class main {
private void setupReRun() throws CommandException {
InstrumentUtils.incrJobCounter(getName(), 1, getInstrumentation());
LogUtils.setLogInfo(wfBean);
WorkflowInstance oldWfInstance = this.wfBean.getWorkflowInstance();
WorkflowInstance newWfInstance;
String appPath = null;
WorkflowAppService wps = Services.get().get(WorkflowAppService.class);
try {
XLog.Info.get().setParameter(DagXLogInfoService.TOKEN, conf.get(OozieClient.LOG_TOKEN));
WorkflowApp app = wps.parseDef(conf, null);
XConfiguration protoActionConf = wps.createProtoActionConf(conf, true);
WorkflowLib workflowLib = Services.get().get(WorkflowStoreService.class).getWorkflowLibWithNoDB();
appPath = conf.get(OozieClient.APP_PATH);
URI uri = new URI(appPath);
HadoopAccessorService has = Services.get().get(HadoopAccessorService.class);
Configuration fsConf = has.createConfiguration(uri.getAuthority());
FileSystem fs = has.createFileSystem(wfBean.getUser(), uri, fsConf);
Path configDefault = null;
Path path = new Path(uri.getPath());
if (!fs.isFile(path)) {
configDefault = new Path(path, SubmitXCommand.CONFIG_DEFAULT);
}
else {
configDefault = new Path(path.getParent(), SubmitXCommand.CONFIG_DEFAULT);
}
if (fs.exists(configDefault)) {
Configuration defaultConf = new XConfiguration(fs.open(configDefault));
PropertiesUtils.checkDisallowedProperties(defaultConf, DISALLOWED_DEFAULT_PROPERTIES);
XConfiguration.injectDefaults(defaultConf, conf);
}
PropertiesUtils.checkDisallowedProperties(conf, DISALLOWED_USER_PROPERTIES);
conf = ((XConfiguration) conf).resolve();
try {
newWfInstance = workflowLib.createInstance(app, conf, jobId);
}
catch (WorkflowException e) {
throw new CommandException(e);
}
String appName = ELUtils.resolveAppName(app.getName(), conf);
if (SLAService.isEnabled()) {
Element wfElem = XmlUtils.parseXml(app.getDefinition());
ELEvaluator evalSla = SubmitXCommand.createELEvaluatorForGroup(conf, ""wf-sla-submit"");
Element eSla = XmlUtils.getSLAElement(wfElem);
String jobSlaXml = null;
if (eSla != null) {
jobSlaXml = SubmitXCommand.resolveSla(eSla, evalSla);
}
writeSLARegistration(wfElem, jobSlaXml, newWfInstance.getId(),
conf.get(SubWorkflowActionExecutor.PARENT_ID), conf.get(OozieClient.USER_NAME), appName,
evalSla);
}
wfBean.setAppName(appName);
wfBean.setProtoActionConf(protoActionConf.toXmlString());
}
catch (WorkflowException ex) {
throw new CommandException(ex);
}
catch (IOException ex) {
throw new CommandException(ErrorCode.E0803, ex.getMessage(), ex);
}
catch (HadoopAccessorException ex) {
throw new CommandException(ex);
}
catch (URISyntaxException ex) {
throw new CommandException(ErrorCode.E0711, appPath, ex.getMessage(), ex);
}
catch (Exception ex) {
throw new CommandException(ErrorCode.E1007, ex.getMessage(), ex);
}
for (int i = 0; i < actions.size(); i++) {
if (!nodesToSkip.contains(actions.get(i).getName()) &&
!(conf.getBoolean(OozieClient.RERUN_FAIL_NODES, false) &&
SubWorkflowActionExecutor.ACTION_TYPE.equals(actions.get(i).getType()))) {
deleteList.add(actions.get(i));
LOG.info(""Deleting Action[{0}] for re-run"", actions.get(i).getId());
}
else {
copyActionData(newWfInstance, oldWfInstance);
}
}
wfBean.setAppPath(conf.get(OozieClient.APP_PATH));
wfBean.setConf(XmlUtils.prettyPrint(conf).toString());
wfBean.setLogToken(conf.get(OozieClient.LOG_TOKEN, """"));
wfBean.setUser(conf.get(OozieClient.USER_NAME));
String group = ConfigUtils.getWithDeprecatedCheck(conf, OozieClient.JOB_ACL, OozieClient.GROUP_NAME, null);
wfBean.setGroup(group);
wfBean.setExternalId(conf.get(OozieClient.EXTERNAL_ID));
wfBean.setEndTime(null);
wfBean.setRun(wfBean.getRun() + 1);
wfBean.setStatus(WorkflowJob.Status.PREP);
wfBean.setWorkflowInstance(newWfInstance);
try {
wfBean.setLastModifiedTime(new Date());
updateList.add(new UpdateEntry<WorkflowJobQuery>(WorkflowJobQuery.UPDATE_WORKFLOW_RERUN, wfBean));
BatchQueryExecutor.getInstance().executeBatchInsertUpdateDelete(null, updateList, deleteList);
}
catch (JPAExecutorException je) {
throw new CommandException(je);
}
finally {
updateParentIfNecessary(wfBean);
}
}","public class main {
private void setupReRun() throws CommandException {
InstrumentUtils.incrJobCounter(getName(), 1, getInstrumentation());
LogUtils.setLogInfo(wfBean);
WorkflowInstance oldWfInstance = this.wfBean.getWorkflowInstance();
WorkflowInstance newWfInstance;
String appPath = null;
WorkflowAppService wps = Services.get().get(WorkflowAppService.class);
try {
XLog.Info.get().setParameter(DagXLogInfoService.TOKEN, conf.get(OozieClient.LOG_TOKEN));
WorkflowApp app = wps.parseDef(conf, null);
XConfiguration protoActionConf = wps.createProtoActionConf(conf, true);
WorkflowLib workflowLib = Services.get().get(WorkflowStoreService.class).getWorkflowLibWithNoDB();
appPath = conf.get(OozieClient.APP_PATH);
URI uri = new URI(appPath);
HadoopAccessorService has = Services.get().get(HadoopAccessorService.class);
Configuration fsConf = has.createConfiguration(uri.getAuthority());
FileSystem fs = has.createFileSystem(wfBean.getUser(), uri, fsConf);
Path configDefault = null;
Path path = new Path(uri.getPath());
if (!fs.isFile(path)) {
configDefault = new Path(path, SubmitXCommand.CONFIG_DEFAULT);
}
else {
configDefault = new Path(path.getParent(), SubmitXCommand.CONFIG_DEFAULT);
}
if (fs.exists(configDefault)) {
Configuration defaultConf = new XConfiguration(fs.open(configDefault));
PropertiesUtils.checkDisallowedProperties(defaultConf, DISALLOWED_USER_PROPERTIES);
PropertiesUtils.checkDefaultDisallowedProperties(defaultConf);
XConfiguration.injectDefaults(defaultConf, conf);
}
PropertiesUtils.checkDisallowedProperties(conf, DISALLOWED_USER_PROPERTIES);
conf = ((XConfiguration) conf).resolve();
try {
newWfInstance = workflowLib.createInstance(app, conf, jobId);
}
catch (WorkflowException e) {
throw new CommandException(e);
}
String appName = ELUtils.resolveAppName(app.getName(), conf);
if (SLAService.isEnabled()) {
Element wfElem = XmlUtils.parseXml(app.getDefinition());
ELEvaluator evalSla = SubmitXCommand.createELEvaluatorForGroup(conf, ""wf-sla-submit"");
Element eSla = XmlUtils.getSLAElement(wfElem);
String jobSlaXml = null;
if (eSla != null) {
jobSlaXml = SubmitXCommand.resolveSla(eSla, evalSla);
}
writeSLARegistration(wfElem, jobSlaXml, newWfInstance.getId(),
conf.get(SubWorkflowActionExecutor.PARENT_ID), conf.get(OozieClient.USER_NAME), appName,
evalSla);
}
wfBean.setAppName(appName);
wfBean.setProtoActionConf(protoActionConf.toXmlString());
}
catch (WorkflowException ex) {
throw new CommandException(ex);
}
catch (IOException ex) {
throw new CommandException(ErrorCode.E0803, ex.getMessage(), ex);
}
catch (HadoopAccessorException ex) {
throw new CommandException(ex);
}
catch (URISyntaxException ex) {
throw new CommandException(ErrorCode.E0711, appPath, ex.getMessage(), ex);
}
catch (Exception ex) {
throw new CommandException(ErrorCode.E1007, ex.getMessage(), ex);
}
for (int i = 0; i < actions.size(); i++) {
if (!nodesToSkip.contains(actions.get(i).getName()) &&
!(conf.getBoolean(OozieClient.RERUN_FAIL_NODES, false) &&
SubWorkflowActionExecutor.ACTION_TYPE.equals(actions.get(i).getType()))) {
deleteList.add(actions.get(i));
LOG.info(""Deleting Action[{0}] for re-run"", actions.get(i).getId());
}
else {
copyActionData(newWfInstance, oldWfInstance);
}
}
wfBean.setAppPath(conf.get(OozieClient.APP_PATH));
wfBean.setConf(XmlUtils.prettyPrint(conf).toString());
wfBean.setLogToken(conf.get(OozieClient.LOG_TOKEN, """"));
wfBean.setUser(conf.get(OozieClient.USER_NAME));
String group = ConfigUtils.getWithDeprecatedCheck(conf, OozieClient.JOB_ACL, OozieClient.GROUP_NAME, null);
wfBean.setGroup(group);
wfBean.setExternalId(conf.get(OozieClient.EXTERNAL_ID));
wfBean.setEndTime(null);
wfBean.setRun(wfBean.getRun() + 1);
wfBean.setStatus(WorkflowJob.Status.PREP);
wfBean.setWorkflowInstance(newWfInstance);
try {
wfBean.setLastModifiedTime(new Date());
updateList.add(new UpdateEntry<WorkflowJobQuery>(WorkflowJobQuery.UPDATE_WORKFLOW_RERUN, wfBean));
BatchQueryExecutor.getInstance().executeBatchInsertUpdateDelete(null, updateList, deleteList);
}
catch (JPAExecutorException je) {
throw new CommandException(je);
}
finally {
updateParentIfNecessary(wfBean);
}
}","- PropertiesUtils.checkDisallowedProperties(defaultConf, DISALLOWED_DEFAULT_PROPERTIES);+ PropertiesUtils.checkDisallowedProperties(defaultConf, DISALLOWED_USER_PROPERTIES);+ PropertiesUtils.checkDefaultDisallowedProperties(defaultConf);",1
4447,9730cd6a3bbb481ee4e400b51952b537589c469d,ProjectKB,"public class main {
public ScimUser create(final ScimUser user) {
validate(user);
logger.debug(""Creating new user: "" + user.getUserName());
final String id = UUID.randomUUID().toString();
final String identityZoneId = IdentityZoneHolder.get().getId();
final String origin = StringUtils.hasText(user.getOrigin()) ? user.getOrigin() : Origin.UAA;
try {
jdbcTemplate.update(CREATE_USER_SQL, new PreparedStatementSetter() {
@Override
public void setValues(PreparedStatement ps) throws SQLException {
Timestamp t = new Timestamp(new Date().getTime());
ps.setString(1, id);
ps.setInt(2, user.getVersion());
ps.setTimestamp(3, t);
ps.setTimestamp(4, t);
ps.setString(5, user.getUserName());
ps.setString(6, user.getPrimaryEmail());
if (user.getName() == null) {
ps.setString(7, null);
ps.setString(8, null);
}
else {
ps.setString(7, user.getName().getGivenName());
ps.setString(8, user.getName().getFamilyName());
}
ps.setBoolean(9, user.isActive());
String phoneNumber = extractPhoneNumber(user);
ps.setString(10, phoneNumber);
ps.setBoolean(11, user.isVerified());
ps.setString(12, origin);
ps.setString(13, StringUtils.hasText(user.getExternalId())?user.getExternalId():null);
ps.setString(14, identityZoneId);
ps.setString(15, user.getSalt());
ps.setTimestamp(16, t);
ps.setString(17, user.getPassword());
}
});
} catch (DuplicateKeyException e) {
ScimUser existingUser = query(""userName eq \"""" + user.getUserName() + ""\"" and origin eq \"""" + (StringUtils.hasText(user.getOrigin())? user.getOrigin() : Origin.UAA) + ""\"""").get(0);
Map<String,Object> userDetails = new HashMap<>();
userDetails.put(""active"", existingUser.isActive());
userDetails.put(""verified"", existingUser.isVerified());
userDetails.put(""user_id"", existingUser.getId());
throw new ScimResourceAlreadyExistsException(""Username already in use: "" + existingUser.getUserName(), userDetails);
}
return retrieve(id);
}
}","public class main {
public ScimUser create(final ScimUser user) {
validate(user);
logger.debug(""Creating new user: "" + user.getUserName());
final String id = UUID.randomUUID().toString();
final String identityZoneId = IdentityZoneHolder.get().getId();
final String origin = StringUtils.hasText(user.getOrigin()) ? user.getOrigin() : Origin.UAA;
try {
jdbcTemplate.update(CREATE_USER_SQL, new PreparedStatementSetter() {
@Override
public void setValues(PreparedStatement ps) throws SQLException {
Timestamp t = new Timestamp(new Date().getTime());
ps.setString(1, id);
ps.setInt(2, user.getVersion());
ps.setTimestamp(3, t);
ps.setTimestamp(4, t);
ps.setString(5, user.getUserName());
ps.setString(6, user.getPrimaryEmail());
if (user.getName() == null) {
ps.setString(7, null);
ps.setString(8, null);
}
else {
ps.setString(7, user.getName().getGivenName());
ps.setString(8, user.getName().getFamilyName());
}
ps.setBoolean(9, user.isActive());
String phoneNumber = extractPhoneNumber(user);
ps.setString(10, phoneNumber);
ps.setBoolean(11, user.isVerified());
ps.setString(12, origin);
ps.setString(13, StringUtils.hasText(user.getExternalId())?user.getExternalId():null);
ps.setString(14, identityZoneId);
ps.setString(15, user.getSalt());
ps.setTimestamp(16, getPasswordLastModifiedTimestamp(t));
ps.setString(17, user.getPassword());
}
});
} catch (DuplicateKeyException e) {
ScimUser existingUser = query(""userName eq \"""" + user.getUserName() + ""\"" and origin eq \"""" + (StringUtils.hasText(user.getOrigin())? user.getOrigin() : Origin.UAA) + ""\"""").get(0);
Map<String,Object> userDetails = new HashMap<>();
userDetails.put(""active"", existingUser.isActive());
userDetails.put(""verified"", existingUser.isVerified());
userDetails.put(""user_id"", existingUser.getId());
throw new ScimResourceAlreadyExistsException(""Username already in use: "" + existingUser.getUserName(), userDetails);
}
return retrieve(id);
}
}","- ps.setTimestamp(16, t);+ ps.setTimestamp(16, getPasswordLastModifiedTimestamp(t));",1
10771,632951898a2f1474f699094200367fb405397127,ProjectKB,"public class main {
public void getMostRecentCredentialVersion_whenTheCredentialExists_returnsDataResponse() {
when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
.thenReturn(version1);
when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
.thenReturn(true);
DataResponse response = subject.getMostRecentCredentialVersion(
userContext,
newArrayList(), CREDENTIAL_NAME
);
List<CredentialView> responseCredentials = response.getData();
assertThat(responseCredentials, hasSize(1));
assertThat(responseCredentials.get(0).getName(), equalTo(CREDENTIAL_NAME));
assertThat(responseCredentials.get(0).getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
}
}","public class main {
public void getMostRecentCredentialVersion_whenTheCredentialExists_returnsDataResponse() {
when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
.thenReturn(version1);
when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
.thenReturn(true);
Credential credential = subject.getMostRecentCredentialVersion(
userContext,
newArrayList(), CREDENTIAL_NAME
);
assertThat(credential.getName(), equalTo(CREDENTIAL_NAME));
assertThat(credential.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
}
}","- DataResponse response = subject.getMostRecentCredentialVersion(+ Credential credential = subject.getMostRecentCredentialVersion(- List<CredentialView> responseCredentials = response.getData();- assertThat(responseCredentials, hasSize(1));- assertThat(responseCredentials.get(0).getName(), equalTo(CREDENTIAL_NAME));+ assertThat(credential.getName(), equalTo(CREDENTIAL_NAME));- assertThat(responseCredentials.get(0).getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));+ assertThat(credential.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));",1
14566,8ffa920d3894634aa078f0fdf6b02d270262caf,ProjectKB,"public class main {
public static CuratorFramework createZKClient(Map<String, Object> conf) {
@SuppressWarnings(""unchecked"")
List<String> zkServers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);
Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo zkAuthInfo = new ZookeeperAuthInfo(conf);
CuratorFramework zkClient = CuratorUtils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo);
zkClient.start();
return zkClient;
}
}","public class main {
public static CuratorFramework createZKClient(Map<String, Object> conf, DaemonType type) {
@SuppressWarnings(""unchecked"")
List<String> zkServers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);
Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo zkAuthInfo = new ZookeeperAuthInfo(conf);
CuratorFramework zkClient = CuratorUtils.newCurator(conf, zkServers, port,
(String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo, type.getDefaultZkAcls(conf));
zkClient.start();
return zkClient;
}
}","- public static CuratorFramework createZKClient(Map<String, Object> conf) {+ public static CuratorFramework createZKClient(Map<String, Object> conf, DaemonType type) {- CuratorFramework zkClient = CuratorUtils.newCurator(conf, zkServers, port, (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo);+ CuratorFramework zkClient = CuratorUtils.newCurator(conf, zkServers, port,+ (String) conf.get(Config.STORM_ZOOKEEPER_ROOT), zkAuthInfo, type.getDefaultZkAcls(conf));",1
4817,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().get(foo.getId()).getProtocolMappers().update(""nosuch"", new ProtocolMapperRepresentation());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().get(foo.getId()).getProtocolMappers().update(""nosuch"", new ProtocolMapperRepresentation());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
7063,8386d8f7260143802553bc6dbae2880d6c0bafda,ProjectKB,"public class main {
public static void setup() {
XStreamTestUtils.setPermissionSystemProperty("""");
}
}","public class main {
public static void setup() {
XStreamTestUtils.setPermissionSystemProperty("""");
}
}","+ xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class);+ xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class);+ xStreamDataFormat.setPermissions(""+6org.apache.camel.dataformat.xstream.*"");",1
11777,e7a4b53f799685e337972dd36ba0253c04bcc01,ProjectKB,"public class main {
protected XStream createXStream() {
XStream xstream = null;
if (brokerContext != null) {
Map<String, XStream> beans = brokerContext.getBeansOfType(XStream.class);
for (XStream bean : beans.values()) {
if (bean != null) {
xstream = bean;
break;
}
}
}
if (xstream == null) {
xstream = new XStream();
xstream.ignoreUnknownElements();
}
xstream.registerConverter(new AbstractSingleValueConverter() {
@Override
public Object fromString(String str) {
return str;
}
@SuppressWarnings(""rawtypes"")
@Override
public boolean canConvert(Class type) {
return type.equals(UTF8Buffer.class);
}
});
xstream.alias(""string"", UTF8Buffer.class);
return xstream;
}
}","public class main {
protected XStream createXStream() {
XStream xstream = null;
if (brokerContext != null) {
Map<String, XStream> beans = brokerContext.getBeansOfType(XStream.class);
for (XStream bean : beans.values()) {
if (bean != null) {
xstream = bean;
break;
}
}
}
if (xstream == null) {
xstream = XStreamSupport.createXStream();
xstream.ignoreUnknownElements();
}
xstream.registerConverter(new AbstractSingleValueConverter() {
@Override
public Object fromString(String str) {
return str;
}
@SuppressWarnings(""rawtypes"")
@Override
public boolean canConvert(Class type) {
return type.equals(UTF8Buffer.class);
}
});
xstream.alias(""string"", UTF8Buffer.class);
return xstream;
}
}",- xstream = new XStream();+ xstream = XStreamSupport.createXStream();,1
19109,5fa7ac68c0e4251c93056d9982db5e794e04ebfa,ProjectKB,"public class main {
public Void call(HttpServerExchange exchange, Object ignore) throws Exception {
final ApplicationListeners listeners = createListeners();
listeners.start();
deployment.setApplicationListeners(listeners);
createServletsAndFilters(deployment, deploymentInfo);
initializeTempDir(servletContext, deploymentInfo);
for (final ServletContainerInitializerInfo sci : deploymentInfo.getServletContainerInitializers()) {
final InstanceHandle<? extends ServletContainerInitializer> instance = sci.getInstanceFactory().createInstance();
try {
instance.getInstance().onStartup(sci.getHandlesTypes(), servletContext);
} finally {
instance.release();
}
}
deployment.getSessionManager().registerSessionListener(new SessionListenerBridge(deployment, listeners, servletContext));
for(SessionListener listener : deploymentInfo.getSessionListeners()) {
deployment.getSessionManager().registerSessionListener(listener);
}
initializeErrorPages(deployment, deploymentInfo);
initializeMimeMappings(deployment, deploymentInfo);
listeners.contextInitialized();
HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;
wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());
if(!deploymentInfo.isSecurityDisabled()) {
HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);
wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);
}
HttpHandler outerHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getOuterHandlerChainWrappers());
wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, outerHandlers, wrappedHandlers);
wrappedHandlers = handleDevelopmentModePersistentSessions(wrappedHandlers, deploymentInfo, deployment.getSessionManager(), servletContext);
MetricsCollector metrics = deploymentInfo.getMetricsCollector();
if(metrics != null) {
wrappedHandlers = new MetricsChainHandler(wrappedHandlers, metrics, deployment);
}
if( deploymentInfo.getCrawlerSessionManagerConfig() != null ) {
wrappedHandlers = new CrawlerSessionManagerHandler(deploymentInfo.getCrawlerSessionManagerConfig(), wrappedHandlers);
}
final ServletInitialHandler servletInitialHandler = SecurityActions.createServletInitialHandler(deployment.getServletPaths(), wrappedHandlers, deployment, servletContext);
HttpHandler initialHandler = wrapHandlers(servletInitialHandler, deployment.getDeploymentInfo().getInitialHandlerChainWrappers());
initialHandler = new HttpContinueReadHandler(initialHandler);
if(deploymentInfo.getUrlEncoding() != null) {
initialHandler = Handlers.urlDecodingHandler(deploymentInfo.getUrlEncoding(), initialHandler);
}
deployment.setInitialHandler(initialHandler);
deployment.setServletHandler(servletInitialHandler);
deployment.getServletPaths().invalidate();                     servletContext.initDone();
return null;
}
}","public class main {
public Void call(HttpServerExchange exchange, Object ignore) throws Exception {
final ApplicationListeners listeners = createListeners();
listeners.start();
deployment.setApplicationListeners(listeners);
createServletsAndFilters(deployment, deploymentInfo);
initializeTempDir(servletContext, deploymentInfo);
for (final ServletContainerInitializerInfo sci : deploymentInfo.getServletContainerInitializers()) {
final InstanceHandle<? extends ServletContainerInitializer> instance = sci.getInstanceFactory().createInstance();
try {
instance.getInstance().onStartup(sci.getHandlesTypes(), servletContext);
} finally {
instance.release();
}
}
deployment.getSessionManager().registerSessionListener(new SessionListenerBridge(deployment, listeners, servletContext));
for(SessionListener listener : deploymentInfo.getSessionListeners()) {
deployment.getSessionManager().registerSessionListener(listener);
}
initializeErrorPages(deployment, deploymentInfo);
initializeMimeMappings(deployment, deploymentInfo);
listeners.contextInitialized();
HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;
wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());
wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());
if(!deploymentInfo.isSecurityDisabled()) {
HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);
wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);
}
HttpHandler outerHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getOuterHandlerChainWrappers());
wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, outerHandlers, wrappedHandlers);
wrappedHandlers = handleDevelopmentModePersistentSessions(wrappedHandlers, deploymentInfo, deployment.getSessionManager(), servletContext);
MetricsCollector metrics = deploymentInfo.getMetricsCollector();
if(metrics != null) {
wrappedHandlers = new MetricsChainHandler(wrappedHandlers, metrics, deployment);
}
if( deploymentInfo.getCrawlerSessionManagerConfig() != null ) {
wrappedHandlers = new CrawlerSessionManagerHandler(deploymentInfo.getCrawlerSessionManagerConfig(), wrappedHandlers);
}
final ServletInitialHandler servletInitialHandler = SecurityActions.createServletInitialHandler(deployment.getServletPaths(), wrappedHandlers, deployment, servletContext);
HttpHandler initialHandler = wrapHandlers(servletInitialHandler, deployment.getDeploymentInfo().getInitialHandlerChainWrappers());
initialHandler = new HttpContinueReadHandler(initialHandler);
if(deploymentInfo.getUrlEncoding() != null) {
initialHandler = Handlers.urlDecodingHandler(deploymentInfo.getUrlEncoding(), initialHandler);
}
deployment.setInitialHandler(initialHandler);
deployment.setServletHandler(servletInitialHandler);
deployment.getServletPaths().invalidate();                     servletContext.initDone();
return null;
}
}","+ wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());",1
16957,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public Response processControlCommand(ControlCommand command) throws Exception {
onControlCommand(command);
return null;
}
}","public class main {
public Response processControlCommand(ControlCommand command) throws Exception {
return null;
}
}",- onControlCommand(command);,1
13647,5a29daedeb5ac7e9e2af87ce1a7bbfad230d5c8,ProjectKB,"public class main {
private void sendPackets() throws InterruptedException {
long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;
while (true) {
try {
QuorumPacket p;
p = queuedPackets.poll();
if (p == null) {
bufferedOutput.flush();
p = queuedPackets.take();
}
if (p == proposalOfDeath) {
break;
}
if (p.getType() == Leader.PING) {
traceMask = ZooTrace.SERVER_PING_TRACE_MASK;
}
if (p.getType() == Leader.PROPOSAL) {
syncLimitCheck.updateProposal(p.getZxid(), System.nanoTime());
}
if (LOG.isTraceEnabled()) {
ZooTrace.logQuorumPacket(LOG, traceMask, 'o', p);
}
oa.writeRecord(p, ""packet"");
} catch (IOException e) {
if (!sock.isClosed()) {
LOG.warn(""Unexpected exception at "" + this, e);
try {
sock.close();
} catch(IOException ie) {
LOG.warn(""Error closing socket for handler "" + this, ie);
}
}
break;
}
}
}
}","public class main {
private void sendPackets() throws InterruptedException {
long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;
while (true) {
try {
QuorumPacket p;
p = queuedPackets.poll();
if (p == null) {
bufferedOutput.flush();
p = queuedPackets.take();
}
if (p == proposalOfDeath) {
break;
}
if (p.getType() == Leader.PING) {
traceMask = ZooTrace.SERVER_PING_TRACE_MASK;
}
if (p.getType() == Leader.PROPOSAL) {
syncLimitCheck.updateProposal(p.getZxid(), System.nanoTime());
}
if (LOG.isTraceEnabled()) {
ZooTrace.logQuorumPacket(LOG, traceMask, 'o', p);
}
oa.writeRecord(p, ""packet"");
} catch (IOException e) {
if (!sock.isClosed()) {
LOG.warn(""Unexpected exception at "" + this, e);
try {
sock.close();
} catch(IOException ie) {
LOG.warn(""Error closing socket for handler "" + this, ie);
}
}
break;
}
}",- }- },1
17618,b9696ac80bb496b52d05c3884f81b0746d9af9e2,ProjectKB,"public class main {
private boolean evaluate(byte[] data) {
try {
InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
} catch (XPathExpressionException e) {
return false;
}
}
}","public class main {
private boolean evaluate(byte[] data) {
try {
InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
Document inputDocument = builder.parse(inputSource);
return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
} catch (Exception e) {
return false;
}
}
}","+ Document inputDocument = builder.parse(inputSource);- return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();+ return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();- } catch (XPathExpressionException e) {+ } catch (Exception e) {",1
17714,0330c1c0b62f3c2e6a4744048578dea55193b62,ProjectKB,"public class main {
public void setShort(int parameterIndex, short x) throws SQLException {
this.parameters.put(parameterIndex,""""+x);
}
}","public class main {
public void setShort(int parameterIndex, short x) throws SQLException {
this.parameters.put(parameterIndex,""""+x);
}
private String replaceBackSlashSingleQuote(String x) {
StringBuffer newX = new StringBuffer();
for (int i = 0; i < x.length(); i++) {
char c = x.charAt(i);
if (c == '\\' && i < x.length()-1) {
char c1 = x.charAt(i+1);
if (c1 == '\'') {
newX.append(c1);
} else {
newX.append(c);
newX.append(c1);
}
i++;
} else {
newX.append(c);
}
}
}",+ }+ private String replaceBackSlashSingleQuote(String x) {+ StringBuffer newX = new StringBuffer();+ for (int i = 0; i < x.length(); i++) {+ char c = x.charAt(i);+ if (c == '\\' && i < x.length()-1) {+ char c1 = x.charAt(i+1);+ if (c1 == '\'') {+ newX.append(c1);+ } else {+ newX.append(c);+ newX.append(c1);+ }+ i++;+ } else {+ newX.append(c);+ },1
11627,54b65c1d30848835f26bd138c0ba407bc1e560d,ProjectKB,"public class main {
protected void loadResource(String resourceUri) throws TransformerException, IOException {
LOG.trace(""{}
}","public class main {
protected void loadResource(String resourceUri) throws TransformerException, IOException {
LOG.trace(""{}
}","- public static void parseTokenList(Reader input, Collection<String> result) throws IOException {+ public static boolean parseTokenList(Reader input, Collection<String> collection) throws IOException {+ boolean invalid = false;+ boolean valid = false;+ invalid = true;+ valid = true;- result.add(fieldName.toLowerCase(Locale.ENGLISH));+ collection.add(fieldName.toLowerCase(Locale.ENGLISH));+ valid = true;- result.add(fieldName.toLowerCase(Locale.ENGLISH));+ collection.add(fieldName.toLowerCase(Locale.ENGLISH));+ invalid = true;+ return valid && !invalid;",1
14412,62c9e1577618470832ede22dcedd46cba15b1836,ProjectKB,"public class main {
public R execute(HttpResponseProcessor<R> responseProcessor) {
byte[] bytes = null;
try {
for (Map.Entry<String, String> header : this.headers.entrySet()) {
this.builder.setHeader(header.getKey(), header.getValue());
}
preExecute(this.builder);
HttpResponse response = this.httpClient.execute(this.builder.build());
HttpEntity entity = response.getEntity();
if (entity != null) {
bytes = EntityUtils.toByteArray(entity);
}
StatusLine statusLine = response.getStatusLine();
int statusCode = statusLine.getStatusCode();
if (statusCode < 200 || statusCode >= 300) {
throw new HttpResponseException(""Unexpected response from server: "" + statusCode + "" / "" + statusLine.getReasonPhrase(), statusCode, statusLine.getReasonPhrase(), bytes);
}
if (bytes == null) {
return null;
}
return responseProcessor.process(bytes);
} catch (HttpResponseException e) {
throw e;
} catch (Exception e) {
throw new RuntimeException(""Error executing http method ["" + builder + ""]. Response : "" + String.valueOf(bytes), e);
}
}
}","public class main {
public R execute(HttpResponseProcessor<R> responseProcessor) {
byte[] bytes = null;
try {
for (Map.Entry<String, String> header : this.headers.entrySet()) {
this.builder.setHeader(header.getKey(), header.getValue());
}
preExecute(this.builder);
HttpResponse response = this.httpClient.execute(this.builder.build());
HttpEntity entity = response.getEntity();
if (entity != null) {
bytes = EntityUtils.toByteArray(entity);
}
StatusLine statusLine = response.getStatusLine();
int statusCode = statusLine.getStatusCode();
if (statusCode < 200 || statusCode >= 300) {
throw new HttpResponseException(""Unexpected response from server: "" + statusCode + "" / "" + statusLine.getReasonPhrase(), statusCode, statusLine.getReasonPhrase(), bytes);
}
if (bytes == null) {
return null;
}
return responseProcessor.process(bytes);
} catch (HttpResponseException e) {
throw e;
} catch (Exception e) {
throw new RuntimeException(""Error executing http method ["" + builder.getMethod() + ""]. Response : "" + String.valueOf(bytes), e);
}
}
}","- throw new RuntimeException(""Error executing http method ["" + builder + ""]. Response : "" + String.valueOf(bytes), e);+ throw new RuntimeException(""Error executing http method ["" + builder.getMethod() + ""]. Response : "" + String.valueOf(bytes), e);",1
4883,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().getFlow(""nosuch"");
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().getFlow(""nosuch"");+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
14789,e7127129dbc0f4ee83985052085e185e750cebbf,ProjectKB,"public class main {
private void verifySavedState(HttpServletRequest request) {
HttpSession session = request.getSession(false);
if (session != null) {
String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);
String state = getState(request);
if (savedContext != null && !savedContext.equals(state)) {
logger.warn(""The received state does not match the state saved in the context"");
throw new BadCredentialsException(""The received state does not match the state saved in the context"");
}
}
}
}","public class main {
private void verifySavedState(HttpServletRequest request) {
HttpSession session = request.getSession(false);
if (session == null) {
logger.warn(""The received state does not match the state saved in the context"");
throw new BadCredentialsException(""The received state does not match the state saved in the context"");
}
String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);
String state = getState(request);
if (savedContext == null || !savedContext.equals(state)) {
logger.warn(""The received state does not match the state saved in the context"");
throw new BadCredentialsException(""The received state does not match the state saved in the context"");
}
session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);
}
}","- if (session != null) {+ if (session == null) {- String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);- String state = getState(request);- if (savedContext != null && !savedContext.equals(state)) {+ String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);+ String state = getState(request);+ if (savedContext == null || !savedContext.equals(state)) {+ logger.warn(""The received state does not match the state saved in the context"");+ throw new BadCredentialsException(""The received state does not match the state saved in the context"");+ session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",1
9082,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void testInvalidPermissionsForDumpDirectoryFilesWithRegionParameter_withDataReadRegion() {
Function thisFunction = dumpDirectoryFiles;
ResourcePermission thisMissingPermission = CLUSTER_MANAGE;
gfsh.executeAndAssertThat(
""execute function  --region="" + regionName + "" --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisMissingPermission.toString()).statusIsError();
}
}","public class main {
public void testInvalidPermissionsForDumpDirectoryFilesWithRegionParameter_withDataReadRegion() {
Function thisFunction = dumpDirectoryFiles;
ResourcePermission thisMissingPermission = CLUSTER_MANAGE;
gfsh.executeAndAssertThat(
""execute function  --region="" + regionName + "" --id="" + thisFunction.getId())
.containsOutput(""not authorized for "" + thisMissingPermission.toString()).statusIsError();
}
}","- FunctionService.registerFunction(luceneCreateIndexFunction);- FunctionService.registerFunction(luceneDescribeIndexFunction);- FunctionService.registerFunction(luceneDestroyIndexFunction);- FunctionService.registerFunction(luceneListIndexFunction);- FunctionService.registerFunction(luceneSearchIndexFunction);+ functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");+ functionStringMap.keySet().forEach(FunctionService::registerFunction);- FunctionService.registerFunction(dumpDirectoryFiles);+ FunctionService.registerFunction(new DumpDirectoryFiles());- FunctionService.registerFunction(luceneQueryFunction);- FunctionService.registerFunction(waitUntilFlushedFunction);- FunctionService.registerFunction(luceneGetPageFunction);",1
19742,3215fe50dd42c83a7a454dd36486843fe36eae4,ProjectKB,"public class main {
public void preWriteCheck() throws Exception {
}
}","public class main {
public void preWriteCheck() throws Exception {
}
}",+ if (endpoint.getComponent() != null) {+ },1
14552,8ffa920d3894634aa078f0fdf6b02d270262caf,ProjectKB,"public class main {
protected TransactionalState(Map<String, Object> conf, String id, String subroot) {
try {
conf = new HashMap<>(conf);
String transactionalRoot = (String)conf.get(Config.TRANSACTIONAL_ZOOKEEPER_ROOT);
String rootDir = transactionalRoot + ""/"" + id + ""/"" + subroot;
List<String> servers = (List<String>) getWithBackup(conf, Config.TRANSACTIONAL_ZOOKEEPER_SERVERS, Config.STORM_ZOOKEEPER_SERVERS);
Object port = getWithBackup(conf, Config.TRANSACTIONAL_ZOOKEEPER_PORT, Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo auth = new ZookeeperAuthInfo(conf);
CuratorFramework initter = CuratorUtils.newCuratorStarted(conf, servers, port, auth);
_zkAcls = Utils.getWorkerACL(conf);
try {
TransactionalState.createNode(initter, transactionalRoot, null, null, null);
} catch (KeeperException.NodeExistsException e) {
}
try {
TransactionalState.createNode(initter, rootDir, null, _zkAcls, null);
} catch (KeeperException.NodeExistsException e) {
}
initter.close();
_curator = CuratorUtils.newCuratorStarted(conf, servers, port, rootDir, auth);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}","public class main {
protected TransactionalState(Map<String, Object> conf, String id, String subroot) {
try {
conf = new HashMap<>(conf);
String transactionalRoot = (String)conf.get(Config.TRANSACTIONAL_ZOOKEEPER_ROOT);
String rootDir = transactionalRoot + ""/"" + id + ""/"" + subroot;
List<String> servers = (List<String>) getWithBackup(conf, Config.TRANSACTIONAL_ZOOKEEPER_SERVERS, Config.STORM_ZOOKEEPER_SERVERS);
Object port = getWithBackup(conf, Config.TRANSACTIONAL_ZOOKEEPER_PORT, Config.STORM_ZOOKEEPER_PORT);
ZookeeperAuthInfo auth = new ZookeeperAuthInfo(conf);
CuratorFramework initter = CuratorUtils.newCuratorStarted(conf, servers, port, auth, DaemonType.WORKER.getDefaultZkAcls(conf));
_zkAcls = Utils.getWorkerACL(conf);
try {
TransactionalState.createNode(initter, transactionalRoot, null, null, null);
} catch (KeeperException.NodeExistsException e) {
}
try {
TransactionalState.createNode(initter, rootDir, null, _zkAcls, null);
} catch (KeeperException.NodeExistsException e) {
}
initter.close();
_curator = CuratorUtils.newCuratorStarted(conf, servers, port, rootDir, auth, DaemonType.WORKER.getDefaultZkAcls(conf));
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}","- CuratorFramework initter = CuratorUtils.newCuratorStarted(conf, servers, port, auth);+ CuratorFramework initter = CuratorUtils.newCuratorStarted(conf, servers, port, auth, DaemonType.WORKER.getDefaultZkAcls(conf));- _curator = CuratorUtils.newCuratorStarted(conf, servers, port, rootDir, auth);+ _curator = CuratorUtils.newCuratorStarted(conf, servers, port, rootDir, auth, DaemonType.WORKER.getDefaultZkAcls(conf));",1
11542,2b0e96117d6f01eba0c18e2ff8df6a438e81972,ProjectKB,"public class main {
protected RouteBuilder createRouteBuilder() throws Exception {
return new RouteBuilder() {
@Override
public void configure() throws Exception {
JacksonDataFormat format = new JacksonDataFormat();
format.setAllowJacksonUnmarshallType(true);
from(""direct:backPojo"").unmarshal(format).to(""mock:reversePojo"");
}
}","public class main {
protected RouteBuilder createRouteBuilder() throws Exception {
return new RouteBuilder() {
@Override
public void configure() throws Exception {
JacksonDataFormat format = new JacksonDataFormat();
format.setAllowUnmarshallType(true);
from(""direct:backPojo"").unmarshal(format).to(""mock:reversePojo"");
}
}",- format.setAllowJacksonUnmarshallType(true);+ format.setAllowUnmarshallType(true);,1
1903,7b8fa90d96aaf751a3256fa755d5f17e081c20f,ProjectKB,"public class main {
public SecurityWebFilterChain build() {
if(this.built != null) {
throw new IllegalStateException(""This has already been built with the following stacktrace. "" + buildToString());
}
this.built = new RuntimeException(""First Build Invocation"").fillInStackTrace();
if(this.headers != null) {
this.headers.configure(this);
}
WebFilter securityContextRepositoryWebFilter = securityContextRepositoryWebFilter();
if(securityContextRepositoryWebFilter != null) {
this.webFilters.add(securityContextRepositoryWebFilter);
}
if(this.csrf != null) {
this.csrf.configure(this);
}
if(this.httpBasic != null) {
this.httpBasic.authenticationManager(this.authenticationManager);
this.httpBasic.configure(this);
}
if(this.formLogin != null) {
this.formLogin.authenticationManager(this.authenticationManager);
if(this.securityContextRepository != null) {
this.formLogin.securityContextRepository(this.securityContextRepository);
}
if(this.formLogin.authenticationEntryPoint == null) {
this.webFilters.add(new OrderedWebFilter(new LoginPageGeneratingWebFilter(), SecurityWebFiltersOrder.LOGIN_PAGE_GENERATING.getOrder()));
this.webFilters.add(new OrderedWebFilter(new LogoutPageGeneratingWebFilter(), SecurityWebFiltersOrder.LOGOUT_PAGE_GENERATING.getOrder()));
}
this.formLogin.configure(this);
}
if(this.logout != null) {
this.logout.configure(this);
}
this.requestCache.configure(this);
this.addFilterAt(new SecurityContextServerWebExchangeWebFilter(), SecurityWebFiltersOrder.SECURITY_CONTEXT_SERVER_WEB_EXCHANGE);
if(this.authorizeExchange != null) {
ServerAuthenticationEntryPoint authenticationEntryPoint = getAuthenticationEntryPoint();
ExceptionTranslationWebFilter exceptionTranslationWebFilter = new ExceptionTranslationWebFilter();
if(authenticationEntryPoint != null) {
exceptionTranslationWebFilter.setAuthenticationEntryPoint(
authenticationEntryPoint);
}
this.addFilterAt(exceptionTranslationWebFilter, SecurityWebFiltersOrder.EXCEPTION_TRANSLATION);
this.authorizeExchange.configure(this);
}
AnnotationAwareOrderComparator.sort(this.webFilters);
List<WebFilter> sortedWebFilters = new ArrayList<>();
this.webFilters.forEach( f -> {
if(f instanceof OrderedWebFilter) {
f = ((OrderedWebFilter) f).webFilter;
}
sortedWebFilters.add(f);
});
return new MatcherSecurityWebFilterChain(getSecurityMatcher(), sortedWebFilters);
}
}","public class main {
public SecurityWebFilterChain build() {
if(this.built != null) {
throw new IllegalStateException(""This has already been built with the following stacktrace. "" + buildToString());
}
this.built = new RuntimeException(""First Build Invocation"").fillInStackTrace();
if(this.headers != null) {
this.headers.configure(this);
}
WebFilter securityContextRepositoryWebFilter = securityContextRepositoryWebFilter();
if(securityContextRepositoryWebFilter != null) {
this.webFilters.add(securityContextRepositoryWebFilter);
}
if(this.csrf != null) {
this.csrf.configure(this);
}
if(this.httpBasic != null) {
this.httpBasic.authenticationManager(this.authenticationManager);
this.httpBasic.configure(this);
}
if(this.formLogin != null) {
this.formLogin.authenticationManager(this.authenticationManager);
if(this.securityContextRepository != null) {
this.formLogin.securityContextRepository(this.securityContextRepository);
}
if(this.formLogin.authenticationEntryPoint == null) {
this.webFilters.add(new OrderedWebFilter(new LoginPageGeneratingWebFilter(), SecurityWebFiltersOrder.LOGIN_PAGE_GENERATING.getOrder()));
this.webFilters.add(new OrderedWebFilter(new LogoutPageGeneratingWebFilter(), SecurityWebFiltersOrder.LOGOUT_PAGE_GENERATING.getOrder()));
}
this.formLogin.configure(this);
}
if(this.logout != null) {
this.logout.configure(this);
}
this.requestCache.configure(this);
this.addFilterAt(new SecurityContextServerWebExchangeWebFilter(), SecurityWebFiltersOrder.SECURITY_CONTEXT_SERVER_WEB_EXCHANGE);
if(this.authorizeExchange != null) {
ServerAuthenticationEntryPoint authenticationEntryPoint = getAuthenticationEntryPoint();
ExceptionTranslationWebFilter exceptionTranslationWebFilter = new ExceptionTranslationWebFilter();
if(authenticationEntryPoint != null) {
exceptionTranslationWebFilter.setAuthenticationEntryPoint(
authenticationEntryPoint);
}
if(accessDeniedHandler != null) {
exceptionTranslationWebFilter.setAccessDeniedHandler(accessDeniedHandler);
}
this.addFilterAt(exceptionTranslationWebFilter, SecurityWebFiltersOrder.EXCEPTION_TRANSLATION);
this.authorizeExchange.configure(this);
}
AnnotationAwareOrderComparator.sort(this.webFilters);
List<WebFilter> sortedWebFilters = new ArrayList<>();
this.webFilters.forEach( f -> {
if(f instanceof OrderedWebFilter) {
f = ((OrderedWebFilter) f).webFilter;
}
sortedWebFilters.add(f);
});
return new MatcherSecurityWebFilterChain(getSecurityMatcher(), sortedWebFilters);
}
}",+ if(accessDeniedHandler != null) {+ exceptionTranslationWebFilter.setAccessDeniedHandler(accessDeniedHandler);+ },1
5316,128360856d50d7b39473644e6c1c21ba11766195,ProjectKB,"public class main {
public static void afterClass() throws Exception {
System.clearProperty(""velocity.resourceloader.params.enabled"");
System.clearProperty(""velocity.resourceloader.solr.enabled"");
}
}","public class main {
public static void afterClass() throws Exception {
}
}","- System.clearProperty(""velocity.resourceloader.params.enabled"");- System.clearProperty(""velocity.resourceloader.solr.enabled"");",1
3707,36fb466afd64894170fa5e2e030ce6895120b1a,ProjectKB,"public class main {
public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {
if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.Standard,
""Either selfRegUnmatching or createUnmatching, not both"")).
addPropertyNode(""selfRegUnmatching"").
addPropertyNode(""createUnmatching"").addConstraintViolation();
return false;
}
long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();
if (!value.getItems().isEmpty() && connObjectKeys != 1) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping, ""Single ConnObjectKey mapping is required"")).
addPropertyNode(""connObjectKey.size"").addConstraintViolation();
return false;
}
final boolean[] isValid = new boolean[] { true };
long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();
if (passwords > 0) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping, ""No password mapping is allowed"")).
addPropertyNode(""password.size"").addConstraintViolation();
isValid[0] = false;
}
value.getItems().forEach(item -> {
item.getTransformers().stream().
filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).
forEach(transformer -> {
Class<?> actionsClass = null;
boolean isAssignable = false;
try {
actionsClass = Class.forName(transformer.getBody());
isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);
} catch (Exception e) {
LOG.error(""Invalid ItemTransformer specified: {}"", transformer.getBody(), e);
}
if (actionsClass == null || !isAssignable) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping,
""Invalid item trasformer class name"")).
addPropertyNode(""itemTransformers"").addConstraintViolation();
isValid[0] = false;
}
});
}
}","public class main {
public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {
context.disableDefaultConstraintViolation();
if (isHtml(saml2IdP.getKey())) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidKey, ""Invalid key"")).
addPropertyNode(""key"").addConstraintViolation();
return false;
}
if (saml2IdP.isSelfRegUnmatching() && saml2IdP.isCreateUnmatching()) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.Standard,
""Either selfRegUnmatching or createUnmatching, not both"")).
addPropertyNode(""selfRegUnmatching"").
addPropertyNode(""createUnmatching"").addConstraintViolation();
return false;
}
long connObjectKeys = saml2IdP.getItems().stream().filter(Item::isConnObjectKey).count();
if (!saml2IdP.getItems().isEmpty() && connObjectKeys != 1) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping, ""Single ConnObjectKey mapping is required"")).
addPropertyNode(""connObjectKey.size"").addConstraintViolation();
return false;
}
final boolean[] isValid = new boolean[] { true };
long passwords = saml2IdP.getItems().stream().filter(Item::isPassword).count();
if (passwords > 0) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping, ""No password mapping is allowed"")).
addPropertyNode(""password.size"").addConstraintViolation();
isValid[0] = false;
}
saml2IdP.getItems().forEach(item -> {
item.getTransformers().stream().
filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).
forEach(transformer -> {
Class<?> actionsClass = null;
boolean isAssignable = false;
try {
actionsClass = Class.forName(transformer.getBody());
isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);
} catch (Exception e) {
LOG.error(""Invalid ItemTransformer specified: {}"", transformer.getBody(), e);
}
if (actionsClass == null || !isAssignable) {
context.buildConstraintViolationWithTemplate(
getTemplate(EntityViolationType.InvalidMapping,
""Invalid item trasformer class name"")).
addPropertyNode(""itemTransformers"").addConstraintViolation();
isValid[0] = false;
}
});
}
}","- public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {+ public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {+ context.disableDefaultConstraintViolation();+ if (isHtml(saml2IdP.getKey())) {+ context.buildConstraintViolationWithTemplate(+ getTemplate(EntityViolationType.InvalidKey, ""Invalid key"")).+ addPropertyNode(""key"").addConstraintViolation();+ return false;+ }- if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {+ if (saml2IdP.isSelfRegUnmatching() && saml2IdP.isCreateUnmatching()) {- long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();+ long connObjectKeys = saml2IdP.getItems().stream().filter(Item::isConnObjectKey).count();- if (!value.getItems().isEmpty() && connObjectKeys != 1) {+ if (!saml2IdP.getItems().isEmpty() && connObjectKeys != 1) {- long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();+ long passwords = saml2IdP.getItems().stream().filter(Item::isPassword).count();- value.getItems().forEach(item -> {+ saml2IdP.getItems().forEach(item -> {",1
14481,18f07455ea9be4166dabb9b590f5a037374830b,ProjectKB,"public class main {
public static void setUpBeforeClass() throws Exception {
conf = TEST_UTIL.getConfiguration();
conf.setBoolean(RESTServer.REST_CSRF_ENABLED_KEY, csrfEnabled);
extraHdr = new BasicHeader(RESTServer.REST_CSRF_CUSTOM_HEADER_DEFAULT, """");
TEST_UTIL.startMiniCluster();
REST_TEST_UTIL.startServletContainer(conf);
context = JAXBContext.newInstance(
CellModel.class,
CellSetModel.class,
RowModel.class);
marshaller = context.createMarshaller();
unmarshaller = context.createUnmarshaller();
client = new Client(new Cluster().add(""localhost"", REST_TEST_UTIL.getServletPort()));
Admin admin = TEST_UTIL.getAdmin();
if (admin.tableExists(TABLE)) {
return;
}
HTableDescriptor htd = new HTableDescriptor(TABLE);
htd.addFamily(new HColumnDescriptor(CFA));
htd.addFamily(new HColumnDescriptor(CFB));
admin.createTable(htd);
}
}","public class main {
public static void setUpBeforeClass() throws Exception {
conf = TEST_UTIL.getConfiguration();
conf.setBoolean(RESTServer.REST_CSRF_ENABLED_KEY, csrfEnabled);
if (csrfEnabled) {
conf.set(RESTServer.REST_CSRF_BROWSER_USERAGENTS_REGEX_KEY, "".*"");
}
extraHdr = new BasicHeader(RESTServer.REST_CSRF_CUSTOM_HEADER_DEFAULT, """");
TEST_UTIL.startMiniCluster();
REST_TEST_UTIL.startServletContainer(conf);
context = JAXBContext.newInstance(
CellModel.class,
CellSetModel.class,
RowModel.class);
marshaller = context.createMarshaller();
unmarshaller = context.createUnmarshaller();
client = new Client(new Cluster().add(""localhost"", REST_TEST_UTIL.getServletPort()));
Admin admin = TEST_UTIL.getAdmin();
if (admin.tableExists(TABLE)) {
return;
}
HTableDescriptor htd = new HTableDescriptor(TABLE);
htd.addFamily(new HColumnDescriptor(CFA));
htd.addFamily(new HColumnDescriptor(CFB));
admin.createTable(htd);
}
}","+ if (csrfEnabled) {+ conf.set(RESTServer.REST_CSRF_BROWSER_USERAGENTS_REGEX_KEY, "".*"");+ }",1
14840,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
protected void compile(String[] args) {
String[] commandArray = null;
File tmpFile = null;
try {
String myos = System.getProperty(""os.name"");
if (myos.toLowerCase(Locale.ENGLISH).contains(""windows"")
&& args.length > MAX_FILES_ON_COMMAND_LINE) {
BufferedWriter out = null;
try {
tmpFile = FileUtils.getFileUtils().createTempFile(""jikes"",
""tmp"", null, false, true);
out = new BufferedWriter(new FileWriter(tmpFile));
for (String arg : args) {
out.write(arg);
out.newLine();
}
out.flush();
commandArray = new String[] {command,
""@"" + tmpFile.getAbsolutePath()};
} catch (IOException e) {
throw new BuildException(""Error creating temporary file"",
e);
} finally {
FileUtils.close(out);
}
} else {
commandArray = new String[args.length + 1];
commandArray[0] = command;
System.arraycopy(args, 0, commandArray, 1, args.length);
}
try {
Execute exe = new Execute(jop);
exe.setAntRun(project);
exe.setWorkingDirectory(project.getBaseDir());
exe.setCommandline(commandArray);
exe.execute();
} catch (IOException e) {
throw new BuildException(""Error running Jikes compiler"", e);
}
} finally {
if (tmpFile != null) {
if (!tmpFile.delete()) {
tmpFile.deleteOnExit();
}
}
}
}
}","public class main {
protected void compile(String[] args) {
String[] commandArray = null;
File tmpFile = null;
try {
String myos = System.getProperty(""os.name"");
if (myos.toLowerCase(Locale.ENGLISH).contains(""windows"")
&& args.length > MAX_FILES_ON_COMMAND_LINE) {
BufferedWriter out = null;
try {
tmpFile = FileUtils.getFileUtils().createTempFile(project, ""jikes"",
""tmp"", null, false, true);
out = new BufferedWriter(new FileWriter(tmpFile));
for (String arg : args) {
out.write(arg);
out.newLine();
}
out.flush();
commandArray = new String[] {command,
""@"" + tmpFile.getAbsolutePath()};
} catch (IOException e) {
throw new BuildException(""Error creating temporary file"",
e);
} finally {
FileUtils.close(out);
}
} else {
commandArray = new String[args.length + 1];
commandArray[0] = command;
System.arraycopy(args, 0, commandArray, 1, args.length);
}
try {
Execute exe = new Execute(jop);
exe.setAntRun(project);
exe.setWorkingDirectory(project.getBaseDir());
exe.setCommandline(commandArray);
exe.execute();
} catch (IOException e) {
throw new BuildException(""Error running Jikes compiler"", e);
}
} finally {
if (tmpFile != null) {
if (!tmpFile.delete()) {
tmpFile.deleteOnExit();
}
}
}
}
}","- tmpFile = FileUtils.getFileUtils().createTempFile(""jikes"",+ tmpFile = FileUtils.getFileUtils().createTempFile(project, ""jikes"",",1
594,8a06bd1ccef382461c7b0a63f2012f4aeac9075,ProjectKB,"public class main {
public boolean initiateConnection(Socket sock, Long sid) {
DataOutputStream dout = null;
try {
dout = new DataOutputStream(sock.getOutputStream());
dout.writeLong(self.getId());
dout.flush();
} catch (IOException e) {
LOG.warn(""Ignoring exception reading or writing challenge: "", e);
closeSocket(sock);
return false;
}
if (sid > self.getId()) {
LOG.info(""Have smaller server identifier, so dropping the "" +
""connection: ("" + sid + "", "" + self.getId() + "")"");
closeSocket(sock);
} else {
SendWorker sw = new SendWorker(sock, sid);
RecvWorker rw = new RecvWorker(sock, sid, sw);
sw.setRecv(rw);
SendWorker vsw = senderWorkerMap.get(sid);
if(vsw != null)
vsw.finish();
senderWorkerMap.put(sid, sw);
if (!queueSendMap.containsKey(sid)) {
queueSendMap.put(sid, new ArrayBlockingQueue<ByteBuffer>(
SEND_CAPACITY));
}
sw.start();
rw.start();
return true;
}
return false;
}
}","public class main {
public void initiateConnection(final Socket sock, final Long sid) {
try {
startConnection(sock, sid);
} catch (IOException e) {
LOG.error(""Exception while connecting, id: {}, addr: {}, closing learner connection"",
new Object[] { sid, sock.getRemoteSocketAddress() }
}","- public boolean initiateConnection(Socket sock, Long sid) {+ public void initiateConnection(final Socket sock, final Long sid) {- DataOutputStream dout = null;+ startConnection(sock, sid);- dout = new DataOutputStream(sock.getOutputStream());- dout.writeLong(self.getId());- dout.flush();+ LOG.error(""Exception while connecting, id: {}, addr: {}, closing learner connection"",+ new Object[] { sid, sock.getRemoteSocketAddress() }- LOG.warn(""Ignoring exception reading or writing challenge: "", e);- closeSocket(sock);- return false;- }- if (sid > self.getId()) {- LOG.info(""Have smaller server identifier, so dropping the "" +- ""connection: ("" + sid + "", "" + self.getId() + "")"");- closeSocket(sock);- } else {- SendWorker sw = new SendWorker(sock, sid);- RecvWorker rw = new RecvWorker(sock, sid, sw);- sw.setRecv(rw);- SendWorker vsw = senderWorkerMap.get(sid);- if(vsw != null)- vsw.finish();- senderWorkerMap.put(sid, sw);- if (!queueSendMap.containsKey(sid)) {- queueSendMap.put(sid, new ArrayBlockingQueue<ByteBuffer>(- SEND_CAPACITY));- }- sw.start();- rw.start();- return true;- }- return false;- }",1
9416,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
public void tearDown() throws Exception {
executor.shutdown();
service.stop();
service.waitUntilStopped();
}
}","public class main {
public void tearDown() throws Exception {
executor.shutdown();
service.stop();
service.waitUntilStopped();
}
public void configureConnectorAndStart(String bindAddress) throws Exception {
if (bindAddress.contains(""ssl"")) {
bindAddress += bindAddress.contains(""?"") ? ""&transport.verifyHostName=false"" : ""?transport.verifyHostName=false"";
}
connector = service.addConnector(bindAddress);
connectionUri = connector.getPublishableConnectString();
if (connectionUri.contains(""ssl"")) {
connectionUri += connectionUri.contains(""?"") ? ""&socket.verifyHostName=false"" : ""?socket.verifyHostName=false"";
}
}","+ }+ public void configureConnectorAndStart(String bindAddress) throws Exception {+ if (bindAddress.contains(""ssl"")) {+ bindAddress += bindAddress.contains(""?"") ? ""&transport.verifyHostName=false"" : ""?transport.verifyHostName=false"";+ }+ connector = service.addConnector(bindAddress);+ connectionUri = connector.getPublishableConnectString();+ if (connectionUri.contains(""ssl"")) {+ connectionUri += connectionUri.contains(""?"") ? ""&socket.verifyHostName=false"" : ""?socket.verifyHostName=false"";",1
12792,44e6a3036e5a11d90b60c142cf51ed74b792de31,ProjectKB,"public class main {
public void testHttpSendStringAndReceiveJavaBody() throws Exception {
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
});
context.start();
MyCoolBean reply = template.requestBody(getAhcEndpointUri(), ""Hello World"", MyCoolBean.class);
assertEquals(456, reply.getId());
assertEquals(""Camel rocks"", reply.getName());
}
}","public class main {
public void testHttpSendStringAndReceiveJavaBody() throws Exception {
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(true);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
});
context.start();
MyCoolBean reply = template.requestBody(getAhcEndpointUri(), ""Hello World"", MyCoolBean.class);
assertEquals(456, reply.getId());
assertEquals(""Camel rocks"", reply.getName());
}
}","+ AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);+ ahc.setAllowJavaSerializedObject(true);",1
2128,6d63958821232699f0a8423d9b21d4915bfba64,ProjectKB,"public class main {
public static void afterTests() throws Exception {
JSONTestUtil.failRepeatedKeys = false;
if (servers != null) {
servers.stop();
servers = null;
}
}
}","public class main {
public static void afterTests() throws Exception {
JSONTestUtil.failRepeatedKeys = false;
if (servers != null) {
servers.stop();
servers = null;
}
systemClearPropertySolrDisableShardsWhitelist();
}
}",+ systemClearPropertySolrDisableShardsWhitelist();,1
7668,702bf1,ProjectKB,"public class main {
private void findNext() {
next=null;
for(; pos< size; pos++ ) {
MessageBytes n1=headers.getName( pos );
if( n1.equalsIgnoreCase( name )) {
next=headers.getValue( pos );
break;
}
}
pos++;
}
}","public class main {
private void findNext() {
next=null;
for(; pos< size; pos++ ) {
next=headers.getName( pos ).toString();
for( int j=0; j<pos ; j++ ) {
if( headers.getName( j ).equalsIgnoreCase( next )) {
next=null;
break;
}
}
if( next!=null ) {
break;
}
}
pos++;
}
}",- MessageBytes n1=headers.getName( pos );- if( n1.equalsIgnoreCase( name )) {- next=headers.getValue( pos );+ next=headers.getName( pos ).toString();+ for( int j=0; j<pos ; j++ ) {+ if( headers.getName( j ).equalsIgnoreCase( next )) {+ next=null;+ break;+ }+ }+ if( next!=null ) {,1
929,e9db95831b9db69fbc0bef499b0d3f41bc6448f,ProjectKB,"public class main {
public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.start(false);
if (!jettys.contains(jetty)) jettys.add(jetty);
return jetty;
}
public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.stop();
jettys.remove(jetty);
return jetty;
}
public void uploadConfigSet(Path configDir, String configName) throws IOException, KeeperException, InterruptedException {
try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),
AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {
ZkConfigManager manager = new ZkConfigManager(zkClient);
manager.uploadConfigDir(configDir, configName);
}
}
public void deleteAllCollections() throws Exception {
try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {
final CountDownLatch latch = new CountDownLatch(1);
reader.registerCloudCollectionsListener(new CloudCollectionsListener() {
@Override
public void onChange(Set<String> oldCollections, Set<String> newCollections) {
if (newCollections != null && newCollections.size() == 0) {
latch.countDown();
}
}
});
reader.createClusterStateWatchersAndUpdate();       reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);
for (String collection : reader.getClusterState().getCollectionStates().keySet()) {
CollectionAdminRequest.deleteCollection(collection).process(solrClient);
}
}","public class main {
public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.start(false);
if (!jettys.contains(jetty)) jettys.add(jetty);
return jetty;
}
public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.stop();
jettys.remove(jetty);
return jetty;
}
}","- }- public void uploadConfigSet(Path configDir, String configName) throws IOException, KeeperException, InterruptedException {- try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),- AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {- ZkConfigManager manager = new ZkConfigManager(zkClient);- manager.uploadConfigDir(configDir, configName);- }- }- public void deleteAllCollections() throws Exception {- try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {- final CountDownLatch latch = new CountDownLatch(1);- reader.registerCloudCollectionsListener(new CloudCollectionsListener() {- @Override- public void onChange(Set<String> oldCollections, Set<String> newCollections) {- if (newCollections != null && newCollections.size() == 0) {- latch.countDown();- }- }- });- reader.createClusterStateWatchersAndUpdate();       reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);- for (String collection : reader.getClusterState().getCollectionStates().keySet()) {- CollectionAdminRequest.deleteCollection(collection).process(solrClient);",1
8384,6a79d35d6654d895d0a4b73b3a9282ec9aaeeb06,ProjectKB,"public class main {
private int extend(int v, final int t) {
int vt = (1 << (t - 1));
while (v < vt) {
vt = (-1 << t) + 1;
v += vt;
}
return v;
}
}","public class main {
private int extend(int v, final int t) {
int vt = (1 << (t - 1));
if (v < vt) {
vt = (-1 << t) + 1;
v += vt;
}
return v;
}
}",- while (v < vt) {+ if (v < vt) {,1
273,8599ab5bdb761bb99d41a975d689f74c12e4892b,ProjectKB,"public class main {
protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
if (receivedClosingHandshake) {
in.skipBytes(actualReadableBytes());
return;
}
switch (state) {
case READING_FIRST:
if (!in.isReadable()) {
return;
}
framePayloadLength = 0;
byte b = in.readByte();
frameFinalFlag = (b & 0x80) != 0;
frameRsv = (b & 0x70) >> 4;
frameOpcode = b & 0x0F;
if (logger.isDebugEnabled()) {
logger.debug(""Decoding WebSocket Frame opCode={}"", frameOpcode);
}
state = State.READING_SECOND;
case READING_SECOND:
if (!in.isReadable()) {
return;
}
b = in.readByte();
boolean frameMasked = (b & 0x80) != 0;
framePayloadLen1 = b & 0x7F;
if (frameRsv != 0 && !allowExtensions) {
protocolViolation(ctx, ""RSV != 0 and no extension negotiated, RSV:"" + frameRsv);
return;
}
if (maskedPayload && !frameMasked) {
protocolViolation(ctx, ""unmasked client to server frame"");
return;
}
if (frameOpcode > 7) {
if (!frameFinalFlag) {
protocolViolation(ctx, ""fragmented control frame"");
return;
}
if (framePayloadLen1 > 125) {
protocolViolation(ctx, ""control frame with payload length > 125 octets"");
return;
}
if (!(frameOpcode == OPCODE_CLOSE || frameOpcode == OPCODE_PING
|| frameOpcode == OPCODE_PONG)) {
protocolViolation(ctx, ""control frame using reserved opcode "" + frameOpcode);
return;
}
if (frameOpcode == 8 && framePayloadLen1 == 1) {
protocolViolation(ctx, ""received close control frame with payload len 1"");
return;
}
} else {                                                 if (!(frameOpcode == OPCODE_CONT || frameOpcode == OPCODE_TEXT
|| frameOpcode == OPCODE_BINARY)) {
protocolViolation(ctx, ""data frame using reserved opcode "" + frameOpcode);
return;
}
if (fragmentedFramesCount == 0 && frameOpcode == OPCODE_CONT) {
protocolViolation(ctx, ""received continuation data frame outside fragmented message"");
return;
}
if (fragmentedFramesCount != 0 && frameOpcode != OPCODE_CONT && frameOpcode != OPCODE_PING) {
protocolViolation(ctx,
""received non-continuation data frame while inside fragmented message"");
return;
}
}
state = State.READING_SIZE;
case READING_SIZE:
if (framePayloadLen1 == 126) {
if (in.readableBytes() < 2) {
return;
}
framePayloadLength = in.readUnsignedShort();
if (framePayloadLength < 126) {
protocolViolation(ctx, ""invalid data frame length (not using minimal length encoding)"");
return;
}
} else if (framePayloadLen1 == 127) {
if (in.readableBytes() < 8) {
return;
}
framePayloadLength = in.readLong();
if (framePayloadLength < 65536) {
protocolViolation(ctx, ""invalid data frame length (not using minimal length encoding)"");
return;
}
} else {
framePayloadLength = framePayloadLen1;
}
if (framePayloadLength > maxFramePayloadLength) {
protocolViolation(ctx, ""Max frame length of "" + maxFramePayloadLength + "" has been exceeded."");
return;
}
if (logger.isDebugEnabled()) {
logger.debug(""Decoding WebSocket Frame length={}"", framePayloadLength);
}
state = State.MASKING_KEY;
case MASKING_KEY:
if (maskedPayload) {
if (in.readableBytes() < 4) {
return;
}
if (maskingKey == null) {
maskingKey = new byte[4];
}
in.readBytes(maskingKey);
}
state = State.PAYLOAD;
case PAYLOAD:
if (in.readableBytes() < framePayloadLength) {
return;
}
ByteBuf payloadBuffer = null;
try {
payloadBuffer = readBytes(ctx.alloc(), in, toFrameLength(framePayloadLength));
state = State.READING_FIRST;
if (maskedPayload) {
unmask(payloadBuffer);
}
if (frameOpcode == OPCODE_PING) {
out.add(new PingWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
if (frameOpcode == OPCODE_PONG) {
out.add(new PongWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
if (frameOpcode == OPCODE_CLOSE) {
checkCloseFrameBody(ctx, payloadBuffer);
receivedClosingHandshake = true;
out.add(new CloseWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
String aggregatedText = null;
if (frameFinalFlag) {
if (frameOpcode != OPCODE_PING) {
fragmentedFramesCount = 0;
if (frameOpcode == OPCODE_TEXT || fragmentedFramesText != null) {
checkUTF8String(ctx, payloadBuffer);
aggregatedText = fragmentedFramesText.toString();
fragmentedFramesText = null;
}
}
} else {
if (fragmentedFramesCount == 0) {
fragmentedFramesText = null;
if (frameOpcode == OPCODE_TEXT) {
checkUTF8String(ctx, payloadBuffer);
}
} else {
if (fragmentedFramesText != null) {
checkUTF8String(ctx, payloadBuffer);
}
}
fragmentedFramesCount++;
}
if (frameOpcode == OPCODE_TEXT) {
out.add(new TextWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
} else if (frameOpcode == OPCODE_BINARY) {
out.add(new BinaryWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
} else if (frameOpcode == OPCODE_CONT) {
out.add(new ContinuationWebSocketFrame(frameFinalFlag, frameRsv,
payloadBuffer, aggregatedText));
payloadBuffer = null;
return;
} else {
throw new UnsupportedOperationException(""Cannot decode web socket frame with opcode: ""
+ frameOpcode);
}
} finally {
if (payloadBuffer != null) {
payloadBuffer.release();
}
}
case CORRUPT:
if (in.isReadable()) {
in.readByte();
}
}","public class main {
protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
if (receivedClosingHandshake) {
in.skipBytes(actualReadableBytes());
return;
}
switch (state) {
case READING_FIRST:
if (!in.isReadable()) {
return;
}
framePayloadLength = 0;
byte b = in.readByte();
frameFinalFlag = (b & 0x80) != 0;
frameRsv = (b & 0x70) >> 4;
frameOpcode = b & 0x0F;
if (logger.isDebugEnabled()) {
logger.debug(""Decoding WebSocket Frame opCode={}"", frameOpcode);
}
state = State.READING_SECOND;
case READING_SECOND:
if (!in.isReadable()) {
return;
}
b = in.readByte();
boolean frameMasked = (b & 0x80) != 0;
framePayloadLen1 = b & 0x7F;
if (frameRsv != 0 && !allowExtensions) {
protocolViolation(ctx, ""RSV != 0 and no extension negotiated, RSV:"" + frameRsv);
return;
}
if (maskedPayload && !frameMasked) {
protocolViolation(ctx, ""unmasked client to server frame"");
return;
}
if (frameOpcode > 7) {
if (!frameFinalFlag) {
protocolViolation(ctx, ""fragmented control frame"");
return;
}
if (framePayloadLen1 > 125) {
protocolViolation(ctx, ""control frame with payload length > 125 octets"");
return;
}
if (!(frameOpcode == OPCODE_CLOSE || frameOpcode == OPCODE_PING
|| frameOpcode == OPCODE_PONG)) {
protocolViolation(ctx, ""control frame using reserved opcode "" + frameOpcode);
return;
}
if (frameOpcode == 8 && framePayloadLen1 == 1) {
protocolViolation(ctx, ""received close control frame with payload len 1"");
return;
}
} else {                                                 if (!(frameOpcode == OPCODE_CONT || frameOpcode == OPCODE_TEXT
|| frameOpcode == OPCODE_BINARY)) {
protocolViolation(ctx, ""data frame using reserved opcode "" + frameOpcode);
return;
}
if (fragmentedFramesCount == 0 && frameOpcode == OPCODE_CONT) {
protocolViolation(ctx, ""received continuation data frame outside fragmented message"");
return;
}
if (fragmentedFramesCount != 0 && frameOpcode != OPCODE_CONT && frameOpcode != OPCODE_PING) {
protocolViolation(ctx,
""received non-continuation data frame while inside fragmented message"");
return;
}
}
state = State.READING_SIZE;
case READING_SIZE:
if (framePayloadLen1 == 126) {
if (in.readableBytes() < 2) {
return;
}
framePayloadLength = in.readUnsignedShort();
if (framePayloadLength < 126) {
protocolViolation(ctx, ""invalid data frame length (not using minimal length encoding)"");
return;
}
} else if (framePayloadLen1 == 127) {
if (in.readableBytes() < 8) {
return;
}
framePayloadLength = in.readLong();
if (framePayloadLength < 65536) {
protocolViolation(ctx, ""invalid data frame length (not using minimal length encoding)"");
return;
}
} else {
framePayloadLength = framePayloadLen1;
}
if (framePayloadLength > maxFramePayloadLength) {
protocolViolation(ctx, ""Max frame length of "" + maxFramePayloadLength + "" has been exceeded."");
return;
}
if (logger.isDebugEnabled()) {
logger.debug(""Decoding WebSocket Frame length={}"", framePayloadLength);
}
state = State.MASKING_KEY;
case MASKING_KEY:
if (maskedPayload) {
if (in.readableBytes() < 4) {
return;
}
if (maskingKey == null) {
maskingKey = new byte[4];
}
in.readBytes(maskingKey);
}
state = State.PAYLOAD;
case PAYLOAD:
if (in.readableBytes() < framePayloadLength) {
return;
}
ByteBuf payloadBuffer = null;
try {
payloadBuffer = readBytes(ctx.alloc(), in, toFrameLength(framePayloadLength));
state = State.READING_FIRST;
if (maskedPayload) {
unmask(payloadBuffer);
}
if (frameOpcode == OPCODE_PING) {
out.add(new PingWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
if (frameOpcode == OPCODE_PONG) {
out.add(new PongWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
if (frameOpcode == OPCODE_CLOSE) {
checkCloseFrameBody(ctx, payloadBuffer);
receivedClosingHandshake = true;
out.add(new CloseWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
}
if (frameFinalFlag) {
if (frameOpcode != OPCODE_PING) {
fragmentedFramesCount = 0;
if (frameOpcode == OPCODE_TEXT ||
(utf8Validator != null && utf8Validator.isChecking())) {
checkUTF8String(ctx, payloadBuffer);
utf8Validator.finish();
}
}
} else {
if (fragmentedFramesCount == 0) {
if (frameOpcode == OPCODE_TEXT) {
checkUTF8String(ctx, payloadBuffer);
}
} else {
if (utf8Validator != null && utf8Validator.isChecking()) {
checkUTF8String(ctx, payloadBuffer);
}
}
fragmentedFramesCount++;
}
if (frameOpcode == OPCODE_TEXT) {
out.add(new TextWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
} else if (frameOpcode == OPCODE_BINARY) {
out.add(new BinaryWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));
payloadBuffer = null;
return;
} else if (frameOpcode == OPCODE_CONT) {
out.add(new ContinuationWebSocketFrame(frameFinalFlag, frameRsv,
payloadBuffer));
payloadBuffer = null;
return;
} else {
throw new UnsupportedOperationException(""Cannot decode web socket frame with opcode: ""
+ frameOpcode);
}
} finally {
if (payloadBuffer != null) {
payloadBuffer.release();
}
}
case CORRUPT:
if (in.isReadable()) {
in.readByte();
}
}","- String aggregatedText = null;- if (frameOpcode == OPCODE_TEXT || fragmentedFramesText != null) {+ if (frameOpcode == OPCODE_TEXT ||+ (utf8Validator != null && utf8Validator.isChecking())) {+ utf8Validator.finish();- aggregatedText = fragmentedFramesText.toString();- fragmentedFramesText = null;- fragmentedFramesText = null;- if (fragmentedFramesText != null) {+ if (utf8Validator != null && utf8Validator.isChecking()) {- payloadBuffer, aggregatedText));+ payloadBuffer));",1
4936,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.groups().group(group.getId()).roles().clientLevel(realmAccessClient.getId()).remove(Collections.<RoleRepresentation>emptyList());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.groups().group(group.getId()).roles().clientLevel(realmAccessClient.getId()).remove(Collections.<RoleRepresentation>emptyList());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
8911,cac0e710bf2b8bed9c602fc597e9de1d8903abed,ProjectKB,"public class main {
public void onMessageEncoded(List<ByteBuf> messageChunks, long requestId) {
if (!symmetricHandlerAdded) {
UascServerSymmetricHandler symmetricHandler =
new UascServerSymmetricHandler(
stackServer,
serializationQueue,
secureChannel
);
ctx.pipeline().addBefore(ctx.name(), null, symmetricHandler);
symmetricHandlerAdded = true;
}
CompositeByteBuf chunkComposite = BufferUtil.compositeBuffer();
for (ByteBuf chunk : messageChunks) {
chunkComposite.addComponent(chunk);
chunkComposite.writerIndex(chunkComposite.writerIndex() + chunk.readableBytes());
}
ctx.writeAndFlush(chunkComposite, ctx.voidPromise());
logger.debug(""Sent OpenSecureChannelResponse."");
}
}
);
} catch (UaException e) {
logger.error(""Error installing security token: {}"", e.getStatusCode(), e);
ctx.close();
} catch (UaSerializationException e) {
ctx.fireExceptionCaught(e);
} finally {
messageBuffer.release();
}
});
}
private OpenSecureChannelResponse openSecureChannel(
ChannelHandlerContext ctx,
OpenSecureChannelRequest request
) throws UaException {
SecurityTokenRequestType requestType = request.getRequestType();
if (requestType == SecurityTokenRequestType.Issue) {
secureChannel.setMessageSecurityMode(request.getSecurityMode());
String endpointUrl = ctx.channel().attr(UascServerHelloHandler.ENDPOINT_URL_KEY).get();
EndpointDescription endpoint = stackServer.getEndpointDescriptions()
.stream()
.filter(e -> {
boolean transportMatch = Objects.equals(
e.getTransportProfileUri(),
transportProfile.getUri()
);
boolean pathMatch = Objects.equals(
EndpointUtil.getPath(e.getEndpointUrl()),
EndpointUtil.getPath(endpointUrl)
);
boolean securityPolicyMatch = Objects.equals(
e.getSecurityPolicyUri(),
secureChannel.getSecurityPolicy().getUri()
);
boolean securityModeMatch = Objects.equals(
e.getSecurityMode(),
request.getSecurityMode()
);
return transportMatch && pathMatch && securityPolicyMatch && securityModeMatch;
})
.findFirst()
.orElseThrow(() -> {
String message = String.format(
""no matching endpoint found: transportProfile=%s, "" +
""endpointUrl=%s, securityPolicy=%s, securityMode=%s"",
transportProfile,
endpointUrl,
secureChannel.getSecurityPolicy(),
request.getSecurityMode()
);
return new UaException(StatusCodes.Bad_SecurityChecksFailed, message);
});
ctx.channel().attr(ENDPOINT_KEY).set(endpoint);
}
}","public class main {
public void onMessageEncoded(List<ByteBuf> messageChunks, long requestId) {
if (!symmetricHandlerAdded) {
UascServerSymmetricHandler symmetricHandler =
new UascServerSymmetricHandler(
stackServer,
serializationQueue,
secureChannel
);
ctx.pipeline().addBefore(ctx.name(), null, symmetricHandler);
symmetricHandlerAdded = true;
}
CompositeByteBuf chunkComposite = BufferUtil.compositeBuffer();
for (ByteBuf chunk : messageChunks) {
chunkComposite.addComponent(chunk);
chunkComposite.writerIndex(chunkComposite.writerIndex() + chunk.readableBytes());
}
ctx.writeAndFlush(chunkComposite, ctx.voidPromise());
logger.debug(""Sent OpenSecureChannelResponse."");
}
}
);
} catch (UaException e) {
logger.error(""Error installing security token: {}"", e.getStatusCode(), e);
ctx.close();
} catch (UaSerializationException e) {
ctx.fireExceptionCaught(e);
} finally {
messageBuffer.release();
}
});
}
private OpenSecureChannelResponse openSecureChannel(
ChannelHandlerContext ctx,
OpenSecureChannelRequest request
) throws UaException {
SecurityTokenRequestType requestType = request.getRequestType();
if (requestType == SecurityTokenRequestType.Issue) {
secureChannel.setMessageSecurityMode(request.getSecurityMode());
String endpointUrl = ctx.channel().attr(UascServerHelloHandler.ENDPOINT_URL_KEY).get();
EndpointDescription endpoint = stackServer.getEndpointDescriptions()
.stream()
.filter(e -> {
boolean transportMatch = Objects.equals(
e.getTransportProfileUri(),
transportProfile.getUri()
);
boolean pathMatch = Objects.equals(
EndpointUtil.getPath(e.getEndpointUrl()),
EndpointUtil.getPath(endpointUrl)
);
boolean securityPolicyMatch = Objects.equals(
e.getSecurityPolicyUri(),
secureChannel.getSecurityPolicy().getUri()
);
boolean securityModeMatch = Objects.equals(
e.getSecurityMode(),
request.getSecurityMode()
);
return transportMatch && pathMatch && securityPolicyMatch && securityModeMatch;
}
}","- })- .findFirst()- .orElseThrow(() -> {- String message = String.format(- ""no matching endpoint found: transportProfile=%s, "" +- ""endpointUrl=%s, securityPolicy=%s, securityMode=%s"",- transportProfile,- endpointUrl,- secureChannel.getSecurityPolicy(),- request.getSecurityMode()- );- return new UaException(StatusCodes.Bad_SecurityChecksFailed, message);- });- ctx.channel().attr(ENDPOINT_KEY).set(endpoint);",1
19735,73e881ad935e5aa6080b90585ac8dc8ddfc377e,ProjectKB,"public class main {
private void checkStatus(SSLEngineResult res) throws SSLException {
SSLEngineResult.Status status = res.getStatus();
if (status == SSLEngineResult.Status.BUFFER_OVERFLOW) {
throw new SSLException(""SSLEngine error during decrypt: "" + status + "" inNetBuffer: "" + inNetBuffer
+ ""appBuffer: "" + appBuffer);
}
}
void handshake(NextFilter nextFilter) throws SSLException {
for (;;) {
switch (handshakeStatus) {
case FINISHED:
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""{} processing the FINISHED state"", sslFilter.getSessionInfo(session));
}
session.setAttribute(SslFilter.SSL_SESSION, sslEngine.getSession());
handshakeComplete = true;
if (firstSSLNegociation) {
firstSSLNegociation = false;
nextFilter.event(session, SslEvent.SECURED);
}
if (LOGGER.isDebugEnabled()) {
if (!isOutboundDone()) {
LOGGER.debug(""{} is now secured"", sslFilter.getSessionInfo(session));
} else {
LOGGER.debug(""{} is not secured yet"", sslFilter.getSessionInfo(session));
}
}
return;
case NEED_TASK:
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""{} processing the NEED_TASK state"", sslFilter.getSessionInfo(session));
}
}","public class main {
private void checkStatus(SSLEngineResult res) throws SSLException {
SSLEngineResult.Status status = res.getStatus();
if (status == SSLEngineResult.Status.BUFFER_OVERFLOW) {
throw new SSLException(""SSLEngine error during decrypt: "" + status + "" inNetBuffer: "" + inNetBuffer
+ ""appBuffer: "" + appBuffer);
}
}
void handshake(NextFilter nextFilter) throws SSLException {
for (;;) {
switch (handshakeStatus) {
case FINISHED:
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""{} processing the FINISHED state"", sslFilter.getSessionInfo(session));
}
session.setAttribute(SslFilter.SSL_SESSION, sslEngine.getSession());
handshakeComplete = true;
if (firstSSLNegociation) {
firstSSLNegociation = false;
nextFilter.event(session, SslEvent.SECURED);
}
if (LOGGER.isDebugEnabled()) {
if (!isOutboundDone()) {
LOGGER.debug(""{} is now secured"", sslFilter.getSessionInfo(session));
} else {
LOGGER.debug(""{} is not secured yet"", sslFilter.getSessionInfo(session));
}
}
return;
case NEED_TASK:
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""{} processing the NEED_TASK state"", sslFilter.getSessionInfo(session));
}
}",+ if (endpoint.getComponent() != null) {+ },1
450,0d0d75e25322d8161002d861fff3ec04ba8be5ac,ProjectKB,"public class main {
public void setFileStorageDirectory(Path fileStorageDirectory) throws IOException {
Assert.notNull(fileStorageDirectory, ""FileStorageDirectory must not be null"");
if (!Files.exists(fileStorageDirectory)) {
Files.createDirectory(fileStorageDirectory);
}
this.fileStorageDirectory = Mono.just(fileStorageDirectory);
}
}","public class main {
public void setFileStorageDirectory(Path fileStorageDirectory) throws IOException {
Assert.notNull(fileStorageDirectory, ""FileStorageDirectory must not be null"");
this.fileStorage = FileStorage.fromPath(fileStorageDirectory);
}
}",- if (!Files.exists(fileStorageDirectory)) {- Files.createDirectory(fileStorageDirectory);- }- this.fileStorageDirectory = Mono.just(fileStorageDirectory);+ this.fileStorage = FileStorage.fromPath(fileStorageDirectory);,1
5797,934937d9c1dc20c396b96c08310b72cfa627acb,ProjectKB,"public class main {
public ServiceAuthenticationDetails buildDetails(HttpServletRequest context) {
return new DefaultServiceAuthenticationDetails(context,artifactPattern);
}
}","public class main {
public ServiceAuthenticationDetails buildDetails(HttpServletRequest context) {
try {
return new DefaultServiceAuthenticationDetails(serviceProperties.getService(),context,artifactPattern);
} catch (MalformedURLException e) {
throw new RuntimeException(e);
}
}
}","+ try {- return new DefaultServiceAuthenticationDetails(context,artifactPattern);+ return new DefaultServiceAuthenticationDetails(serviceProperties.getService(),context,artifactPattern);+ } catch (MalformedURLException e) {+ throw new RuntimeException(e);+ }",1
5282,b091934f9e98568b848d0584a1145c8e514cbd21,ProjectKB,"public class main {
public SolrZkToCuratorCredentialsACLs(SolrZkClient zkClient) {
this.aclProvider = createACLProvider(zkClient);
this.authInfos = createAuthInfo(zkClient);
}
}","public class main {
public SolrZkToCuratorCredentialsACLs(SolrZkClient zkClient) {
this.aclProvider = createACLProvider(zkClient);
this.authInfos = createAuthInfo(zkClient);
String zkHost = zkClient.getZkServerAddress();
this.zkChroot = zkHost.contains(""/"")? zkHost.substring(zkHost.indexOf(""/"")): null;
}
}","+ String zkHost = zkClient.getZkServerAddress();+ this.zkChroot = zkHost.contains(""/"")? zkHost.substring(zkHost.indexOf(""/"")): null;",1
17130,5a47697519018eb4918df33a21faae811e85f01a,ProjectKB,"public class main {
public void write(ObjectDataOutput out, Object v) throws IOException {
writeCounter.incrementAndGet();
out.writeUTF(((DummyValue) v).s);
out.writeInt(((DummyValue) v).k);
}
}","public class main {
public void write(ObjectDataOutput out, Object v) throws IOException {
writeCounter.incrementAndGet();
if (v instanceof Serializable) {
out.writeBoolean(true);
javaSerializer.write(out, v);
} else if (v instanceof DummyValue) {
out.writeBoolean(false);
out.writeUTF(((DummyValue) v).s);
out.writeInt(((DummyValue) v).k);
}
}
}","+ if (v instanceof Serializable) {+ out.writeBoolean(true);+ javaSerializer.write(out, v);+ } else if (v instanceof DummyValue) {+ out.writeBoolean(false);+ }",1
11221,b711cf5b8841e5d239717850d1d6d3cad2382a6,ProjectKB,"public class main {
public void http2Connect() throws Exception {
super.http2Connect();
sendSettings(0, false, new SettingValue(Setting.INITIAL_WINDOW_SIZE.getId(), 0));
}
}","public class main {
public void http2Connect() throws Exception {
super.http2Connect();
}
}","- sendSettings(0, false, new SettingValue(Setting.INITIAL_WINDOW_SIZE.getId(), 0));",1
3269,3a7749a6d327cacbc7bf93cd50a0e2dee0b935ba,ProjectKB,"public class main {
private String getEmail(ScimUser scimUser) {
List<Email> emails = scimUser.getEmails();
if (emails == null || emails.isEmpty()) {
return scimUser.getUserName().contains(""@"") ? scimUser.getUserName() : scimUser.getUserName()
+ ""@unknown.org"";
}
for (Email email : emails) {
if (email.isPrimary()) {
return email.getValue();
}
}
return scimUser.getEmails().get(0).getValue();
}
}","public class main {
private String getEmail(ScimUser scimUser) {
List<Email> emails = scimUser.getEmails();
if (emails == null || emails.isEmpty()) {
return scimUser.getUserName().contains(""@"") ? scimUser.getUserName() : scimUser.getUserName()
+ ""@this-default-was-not-configured.invalid"";
}
for (Email email : emails) {
if (email.isPrimary()) {
return email.getValue();
}
}
return scimUser.getEmails().get(0).getValue();
}
}","- + ""@unknown.org"";+ + ""@this-default-was-not-configured.invalid"";",1
4827,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().get(foo.getId()).roles().get(""nosuch"").toRepresentation();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().get(foo.getId()).roles().get(""nosuch"").toRepresentation();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
4880,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().getFormActionProviders();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().getFormActionProviders();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
9900,38a882331035ffed205d15a5c92b471fd09659c,ProjectKB,"public class main {
public static SecretKey initSymKey() throws Exception {
KeyGenerator keyGen=KeyGenerator.getInstance(getAlgorithm(symAlg));
keyGen.init(keySize);
return keyGen.generateKey();
}
}","public class main {
public static SecretKey initSymKey() throws Exception {
KeyGenerator keyGen=KeyGenerator.getInstance(getAlgorithm(symAlg));
keyGen.init(keySize);
return keyGen.generateKey();
}
}","- System.out.println(""Found arg of "" + arg);- if(i < args.length) {+ continue;- else {- System.out.println(""No Algorithm supplied using default of "" + symAlg);+ if(arg.equalsIgnoreCase(""--size"")) {+ keySize=Integer.parseInt(args[i++]);+ continue;+ if(arg.equalsIgnoreCase(""--storeName"")) {+ keyStoreName=args[i++];+ continue;- else if(arg.equalsIgnoreCase(""--size"")) {+ if(arg.equalsIgnoreCase(""--storePass"")) {- if(i < args.length) {- keySize=Integer.parseInt(args[i++]);+ storePass=args[i++];+ continue;- else {- System.out.println(""No Size supplied using default of "" + keySize);+ if(arg.equalsIgnoreCase(""--alias"")) {+ alias=args[i++];+ continue;+ help();+ return;+ System.out.printf(""Creating file '%s' using algorithm '%s' size '%d'\n"", keyStoreName, symAlg, keySize);- else if(arg.equalsIgnoreCase(""--storeName"")) {- if(i < args.length) {- keyStoreName=args[i++];- }- else {- System.out.println(""No keystore supplied using default of "" + keyStoreName);- }- }- else if(arg.equalsIgnoreCase(""--storePass"")) {- if(i < args.length) {- storePass=args[i++];- }- else {- System.out.println(""No password supplied using default of "" + storePass);- }- }- else if(arg.equalsIgnoreCase(""--alias"")) {- if(i < args.length) {- alias=args[i++];- }- else {- System.out.println(""No alias supplied using default of "" + alias);- }- }- }- System.out.println(""Creating file '"" + keyStoreName- + ""' using Algorithm '""- + symAlg- + ""' size '""- + keySize- + ""'"");- OutputStream stream=null;- try {- stream=new FileOutputStream(keyStoreName);+ try(OutputStream stream=new FileOutputStream(keyStoreName)) {- SecretKey key=initSymKey();+ SecretKey key=createSecretKey();- finally {- try {- Util.close(stream);- }- catch(Exception e) {- }- }",1
5954,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
protected List<PutAllOperation> mapOperations() {
Map<SocketAddress, Map<byte[], byte[]>> splittedMaps = new HashMap<>();
for (Map.Entry<byte[], byte[]> entry : map.entrySet()) {
SocketAddress socketAddress = channelFactory.getSocketAddress(entry.getKey(), cacheName);
Map<byte[], byte[]> keyValueMap = splittedMaps.get(socketAddress);
if (keyValueMap == null) {
keyValueMap = new HashMap<>();
splittedMaps.put(socketAddress, keyValueMap);
}
keyValueMap.put(entry.getKey(), entry.getValue());
}
return splittedMaps.values().stream().map(
mapSubset -> new PutAllOperation(codec, channelFactory, mapSubset, cacheName, header.topologyId(), flags,
cfg, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit)).collect(Collectors.toList());
}
}","public class main {
protected List<PutAllOperation> mapOperations() {
Map<SocketAddress, Map<byte[], byte[]>> splittedMaps = new HashMap<>();
for (Map.Entry<byte[], byte[]> entry : map.entrySet()) {
SocketAddress socketAddress = channelFactory.getSocketAddress(entry.getKey(), cacheName);
Map<byte[], byte[]> keyValueMap = splittedMaps.get(socketAddress);
if (keyValueMap == null) {
keyValueMap = new HashMap<>();
splittedMaps.put(socketAddress, keyValueMap);
}
keyValueMap.put(entry.getKey(), entry.getValue());
}
return splittedMaps.values().stream().map(
mapSubset -> new PutAllOperation(codec, channelFactory, mapSubset, cacheName, header.topologyId(), flags,
cfg, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit, dataFormat)).collect(Collectors.toList());
}
}","- cfg, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit)).collect(Collectors.toList());+ cfg, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit, dataFormat)).collect(Collectors.toList());",1
8184,8b54b20fc488ae3e83f4a350a707dc0303ade23,ProjectKB,"public class main {
public void prepare(ResponseBuilder rb) throws IOException {
SolrParams params = rb.req.getParams();
if (params.get(TermsParams.TERMS, ""false"").equals(""true"")) {
rb.doTerms = true;
} else {
return;
}
String shards = params.get(ShardParams.SHARDS);
if (shards != null) {
rb.isDistrib = true;
if (params.get(ShardParams.SHARDS_QT) == null) {
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""No shards.qt parameter specified"");
}
List<String> lst = StrUtils.splitSmart(shards, "","", true);
rb.shards = lst.toArray(new String[lst.size()]);
}
}
}","public class main {
public void prepare(ResponseBuilder rb) throws IOException {
SolrParams params = rb.req.getParams();
if (params.get(TermsParams.TERMS, ""false"").equals(""true"")) {
rb.doTerms = true;
} else {
return;
}
String shards = params.get(ShardParams.SHARDS);
if (shards != null) {
rb.isDistrib = true;
if (params.get(ShardParams.SHARDS_QT) == null) {
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""No shards.qt parameter specified"");
}
List<String> lst = StrUtils.splitSmart(shards, "","", true);
checkShardsWhitelist(rb, lst);
rb.shards = lst.toArray(new String[lst.size()]);
}
}
}","+ checkShardsWhitelist(rb, lst);",1
6852,04b8a19f81ee616c315eec639642439b3a18ad9,ProjectKB,"public class main {
public DNConf(Configuration conf) {
this.conf = conf;
socketTimeout = conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,
HdfsServerConstants.READ_TIMEOUT);
socketWriteTimeout = conf.getInt(DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,
HdfsServerConstants.WRITE_TIMEOUT);
socketKeepaliveTimeout = conf.getInt(
DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY,
DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT);
transferToAllowed = conf.getBoolean(
DFS_DATANODE_TRANSFERTO_ALLOWED_KEY,
DFS_DATANODE_TRANSFERTO_ALLOWED_DEFAULT);
writePacketSize = conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,
DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
readaheadLength = conf.getLong(
DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_KEY,
DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_DEFAULT);
dropCacheBehindWrites = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_KEY,
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_DEFAULT);
syncBehindWrites = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_KEY,
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_DEFAULT);
syncBehindWritesInBackground = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_KEY,
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_DEFAULT);
dropCacheBehindReads = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_KEY,
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_DEFAULT);
connectToDnViaHostname = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME,
DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME_DEFAULT);
this.blockReportInterval = conf.getLong(DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,
DFS_BLOCKREPORT_INTERVAL_MSEC_DEFAULT);
this.blockReportSplitThreshold = conf.getLong(DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY,
DFS_BLOCKREPORT_SPLIT_THRESHOLD_DEFAULT);
this.cacheReportInterval = conf.getLong(DFS_CACHEREPORT_INTERVAL_MSEC_KEY,
DFS_CACHEREPORT_INTERVAL_MSEC_DEFAULT);
this.dfsclientSlowIoWarningThresholdMs = conf.getLong(
DFSConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY,
DFSConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
this.datanodeSlowIoWarningThresholdMs = conf.getLong(
DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_KEY,
DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
long initBRDelay = conf.getLong(
DFS_BLOCKREPORT_INITIAL_DELAY_KEY,
DFS_BLOCKREPORT_INITIAL_DELAY_DEFAULT) * 1000L;
if (initBRDelay >= blockReportInterval) {
initBRDelay = 0;
DataNode.LOG.info(""dfs.blockreport.initialDelay is greater than "" +
""dfs.blockreport.intervalMsec."" + "" Setting initial delay to 0 msec:"");
}
initialBlockReportDelay = initBRDelay;
heartBeatInterval = conf.getLong(DFS_HEARTBEAT_INTERVAL_KEY,
DFS_HEARTBEAT_INTERVAL_DEFAULT) * 1000L;
this.deleteReportInterval = 100 * heartBeatInterval;
this.syncOnClose = conf.getBoolean(DFS_DATANODE_SYNCONCLOSE_KEY,
DFS_DATANODE_SYNCONCLOSE_DEFAULT);
this.minimumNameNodeVersion = conf.get(DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_KEY,
DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_DEFAULT);
this.encryptDataTransfer = conf.getBoolean(DFS_ENCRYPT_DATA_TRANSFER_KEY,
DFS_ENCRYPT_DATA_TRANSFER_DEFAULT);
this.encryptionAlgorithm = conf.get(DFS_DATA_ENCRYPTION_ALGORITHM_KEY);
this.trustedChannelResolver = TrustedChannelResolver.getInstance(conf);
this.saslPropsResolver = DataTransferSaslUtil.getSaslPropertiesResolver(
conf);
this.ignoreSecurePortsForTesting = conf.getBoolean(
IGNORE_SECURE_PORTS_FOR_TESTING_KEY,
IGNORE_SECURE_PORTS_FOR_TESTING_DEFAULT);
this.xceiverStopTimeout = conf.getLong(
DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY,
DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT);
this.maxLockedMemory = conf.getLong(
DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,
DFS_DATANODE_MAX_LOCKED_MEMORY_DEFAULT);
this.restartReplicaExpiry = conf.getLong(
DFS_DATANODE_RESTART_REPLICA_EXPIRY_KEY,
DFS_DATANODE_RESTART_REPLICA_EXPIRY_DEFAULT) * 1000L;
}
}","public class main {
public DNConf(Configuration conf) {
this.conf = conf;
socketTimeout = conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,
HdfsServerConstants.READ_TIMEOUT);
socketWriteTimeout = conf.getInt(DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,
HdfsServerConstants.WRITE_TIMEOUT);
socketKeepaliveTimeout = conf.getInt(
DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY,
DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT);
transferToAllowed = conf.getBoolean(
DFS_DATANODE_TRANSFERTO_ALLOWED_KEY,
DFS_DATANODE_TRANSFERTO_ALLOWED_DEFAULT);
writePacketSize = conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,
DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
readaheadLength = conf.getLong(
DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_KEY,
DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_DEFAULT);
dropCacheBehindWrites = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_KEY,
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_DEFAULT);
syncBehindWrites = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_KEY,
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_DEFAULT);
syncBehindWritesInBackground = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_KEY,
DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_DEFAULT);
dropCacheBehindReads = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_KEY,
DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_DEFAULT);
connectToDnViaHostname = conf.getBoolean(
DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME,
DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME_DEFAULT);
this.blockReportInterval = conf.getLong(DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,
DFS_BLOCKREPORT_INTERVAL_MSEC_DEFAULT);
this.blockReportSplitThreshold = conf.getLong(DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY,
DFS_BLOCKREPORT_SPLIT_THRESHOLD_DEFAULT);
this.cacheReportInterval = conf.getLong(DFS_CACHEREPORT_INTERVAL_MSEC_KEY,
DFS_CACHEREPORT_INTERVAL_MSEC_DEFAULT);
this.dfsclientSlowIoWarningThresholdMs = conf.getLong(
DFSConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY,
DFSConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
this.datanodeSlowIoWarningThresholdMs = conf.getLong(
DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_KEY,
DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
long initBRDelay = conf.getLong(
DFS_BLOCKREPORT_INITIAL_DELAY_KEY,
DFS_BLOCKREPORT_INITIAL_DELAY_DEFAULT) * 1000L;
if (initBRDelay >= blockReportInterval) {
initBRDelay = 0;
DataNode.LOG.info(""dfs.blockreport.initialDelay is greater than "" +
""dfs.blockreport.intervalMsec."" + "" Setting initial delay to 0 msec:"");
}
initialBlockReportDelay = initBRDelay;
heartBeatInterval = conf.getLong(DFS_HEARTBEAT_INTERVAL_KEY,
DFS_HEARTBEAT_INTERVAL_DEFAULT) * 1000L;
this.deleteReportInterval = 100 * heartBeatInterval;
this.syncOnClose = conf.getBoolean(DFS_DATANODE_SYNCONCLOSE_KEY,
DFS_DATANODE_SYNCONCLOSE_DEFAULT);
this.minimumNameNodeVersion = conf.get(DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_KEY,
DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_DEFAULT);
this.encryptDataTransfer = conf.getBoolean(DFS_ENCRYPT_DATA_TRANSFER_KEY,
DFS_ENCRYPT_DATA_TRANSFER_DEFAULT);
this.encryptionAlgorithm = conf.get(DFS_DATA_ENCRYPTION_ALGORITHM_KEY);
this.trustedChannelResolver = TrustedChannelResolver.getInstance(conf);
this.saslPropsResolver = DataTransferSaslUtil.getSaslPropertiesResolver(
conf);
this.ignoreSecurePortsForTesting = conf.getBoolean(
IGNORE_SECURE_PORTS_FOR_TESTING_KEY,
IGNORE_SECURE_PORTS_FOR_TESTING_DEFAULT);
this.xceiverStopTimeout = conf.getLong(
DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY,
DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT);
this.maxLockedMemory = conf.getLong(
DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,
DFS_DATANODE_MAX_LOCKED_MEMORY_DEFAULT);
this.restartReplicaExpiry = conf.getLong(
DFS_DATANODE_RESTART_REPLICA_EXPIRY_KEY,
DFS_DATANODE_RESTART_REPLICA_EXPIRY_DEFAULT) * 1000L;
this.bpReadyTimeout = conf.getLong(
DFS_DATANODE_BP_READY_TIMEOUT_KEY,
DFS_DATANODE_BP_READY_TIMEOUT_DEFAULT);
}
}","+ this.bpReadyTimeout = conf.getLong(+ DFS_DATANODE_BP_READY_TIMEOUT_KEY,+ DFS_DATANODE_BP_READY_TIMEOUT_DEFAULT);",1
7210,882d5884f2614944a0c2ae69bafd9d13bfc5b64,ProjectKB,"public class main {
private void openConnection() {
if (!connectionOpened) {
connectionOpened = true;
URLConnection connection = null;
try {
try {
connection = url.openConnection();
} catch (IOException e) {
lastModified = null;
contentLength = null;
return;
}
lastModified =  new Date(connection.getLastModified());
contentLength = connection.getContentLengthLong();
} finally {
if (connection != null) {
try {
IoUtils.safeClose(connection.getInputStream());
} catch (IOException e) {
}
}
}
}
}
}","public class main {
private void openConnection() {
if (!connectionOpened) {
connectionOpened = true;
URLConnection connection = null;
try {
try {
connection = url.openConnection();
} catch (IOException e) {
lastModified = null;
contentLength = null;
return;
}
if (url.getProtocol().equals(""jar"")) {
connection.setUseCaches(false);
URL jar = ((JarURLConnection) connection).getJarFileURL();
lastModified = new Date(new File(jar.getFile()).lastModified());
} else {
lastModified = new Date(connection.getLastModified());
}
contentLength = connection.getContentLengthLong();
} finally {
if (connection != null) {
try {
IoUtils.safeClose(connection.getInputStream());
} catch (IOException e) {
}
}
}
}
}
}","+ if (url.getProtocol().equals(""jar"")) {+ connection.setUseCaches(false);+ URL jar = ((JarURLConnection) connection).getJarFileURL();+ lastModified = new Date(new File(jar.getFile()).lastModified());+ } else {- lastModified =  new Date(connection.getLastModified());+ lastModified = new Date(connection.getLastModified());+ }",1
6673,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, Map authConf) {
return mkClientImpl(conf, servers, port, """", new DefaultWatcherCallBack(), authConf);
}
}","public class main {
public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf, List<ACL> defaultAcl) {
CuratorFramework fk;
if (authConf != null) {
fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf), defaultAcl);
} else {
fk = Utils.newCurator(conf, servers, port, root, defaultAcl);
}
fk.getCuratorListenable().addListener(new CuratorListener() {
@Override
public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {
if (e.getType().equals(CuratorEventType.WATCHED)) {
WatchedEvent event = e.getWatchedEvent();
watcher.execute(event.getState(), event.getType(), event.getPath());
}
}
});
fk.start();
return fk;
}
}","- public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, Map authConf) {+ public  CuratorFramework mkClientImpl(Map conf, List<String> servers, Object port, String root, final WatcherCallBack watcher, Map authConf, List<ACL> defaultAcl) {- return mkClientImpl(conf, servers, port, """", new DefaultWatcherCallBack(), authConf);+ CuratorFramework fk;+ if (authConf != null) {+ fk = Utils.newCurator(conf, servers, port, root, new ZookeeperAuthInfo(authConf), defaultAcl);+ } else {+ fk = Utils.newCurator(conf, servers, port, root, defaultAcl);+ }+ fk.getCuratorListenable().addListener(new CuratorListener() {+ @Override+ public void eventReceived(CuratorFramework _fk, CuratorEvent e) throws Exception {+ if (e.getType().equals(CuratorEventType.WATCHED)) {+ WatchedEvent event = e.getWatchedEvent();+ watcher.execute(event.getState(), event.getType(), event.getPath());+ }+ }+ });+ fk.start();+ return fk;",1
9663,e922f89290f236f3107039de61af0375826bd96d,ProjectKB,"public class main {
public DocumentBuilderFactory createDocumentBuilderFactory() {
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
factory.setIgnoringElementContentWhitespace(true);
factory.setIgnoringComments(true);
setupFeatures(factory);
return factory;
}
}","public class main {
public DocumentBuilderFactory createDocumentBuilderFactory() {
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
factory.setNamespaceAware(true);
factory.setIgnoringElementContentWhitespace(true);
factory.setIgnoringComments(true);
setupFeatures(factory);
return factory;
}
public DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {
DocumentBuilderFactory factory = getDocumentBuilderFactory();
return factory.newDocumentBuilder();
}
public Document createDocument() throws ParserConfigurationException {
DocumentBuilder builder = createDocumentBuilder();
return builder.newDocument();
}
@Deprecated
public Transformer createTransfomer() throws TransformerConfigurationException {
return createTransformer();
}
}",+ }+ public DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {+ DocumentBuilderFactory factory = getDocumentBuilderFactory();+ return factory.newDocumentBuilder();+ }+ public Document createDocument() throws ParserConfigurationException {+ DocumentBuilder builder = createDocumentBuilder();+ return builder.newDocument();+ }+ @Deprecated+ public Transformer createTransfomer() throws TransformerConfigurationException {+ return createTransformer();,1
18051,da34b18cb3092df4972e2b6fa5178d1059923910,ProjectKB,"public class main {
public InputStream openConfig(String name) throws IOException {
return openResource(name);
}
@Override
public InputStream openResource(String resource) throws IOException {
InputStream is=null;
try {
File f0 = new File(resource);
File f = f0;
if (!f.isAbsolute()) {
f = new File(getConfigDir() + resource);
}
if (f.isFile() && f.canRead()) {
return new FileInputStream(f);
}
}","public class main {
public InputStream openConfig(String name) throws IOException {
return openResource(name);
}
@Override
public InputStream openResource(String resource) throws IOException {
InputStream is=null;
try {
File f0 = new File(resource), f = f0;
if (!f.isAbsolute()) {
f = new File(getConfigDir() + resource).getAbsoluteFile();
}
boolean found = f.isFile() && f.canRead();
if (!found) {         f = f0.getAbsoluteFile();
found = f.isFile() && f.canRead();
}
if (found) {
if (!Boolean.parseBoolean(System.getProperty(""solr.allow.unsafe.resourceloading"", ""false""))) {
final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();
final URI fileURI = f.toURI().normalize();
if (instanceURI.relativize(fileURI) == fileURI) {
throw new IOException(""For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: "" + f +
""; if you want to override this safety feature and you are sure about the consequences, you can pass the system property ""+
""-Dsolr.allow.unsafe.resourceloading=true to your JVM"");
}
}
return new FileInputStream(f);
}
}","- File f0 = new File(resource);+ File f0 = new File(resource), f = f0;- File f = f0;- f = new File(getConfigDir() + resource);+ f = new File(getConfigDir() + resource).getAbsoluteFile();+ boolean found = f.isFile() && f.canRead();+ if (!found) {         f = f0.getAbsoluteFile();- if (f.isFile() && f.canRead()) {+ found = f.isFile() && f.canRead();+ }+ if (found) {+ if (!Boolean.parseBoolean(System.getProperty(""solr.allow.unsafe.resourceloading"", ""false""))) {+ final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();+ final URI fileURI = f.toURI().normalize();+ if (instanceURI.relativize(fileURI) == fileURI) {+ throw new IOException(""For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: "" + f ++ ""; if you want to override this safety feature and you are sure about the consequences, you can pass the system property ""++ ""-Dsolr.allow.unsafe.resourceloading=true to your JVM"");+ }+ }",1
4879,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().getClientAuthenticatorProviders();
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().getClientAuthenticatorProviders();+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
8078,5ea0a6f6c6a54f1cddf9691a99b0c237afc95348,ProjectKB,"public class main {
public void testHttpSendJavaBodyAndReceiveString() throws Exception {
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(true);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
});
context.start();
MyCoolBean cool = new MyCoolBean(123, ""Camel"");
String reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool,
Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, String.class);
assertEquals(""OK"", reply);
}
}","public class main {
public void testHttpSendJavaBodyAndReceiveString() throws Exception {
HttpCommonComponent jetty = context.getComponent(""jetty"", HttpCommonComponent.class);
jetty.setAllowJavaSerializedObject(true);
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(true);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
});
context.start();
MyCoolBean cool = new MyCoolBean(123, ""Camel"");
String reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool,
Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, String.class);
assertEquals(""OK"", reply);
}
}","+ HttpCommonComponent jetty = context.getComponent(""jetty"", HttpCommonComponent.class);+ jetty.setAllowJavaSerializedObject(true);",1
6974,db6069667708a59c75a785f310d4a2df3698122,ProjectKB,"public class main {
public void testJWTAuthorizationGrant() throws Exception {
URL busFile = AuthorizationGrantTest.class.getResource(""client.xml"");
String address = ""https:        WebClient client = WebClient.create(address, OAuth2TestUtils.setupProviders(),
""alice"", ""security"", busFile.toString());
String token = OAuth2TestUtils.createToken(""DoubleItSTSIssuer"", ""consumer-id"",
""https:
client.type(""application/x-www-form-urlencoded"").accept(""application/json"");
client.path(""token"");
Form form = new Form();
form.param(""grant_type"", ""urn:ietf:params:oauth:grant-type:jwt-bearer"");
form.param(""assertion"", token);
form.param(""client_id"", ""consumer-id"");
Response response = client.post(form);
ClientAccessToken accessToken = response.readEntity(ClientAccessToken.class);
assertNotNull(accessToken.getTokenKey());
assertNotNull(accessToken.getRefreshToken());
if (isAccessTokenInJWTFormat()) {
validateAccessToken(accessToken.getTokenKey());
}
}
}","public class main {
public void testJWTAuthorizationGrant() throws Exception {
URL busFile = AuthorizationGrantTest.class.getResource(""client.xml"");
String address = ""https:        WebClient client = WebClient.create(address, OAuth2TestUtils.setupProviders(),
""consumer-id"", ""this-is-a-secret"", busFile.toString());
String token = OAuth2TestUtils.createToken(""DoubleItSTSIssuer"", ""consumer-id"",
""https:
client.type(""application/x-www-form-urlencoded"").accept(""application/json"");
client.path(""token"");
Form form = new Form();
form.param(""grant_type"", ""urn:ietf:params:oauth:grant-type:jwt-bearer"");
form.param(""assertion"", token);
form.param(""client_id"", ""consumer-id"");
Response response = client.post(form);
ClientAccessToken accessToken = response.readEntity(ClientAccessToken.class);
assertNotNull(accessToken.getTokenKey());
assertNotNull(accessToken.getRefreshToken());
if (isAccessTokenInJWTFormat()) {
validateAccessToken(accessToken.getTokenKey());
}
}
}","- ""alice"", ""security"", busFile.toString());+ ""consumer-id"", ""this-is-a-secret"", busFile.toString());",1
1561,5eab756eaf4bb397302f00fbd0273f2470009d38,ProjectKB,"public class main {
public LockoutPolicy getLockoutPolicy() {
LockoutPolicy res = IdentityZoneHolder.get().getConfig().getClientLockoutPolicy();
return res.getLockoutAfterFailures() != -1 ? res : defaultLockoutPolicy;
}
}","public class main {
public LockoutPolicy getLockoutPolicy() {
if(isEnabled) {
LockoutPolicy res = IdentityZoneHolder.get().getConfig().getClientLockoutPolicy();
return res.getLockoutAfterFailures() != -1 ? res : defaultLockoutPolicy;
} else {
return disabledLockoutPolicy;
}
}
}",+ if(isEnabled) {+ } else {+ return disabledLockoutPolicy;+ },1
10794,632951898a2f1474f699094200367fb405397127,ProjectKB,"public class main {
public void interpolateCredHubReferences_whenAReferencedCredentialDoesNotExist_itThrowsAnException() {
String inputJsonString = ""{""
+ ""  \""pp-config-server\"": [""
+ ""    {""
+ ""      \""credentials\"": {""
+ ""        \""credhub-ref\"": \""((/missing_cred))\""""
+ ""      }
}","public class main {
public void interpolateCredHubReferences_whenAReferencedCredentialDoesNotExist_itThrowsAnException() {
String inputJsonString = ""{""
+ ""  \""pp-config-server\"": [""
+ ""    {""
+ ""      \""credentials\"": {""
+ ""        \""credhub-ref\"": \""((/missing_cred))\""""
+ ""      }
}",- credentialDataService = mock(CredentialDataService.class);+ credentialHandler = mock(CredentialHandler.class);+ userContext = mock(UserContext.class);- subject = new JsonInterpolationService(credentialDataService);+ subject = new JsonInterpolationService(credentialHandler);,1
12984,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","+ HttpExecuteInterceptor pkceClientAuthenticationWrapper = new HttpExecuteInterceptor() {+ @Override+ public void intercept(HttpRequest request) throws IOException {+ clientAuthentication.intercept(request);+ if (pkce != null) {+ Map<String, Object> data = Data.mapOf(UrlEncodedContent.getContent(request).getData());+ data.put(""code_verifier"", pkce.getVerifier());+ }+ }+ };- clientAuthentication).setRequestInitializer(requestInitializer).setScopes(scopes);+ pkceClientAuthenticationWrapper).setRequestInitializer(requestInitializer).setScopes(scopes);",1
10939,90c898335786211d253c0503453e2f8b93e0d3fe,ProjectKB,"public class main {
private static DocumentBuilder getBuilder() throws ParserConfigurationException {
ClassLoader loader = Thread.currentThread().getContextClassLoader();
if (loader == null) {
loader = DOMUtils.class.getClassLoader();
}
if (loader == null) {
return XMLUtils.getParser();
}
DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);
if (builder == null) {
builder = XMLUtils.getParser();
DOCUMENT_BUILDERS.put(loader, builder);
}
return builder;
}
}","public class main {
private static DocumentBuilder getBuilder() throws ParserConfigurationException {
ClassLoader loader = Thread.currentThread().getContextClassLoader();
if (loader == null) {
loader = DOMUtils.class.getClassLoader();
}
if (loader == null) {
DocumentBuilderFactory dbf = createDocumentBuilderFactory();
return dbf.newDocumentBuilder();
}
DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);
if (builder == null) {
DocumentBuilderFactory dbf = createDocumentBuilderFactory();
builder = dbf.newDocumentBuilder();
DOCUMENT_BUILDERS.put(loader, builder);
}
return builder;
}
}",- return XMLUtils.getParser();+ DocumentBuilderFactory dbf = createDocumentBuilderFactory();+ return dbf.newDocumentBuilder();- builder = XMLUtils.getParser();+ DocumentBuilderFactory dbf = createDocumentBuilderFactory();+ builder = dbf.newDocumentBuilder();,1
309,030e9d00125cbd1ad759668f85488aba1019c668,ProjectKB,"public class main {
public ClassPathResource(String path, ClassLoader classLoader) {
Assert.notNull(path, ""Path must not be null"");
Assert.state(doesNotContainFileColon(path), ""Path must not contain 'file:'"");
String pathToUse = StringUtils.cleanPath(path);
if (pathToUse.startsWith(""/"")) {
pathToUse = pathToUse.substring(1);
}
this.path = pathToUse;
this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
}
}","public class main {
public ClassPathResource(String path, ClassLoader classLoader) {
Assert.notNull(path, ""Path must not be null"");
Assert.isTrue(isValid(path), ""Path is not valid"");
String pathToUse = StringUtils.cleanPath(path);
if (pathToUse.startsWith(""/"")) {
pathToUse = pathToUse.substring(1);
}
this.path = pathToUse;
this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
}
}","- Assert.state(doesNotContainFileColon(path), ""Path must not contain 'file:'"");+ Assert.isTrue(isValid(path), ""Path is not valid"");",1
3828,b954402272ddcfbb45dc1495520f920e70cc041c,ProjectKB,"public class main {
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append(""CamelJMXAgent["");
CollectionStringBuffer csb = new CollectionStringBuffer();
if (disabled != null) {
csb.append(""disabled="" + disabled);
}
if (usePlatformMBeanServer != null) {
csb.append(""usePlatformMBeanServer="" + usePlatformMBeanServer);
}
if (createConnector != null) {
csb.append(""createConnector="" + createConnector);
}
if (connectorPort != null) {
csb.append(""connectorPort="" + connectorPort);
}
if (registryPort != null) {
csb.append(""registryPort="" + registryPort);
}
if (serviceUrlPath != null) {
csb.append(""serviceUrlPath="" + serviceUrlPath);
}
if (mbeanServerDefaultDomain != null) {
csb.append(""mbeanServerDefaultDomain="" + mbeanServerDefaultDomain);
}
if (mbeanObjectDomainName != null) {
csb.append(""mbeanObjectDomainName="" + mbeanObjectDomainName);
}
if (statisticsLevel != null) {
csb.append(""statisticsLevel="" + statisticsLevel);
}
if (loadStatisticsEnabled != null) {
csb.append(""loadStatisticsEnabled="" + loadStatisticsEnabled);
}
if (endpointRuntimeStatisticsEnabled != null) {
csb.append(""endpointRuntimeStatisticsEnabled="" + endpointRuntimeStatisticsEnabled);
}
if (onlyRegisterProcessorWithCustomId != null) {
csb.append(""onlyRegisterProcessorWithCustomId="" + onlyRegisterProcessorWithCustomId);
}
if (registerAlways != null) {
csb.append(""registerAlways="" + registerAlways);
}
if (registerNewRoutes != null) {
csb.append(""registerNewRoutes="" + registerNewRoutes);
}
if (includeHostName != null) {
csb.append(""includeHostName="" + includeHostName);
}
if (useHostIPAddress != null) {
csb.append(""useHostIPAddress="" + useHostIPAddress);
}
if (mask != null) {
csb.append(""mask="" + mask);
}
sb.append(csb.toString());
sb.append(""]"");
return sb.toString();
}
}","public class main {
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append(""CamelJMXAgent["");
CollectionStringBuffer csb = new CollectionStringBuffer();
if (disabled != null) {
csb.append(""disabled="" + disabled);
}
if (usePlatformMBeanServer != null) {
csb.append(""usePlatformMBeanServer="" + usePlatformMBeanServer);
}
if (mbeanServerDefaultDomain != null) {
csb.append(""mbeanServerDefaultDomain="" + mbeanServerDefaultDomain);
}
if (mbeanObjectDomainName != null) {
csb.append(""mbeanObjectDomainName="" + mbeanObjectDomainName);
}
if (statisticsLevel != null) {
csb.append(""statisticsLevel="" + statisticsLevel);
}
if (loadStatisticsEnabled != null) {
csb.append(""loadStatisticsEnabled="" + loadStatisticsEnabled);
}
if (endpointRuntimeStatisticsEnabled != null) {
csb.append(""endpointRuntimeStatisticsEnabled="" + endpointRuntimeStatisticsEnabled);
}
if (onlyRegisterProcessorWithCustomId != null) {
csb.append(""onlyRegisterProcessorWithCustomId="" + onlyRegisterProcessorWithCustomId);
}
if (registerAlways != null) {
csb.append(""registerAlways="" + registerAlways);
}
if (registerNewRoutes != null) {
csb.append(""registerNewRoutes="" + registerNewRoutes);
}
if (includeHostName != null) {
csb.append(""includeHostName="" + includeHostName);
}
if (useHostIPAddress != null) {
csb.append(""useHostIPAddress="" + useHostIPAddress);
}
if (mask != null) {
csb.append(""mask="" + mask);
}
sb.append(csb.toString());
sb.append(""]"");
return sb.toString();
}
}","- }- if (createConnector != null) {- csb.append(""createConnector="" + createConnector);- }- if (connectorPort != null) {- csb.append(""connectorPort="" + connectorPort);- }- if (registryPort != null) {- csb.append(""registryPort="" + registryPort);- }- if (serviceUrlPath != null) {- csb.append(""serviceUrlPath="" + serviceUrlPath);",1
289,1a1d6ca1bc3ae840238dc345fa1eb2c7c28c8cb,ProjectKB,"public class main {
public static void setHiveConfWhiteList(HiveConf hiveConf) throws HiveAuthzPluginException {
String whiteListParamsStr = hiveConf
.getVar(ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST);
if(whiteListParamsStr == null || whiteListParamsStr.trim().isEmpty()) {
throw new HiveAuthzPluginException(""Configuration parameter ""
+ ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST.varname
+ "" is not initialized."");
}
String whiteListAppend = hiveConf
.getVar(ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND);
if (whiteListAppend != null && !whiteListAppend.trim().equals("""")) {
whiteListParamsStr = whiteListParamsStr + ""|"" + whiteListAppend;
}
hiveConf.setModifiableWhiteListRegex(whiteListParamsStr);
String curBlackList = hiveConf.getVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST);
if (curBlackList == null || curBlackList.trim().isEmpty()) {
hiveConf.setVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST, ""reflect,reflect2,java_method"");
}
}
}","public class main {
public static void setHiveConfWhiteList(HiveConf hiveConf) throws HiveAuthzPluginException {
String whiteListParamsStr = hiveConf
.getVar(ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST);
if(whiteListParamsStr == null || whiteListParamsStr.trim().isEmpty()) {
throw new HiveAuthzPluginException(""Configuration parameter ""
+ ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST.varname
+ "" is not initialized."");
}
String whiteListAppend = hiveConf
.getVar(ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND);
if (whiteListAppend != null && !whiteListAppend.trim().equals("""")) {
whiteListParamsStr = whiteListParamsStr + ""|"" + whiteListAppend;
}
hiveConf.setModifiableWhiteListRegex(whiteListParamsStr);
String curBlackList = hiveConf.getVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST);
if (curBlackList == null || curBlackList.trim().isEmpty()) {
hiveConf.setVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST, ""reflect,reflect2,java_method,in_file"");
}
}
}","- hiveConf.setVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST, ""reflect,reflect2,java_method"");+ hiveConf.setVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST, ""reflect,reflect2,java_method,in_file"");",1
2992,9f9aebde557b791f275d6156d8bec12ac334425d,ProjectKB,"public class main {
protected AsyncRequestWrapperImpl(final ODataClient odataClient, final ODataRequest odataRequest) {
this.odataRequest = odataRequest;
this.odataRequest.setAccept(this.odataRequest.getAccept());
this.odataRequest.setContentType(this.odataRequest.getContentType());
extendHeader(HttpHeader.PREFER, new ODataPreferences().respondAsync());
this.odataClient = odataClient;
final HttpMethod method = odataRequest.getMethod();
this.uri = odataRequest.getURI();
HttpClient _httpClient = odataClient.getConfiguration().getHttpClientFactory().create(method, this.uri);
if (odataClient.getConfiguration().isGzipCompression()) {
_httpClient = new DecompressingHttpClient(_httpClient);
}
this.httpClient = _httpClient;
this.request = odataClient.getConfiguration().getHttpUriRequestFactory().create(method, this.uri);
if (request instanceof HttpEntityEnclosingRequestBase && odataRequest instanceof AbstractODataBasicRequest) {
AbstractODataBasicRequest<?> br = (AbstractODataBasicRequest<?>) odataRequest;
HttpEntityEnclosingRequestBase httpRequest = ((HttpEntityEnclosingRequestBase) request);
httpRequest.setEntity(new InputStreamEntity(br.getPayload(), -1));
}
}
}","public class main {
protected AsyncRequestWrapperImpl(final ODataClient odataClient, final ODataRequest odataRequest) {
this.odataRequest = odataRequest;
this.odataRequest.setAccept(this.odataRequest.getAccept());
this.odataRequest.setContentType(this.odataRequest.getContentType());
extendHeader(HttpHeader.PREFER, new ODataPreferences().respondAsync());
this.odataClient = odataClient;
final HttpMethod method = odataRequest.getMethod();
this.uri = odataRequest.getURI();
Objects.requireNonNull(this.uri, ""Target URI can't be null"");
HttpClient _httpClient = odataClient.getConfiguration().getHttpClientFactory().create(method, this.uri);
if (odataClient.getConfiguration().isGzipCompression()) {
_httpClient = new DecompressingHttpClient(_httpClient);
}
this.httpClient = _httpClient;
this.request = odataClient.getConfiguration().getHttpUriRequestFactory().create(method, this.uri);
if (request instanceof HttpEntityEnclosingRequestBase && odataRequest instanceof AbstractODataBasicRequest) {
AbstractODataBasicRequest<?> br = (AbstractODataBasicRequest<?>) odataRequest;
HttpEntityEnclosingRequestBase httpRequest = ((HttpEntityEnclosingRequestBase) request);
httpRequest.setEntity(new InputStreamEntity(br.getPayload(), -1));
}
}
}","+ Objects.requireNonNull(this.uri, ""Target URI can't be null"");",1
4900,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().removeRequiredAction(""nosuch"");
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().removeRequiredAction(""nosuch"");+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
10919,13e43c1412ad72d99030b4eb4cb72c84fa57d5ff,ProjectKB,"public class main {
public synchronized JettyHttpBinding getJettyBinding(HttpClient httpClient) {
if (jettyBinding == null) {
jettyBinding = new DefaultJettyHttpBinding();
jettyBinding.setHeaderFilterStrategy(getHeaderFilterStrategy());
jettyBinding.setThrowExceptionOnFailure(isThrowExceptionOnFailure());
jettyBinding.setTransferException(isTransferException());
}
return jettyBinding;
}
}","public class main {
public synchronized JettyHttpBinding getJettyBinding(HttpClient httpClient) {
if (jettyBinding == null) {
jettyBinding = new DefaultJettyHttpBinding();
jettyBinding.setHeaderFilterStrategy(getHeaderFilterStrategy());
jettyBinding.setThrowExceptionOnFailure(isThrowExceptionOnFailure());
jettyBinding.setTransferException(isTransferException());
if (getComponent() != null) {
jettyBinding.setAllowJavaSerializedObject(getComponent().isAllowJavaSerializedObject());
}
}
return jettyBinding;
}
}",+ if (getComponent() != null) {+ jettyBinding.setAllowJavaSerializedObject(getComponent().isAllowJavaSerializedObject());+ },1
9132,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void execute(FunctionContext context) {
Object[] arguments = (Object[]) context.getArguments();
String regionName = (String) arguments[0];
Set<String> keys = (Set<String>) arguments[1];
if (this.cache.getLogger().fineEnabled()) {
StringBuilder builder = new StringBuilder();
builder.append(""Function "").append(ID).append("" received request to touch "")
.append(regionName).append(""->"").append(keys);
this.cache.getLogger().fine(builder.toString());
}
Region region = this.cache.getRegion(regionName);
if (region != null) {
region.getAll(keys);
}
context.getResultSender().lastResult(true);
}
}","public class main {
public void execute(FunctionContext context) {
Object[] arguments = (Object[]) context.getArguments();
Cache cache = context.getCache();
String regionName = (String) arguments[0];
Set<String> keys = (Set<String>) arguments[1];
if (cache.getLogger().fineEnabled()) {
StringBuilder builder = new StringBuilder();
builder.append(""Function "").append(ID).append("" received request to touch "")
.append(regionName).append(""->"").append(keys);
cache.getLogger().fine(builder.toString());
}
Region region = cache.getRegion(regionName);
if (region != null) {
region.getAll(keys);
}
context.getResultSender().lastResult(true);
}
}",+ Cache cache = context.getCache();- if (this.cache.getLogger().fineEnabled()) {+ if (cache.getLogger().fineEnabled()) {- this.cache.getLogger().fine(builder.toString());+ cache.getLogger().fine(builder.toString());- Region region = this.cache.getRegion(regionName);+ Region region = cache.getRegion(regionName);,1
11332,27a9752a565fbef436bac4fcf22d339e3295b2a,ProjectKB,"public class main {
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
throw exception;
}
public void preWriteCheck() throws Exception {
}
public void postWriteCheck() {
}
public void writeFile(Exchange exchange, String fileName) throws GenericFileOperationFailedException {
if (endpoint.isAutoCreate()) {
String name = FileUtil.normalizePath(fileName);
File file = new File(name);
String directory = file.getParent();
boolean absolute = FileUtil.isAbsolute(file);
if (directory != null) {
if (!operations.buildDirectory(directory, absolute)) {
log.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
}
}
}
if (log.isTraceEnabled()) {
log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange}
}","public class main {
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
throw exception;
}
public void preWriteCheck() throws Exception {
}
public void postWriteCheck() {
}
public void writeFile(Exchange exchange, String fileName) throws GenericFileOperationFailedException {
if (endpoint.isAutoCreate()) {
String name = FileUtil.normalizePath(fileName);
File file = new File(name);
String directory = file.getParent();
boolean absolute = FileUtil.isAbsolute(file);
if (directory != null) {
if (!operations.buildDirectory(directory, absolute)) {
log.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
}
}
}
if (log.isTraceEnabled()) {
log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange});
}
}","- log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange}+ log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange});+ }",1
19743,3215fe50dd42c83a7a454dd36486843fe36eae4,ProjectKB,"public class main {
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
throw exception;
}
public void preWriteCheck() throws Exception {
}
public void postWriteCheck() {
}
public void writeFile(Exchange exchange, String fileName) throws GenericFileOperationFailedException {
if (endpoint.isAutoCreate()) {
String name = FileUtil.normalizePath(fileName);
File file = new File(name);
String directory = file.getParent();
boolean absolute = FileUtil.isAbsolute(file);
if (directory != null) {
if (!operations.buildDirectory(directory, absolute)) {
log.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
}
}
}
if (log.isTraceEnabled()) {
log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange}
}","public class main {
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
throw exception;
}
public void preWriteCheck() throws Exception {
}
public void postWriteCheck() {
}
public void writeFile(Exchange exchange, String fileName) throws GenericFileOperationFailedException {
if (endpoint.isAutoCreate()) {
String name = FileUtil.normalizePath(fileName);
File file = new File(name);
String directory = file.getParent();
boolean absolute = FileUtil.isAbsolute(file);
if (directory != null) {
if (!operations.buildDirectory(directory, absolute)) {
log.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
}
}
}
if (log.isTraceEnabled()) {
log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange});
}
}","- log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange}+ log.trace(""About to write [{}] to [{}] from exchange [{}]"", new Object[]{fileName, getEndpoint(), exchange});+ }",1
5847,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public void serialize(String string, JsonGenerator gen, SerializerProvider provider) throws IOException {
Object json = objectMapper.readValue(string, Object.class);
gen.writeObject(json);
}
}","public class main {
public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
String rawJson = value instanceof String ? value.toString() : new String((byte[]) value, UTF_8);
gen.writeObject(objectMapper.readValue(rawJson, Object.class));
}
}","- public void serialize(String string, JsonGenerator gen, SerializerProvider provider) throws IOException {+ public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {+ String rawJson = value instanceof String ? value.toString() : new String((byte[]) value, UTF_8);- Object json = objectMapper.readValue(string, Object.class);+ gen.writeObject(objectMapper.readValue(rawJson, Object.class));- gen.writeObject(json);",1
812,9bffc3913aeb8472c11bb543243004b4b4376f16,ProjectKB,"public class main {
public Object map2bean(final Map map, Class targetType) {
Object target = null;
String className = (String) map.get(classMetadataName);
if (className == null) {
if (targetType == null) {
target = map;
}
}
else {
try {
targetType = ClassLoaderUtil.loadClass(className);
} catch (ClassNotFoundException cnfex) {
throw new JsonException(cnfex);
}
}
if (target == null) {
target = jsonParser.newObjectInstance(targetType);
}
ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass());
boolean targetIsMap = target instanceof Map;
for (Object key : map.keySet()) {
String keyName = key.toString();
if (classMetadataName != null) {
if (keyName.equals(classMetadataName)) {
continue;
}
}
PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared);
if (!targetIsMap && pd == null) {
continue;
}
Object value = map.get(key);
Class propertyType = pd == null ? null : pd.getType();
Class componentType = pd == null ? null : pd.resolveComponentType(true);
if (value != null) {
if (value instanceof List) {
if (componentType != null && componentType != String.class) {
value = generifyList((List) value, componentType);
}
}
else if (value instanceof Map) {
if (!ClassUtil.isTypeOf(propertyType, Map.class)) {
value = map2bean((Map) value, propertyType);
}
else {
Class keyType = pd == null ? null : pd.resolveKeyType(true);
if (keyType != String.class || componentType != String.class) {
value = generifyMap((Map) value, keyType, componentType);
}
}
}
}
if (targetIsMap) {
((Map)target).put(keyName, value);
}
else {
try {
setValue(target, pd, value);
} catch (Exception ignore) {
ignore.printStackTrace();
}
}
}
return target;
}
}","public class main {
public Object map2bean(final Map map, Class targetType) {
Object target = null;
String className = (String) map.get(classMetadataName);
if (className == null) {
if (targetType == null) {
target = map;
}
}
else {
checkClassName(jsonParser.classnameWhitelist, className);
try {
targetType = ClassLoaderUtil.loadClass(className);
} catch (ClassNotFoundException cnfex) {
throw new JsonException(cnfex);
}
}
if (target == null) {
target = jsonParser.newObjectInstance(targetType);
}
ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass());
boolean targetIsMap = target instanceof Map;
for (Object key : map.keySet()) {
String keyName = key.toString();
if (classMetadataName != null) {
if (keyName.equals(classMetadataName)) {
continue;
}
}
PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared);
if (!targetIsMap && pd == null) {
continue;
}
Object value = map.get(key);
Class propertyType = pd == null ? null : pd.getType();
Class componentType = pd == null ? null : pd.resolveComponentType(true);
if (value != null) {
if (value instanceof List) {
if (componentType != null && componentType != String.class) {
value = generifyList((List) value, componentType);
}
}
else if (value instanceof Map) {
if (!ClassUtil.isTypeOf(propertyType, Map.class)) {
value = map2bean((Map) value, propertyType);
}
else {
Class keyType = pd == null ? null : pd.resolveKeyType(true);
if (keyType != String.class || componentType != String.class) {
value = generifyMap((Map) value, keyType, componentType);
}
}
}
}
if (targetIsMap) {
((Map)target).put(keyName, value);
}
else {
try {
setValue(target, pd, value);
} catch (Exception ignore) {
ignore.printStackTrace();
}
}
}
return target;
}
}","+ checkClassName(jsonParser.classnameWhitelist, className);",1
17589,d1bc09386405d28d6b0f0a29ce8c3e7efd72d6c7,ProjectKB,"public class main {
private static void processHeaderConfig(MultivaluedMap<String, String> httpHeaders, Object object, String key, String prefix) {
try {
String property = StringUtils.removeStart(key, prefix);
Field field = null;
try {
object.getClass().getDeclaredField(StringUtils.uncapitalize(property));
} catch (NoSuchFieldException e) {
}
String setter = property;
setter = ""set""+setter.substring(0,1).toUpperCase(Locale.US)+setter.substring(1);
Class clazz = String.class;
if (field != null) {
if (field.getType() == int.class) {
clazz = int.class;
} else if (field.getType() == double.class) {
clazz = double.class;
} else if (field.getType() == boolean.class) {
clazz = boolean.class;
}
}
Method m = tryToGetMethod(object, setter, clazz);
if (m == null && clazz != String.class) {
m = tryToGetMethod(object, setter, String.class);
}
if (m != null) {
String val = httpHeaders.getFirst(key);
val = val.trim();
if (clazz == String.class) {
checkTrustWorthy(setter, val);
m.invoke(object, val);
} else if (clazz == int.class) {
m.invoke(object, Integer.parseInt(val));
} else if (clazz == double.class) {
m.invoke(object, Double.parseDouble(val));
} else if (clazz == boolean.class) {
m.invoke(object, Boolean.parseBoolean(val));
} else {
throw new IllegalArgumentException(""setter must be String, int, double or boolean...for now"");
}
} else {
throw new NoSuchMethodException(""Couldn't find: ""+setter);
}
}","public class main {
private static void processHeaderConfig(MultivaluedMap<String, String> httpHeaders, Object object, String key, String prefix) {
try {String property = StringUtils.removeStart(key, prefix);
Field field = null;
try {
field = object.getClass().getDeclaredField(StringUtils.uncapitalize(property));
} catch (NoSuchFieldException e) {
}
String setter = property;
setter = ""set""+setter.substring(0,1).toUpperCase(Locale.US)+setter.substring(1);
Class clazz = String.class;
if (field != null) {
if (field.getType() == int.class || field.getType() == Integer.class) {
clazz = int.class;
} else if (field.getType() == double.class) {
clazz = double.class;
} else if (field.getType() == Double.class) {
clazz = Double.class;
} else if (field.getType() == float.class) {
clazz = float.class;
} else if (field.getType() == Float.class) {
clazz = Float.class;
} else if (field.getType() == boolean.class) {
clazz = boolean.class;
} else if (field.getType() == Boolean.class) {
clazz = Boolean.class;
}
}
Method m = tryToGetMethod(object, setter, clazz);
if (m == null && clazz != String.class) {
m = tryToGetMethod(object, setter, String.class);
}
if (m != null) {
String val = httpHeaders.getFirst(key);
val = val.trim();
if (clazz == String.class) {
checkTrustWorthy(setter, val);
m.invoke(object, val);
} else if (clazz == int.class || clazz == Integer.class) {
m.invoke(object, Integer.parseInt(val));
} else if (clazz == double.class || clazz == Double.class) {
m.invoke(object, Double.parseDouble(val));
} else if (clazz == boolean.class || clazz == Boolean.class) {
m.invoke(object, Boolean.parseBoolean(val));
} else if (clazz == float.class || clazz == Float.class) {
m.invoke(object, Float.parseFloat(val));
} else {
throw new IllegalArgumentException(""setter must be String, int, float, double or boolean...for now"");
}
} else {
throw new NoSuchMethodException(""Couldn't find: ""+setter);
}
}","- try {- String property = StringUtils.removeStart(key, prefix);+ try {String property = StringUtils.removeStart(key, prefix);- object.getClass().getDeclaredField(StringUtils.uncapitalize(property));+ field = object.getClass().getDeclaredField(StringUtils.uncapitalize(property));- if (field.getType() == int.class) {+ if (field.getType() == int.class || field.getType() == Integer.class) {+ } else if (field.getType() == Double.class) {+ clazz = Double.class;+ } else if (field.getType() == float.class) {+ clazz = float.class;+ } else if (field.getType() == Float.class) {+ clazz = Float.class;+ } else if (field.getType() == Boolean.class) {+ clazz = Boolean.class;- } else if (clazz == int.class) {+ } else if (clazz == int.class || clazz == Integer.class) {- } else if (clazz == double.class) {+ } else if (clazz == double.class || clazz == Double.class) {- } else if (clazz == boolean.class) {+ } else if (clazz == boolean.class || clazz == Boolean.class) {+ } else if (clazz == float.class || clazz == Float.class) {+ m.invoke(object, Float.parseFloat(val));- throw new IllegalArgumentException(""setter must be String, int, double or boolean...for now"");+ throw new IllegalArgumentException(""setter must be String, int, float, double or boolean...for now"");",1
17202,24eefa559fe6b310629d2bf00663d2679ec81b9,ProjectKB,"public class main {
protected void doProcess(Exchange exchange) throws Exception {
Schema schema;
if (isUseSharedSchema()) {
schema = getSchema();
} else {
schema = createSchema();
}
Validator validator = schema.newValidator();
Source source = null;
InputStream is = null;
try {
Result result = null;
if (isInputStreamNeeded(exchange)) {
is = getContentToValidate(exchange, InputStream.class);
if (is != null) {
source = getSource(exchange, is);
}
} else {
Object content = getContentToValidate(exchange);
if (content != null) {
source = getSource(exchange, content);
}
}
if (shouldUseHeader()) {
if (source == null && isFailOnNullHeader()) {
throw new NoXmlHeaderValidationException(exchange, headerName);
}
} else {
if (source == null && isFailOnNullBody()) {
throw new NoXmlBodyValidationException(exchange);
}
}
if (source instanceof DOMSource) {
result = new DOMResult();
} else if (source instanceof SAXSource) {
result = new SAXResult();
} else if (source instanceof StAXSource || source instanceof StreamSource) {
result = null;
}
if (source != null) {
ValidatorErrorHandler handler = errorHandler.getClass().newInstance();
validator.setErrorHandler(handler);
try {
LOG.trace(""Validating {}"", source);
validator.validate(source, result);
handler.handleErrors(exchange, schema, result);
} catch (SAXParseException e) {
throw new SchemaValidationException(exchange, schema, Collections.singletonList(e),
Collections.<SAXParseException>emptyList(),
Collections.<SAXParseException>emptyList());
}
}
} finally {
IOHelper.close(is);
}
}","public class main {
protected void doProcess(Exchange exchange) throws Exception {
Schema schema;
if (isUseSharedSchema()) {
schema = getSchema();
} else {
schema = createSchema();
}
Validator validator = schema.newValidator();
if (!Boolean.parseBoolean(exchange.getContext().getGlobalOptions().get(ACCESS_EXTERNAL_DTD))) {
try {
LOG.debug(""Configuring Validator to not allow access to external DTD/Schema"");
validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, """");
validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, """");
} catch (SAXException e) {
LOG.warn(e.getMessage(), e);
}
}
Source source = null;
InputStream is = null;
try {
Result result = null;
if (isInputStreamNeeded(exchange)) {
is = getContentToValidate(exchange, InputStream.class);
if (is != null) {
source = getSource(exchange, is);
}
} else {
Object content = getContentToValidate(exchange);
if (content != null) {
source = getSource(exchange, content);
}
}
if (shouldUseHeader()) {
if (source == null && isFailOnNullHeader()) {
throw new NoXmlHeaderValidationException(exchange, headerName);
}
} else {
if (source == null && isFailOnNullBody()) {
throw new NoXmlBodyValidationException(exchange);
}
}
if (source instanceof DOMSource) {
result = new DOMResult();
} else if (source instanceof SAXSource) {
result = new SAXResult();
} else if (source instanceof StAXSource || source instanceof StreamSource) {
result = null;
}
if (source != null) {
ValidatorErrorHandler handler = errorHandler.getClass().newInstance();
validator.setErrorHandler(handler);
try {
LOG.trace(""Validating {}"", source);
validator.validate(source, result);
handler.handleErrors(exchange, schema, result);
} catch (SAXParseException e) {
throw new SchemaValidationException(exchange, schema, Collections.singletonList(e),
Collections.<SAXParseException>emptyList(),
Collections.<SAXParseException>emptyList());
}
}
} finally {
IOHelper.close(is);
}
}","+ if (!Boolean.parseBoolean(exchange.getContext().getGlobalOptions().get(ACCESS_EXTERNAL_DTD))) {+ try {+ LOG.debug(""Configuring Validator to not allow access to external DTD/Schema"");+ validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, """");+ validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, """");+ } catch (SAXException e) {+ LOG.warn(e.getMessage(), e);+ }+ }",1
11548,75e08695a04980dbceae6789364717e9d8764d58,ProjectKB,"public class main {
private int getDepth(Class exceptionClass, int depth) {
if (exceptionClass.getName().indexOf(this.exceptionName) != -1) {
return depth;
}
if (exceptionClass.equals(Throwable.class)) {
return -1;
}
return getDepth(exceptionClass.getSuperclass(), depth + 1);
}
}","public class main {
public int getDepth(Throwable ex) {
return getDepth(ex.getClass(), 0);
}
}","+ public int getDepth(Throwable ex) {+ return getDepth(ex.getClass(), 0);- private int getDepth(Class exceptionClass, int depth) {- if (exceptionClass.getName().indexOf(this.exceptionName) != -1) {- return depth;- }- if (exceptionClass.equals(Throwable.class)) {- return -1;- }- return getDepth(exceptionClass.getSuperclass(), depth + 1);",1
18480,4c4cb664f2e2c3866aadf117d22fb54aa8dd0031,ProjectKB,"public class main {
public void onStateUpdateFromItem(State state) {
callback.handleUpdate(state);
}
@Override
public void onCommandFromItem(Command command) {
callback.handleCommand(command);
}
@Override
public void onCommandFromHandler(Command command) {
if (function == null || sourceFormat == null) {
logger.warn(
""Please specify a function and a source format for this Profile in the '{}
}","public class main {
public void onStateUpdateFromItem(State state) {
callback.handleUpdate(state);
}
@Override
public void onCommandFromItem(Command command) {
callback.handleCommand(command);
}
@Override
public void onCommandFromHandler(Command command) {
if (function == null || sourceFormat == null) {
logger.warn(
""Please specify a function and a source format for this Profile in the '{}', and '{}' parameters. Returning the original command now."",
FUNCTION_PARAM, SOURCE_FORMAT_PARAM);
callback.sendCommand(command);
return;
}
}","- ""Please specify a function and a source format for this Profile in the '{}+ ""Please specify a function and a source format for this Profile in the '{}', and '{}' parameters. Returning the original command now."",+ FUNCTION_PARAM, SOURCE_FORMAT_PARAM);+ callback.sendCommand(command);+ return;+ }",1
9159,50e8cea918062780299b2be1343a59a8bc7eb594,ProjectKB,"public class main {
public static void beforeClass() throws Exception {
initCore(""solrconfig.xml"", ""schema.xml"", getFile(""velocity/solr"").getAbsolutePath());
System.out.println(getFile(""velocity/solr"").getAbsolutePath());
}
}","public class main {
public static void beforeClass() throws Exception {
System.setProperty(""params.resource.loader.enabled"", ""true"");
System.setProperty(""solr.resource.loader.enabled"", ""true"");
initCore(""solrconfig.xml"", ""schema.xml"", getFile(""velocity/solr"").getAbsolutePath());
System.out.println(getFile(""velocity/solr"").getAbsolutePath());
}
}","+ System.setProperty(""params.resource.loader.enabled"", ""true"");+ System.setProperty(""solr.resource.loader.enabled"", ""true"");",1
6299,16d39adbc04bb0cdf217226803d05d6956595d8,ProjectKB,"public class main {
public void testRedirectBadWatchdox() throws Exception {
Set<String> redirectUris = new HashSet<String>(Arrays.asList(""http		client.setRegisteredRedirectUri(redirectUris);
String requestedRedirect = ""http:		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
}
}","public class main {
public void testRedirectBadWatchdox() throws Exception {
Set<String> redirectUris = new HashSet<String>(Arrays.asList(""http		client.setRegisteredRedirectUri(redirectUris);
String requestedRedirect = ""http:		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
}
}",- return requestedRedirect;+ UriComponentsBuilder redirectUriBuilder = UriComponentsBuilder.fromUriString(redirectUri);+ UriComponents requestedRedirectUri = UriComponentsBuilder.fromUriString(requestedRedirect).build();+ if (this.matchSubdomains) {+ redirectUriBuilder.host(requestedRedirectUri.getHost());+ }+ if (!this.matchPorts) {+ redirectUriBuilder.port(requestedRedirectUri.getPort());+ }+ redirectUriBuilder.replaceQuery(requestedRedirectUri.getQuery());						redirectUriBuilder.fragment(null);+ return redirectUriBuilder.build().toUriString();,1
7843,1ffa6d1c4555cab9737d76b49142528b57cfdfc,ProjectKB,"public class main {
public static DocumentBuilder documentBuilder() throws ParserConfigurationException {
DocumentBuilderFactory dbf = DOCUMENT_BUILDER_FACTORY.get();
if (dbf == null) {
dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
DOCUMENT_BUILDER_FACTORY.set(dbf);
}
return dbf.newDocumentBuilder();
}
}","public class main {
public static DocumentBuilder documentBuilder() throws ParserConfigurationException {
DocumentBuilderFactory dbf = DOCUMENT_BUILDER_FACTORY.get();
if (dbf == null) {
dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setXIncludeAware(false);
dbf.setExpandEntityReferences(false);
DOCUMENT_BUILDER_FACTORY.set(dbf);
}
return dbf.newDocumentBuilder();
}
}","+ dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setFeature(""http:            dbf.setXIncludeAware(false);+ dbf.setExpandEntityReferences(false);",1
2892,8fbe2e,ProjectKB,"public class main {
private HeaderParseStatus skipLine() throws IOException {
headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;
boolean eol = false;
while (!eol) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {
return HeaderParseStatus.NEED_MORE_DATA;
}
}
int pos = byteBuffer.position();
byte chr = byteBuffer.get();
if (chr == Constants.CR) {
} else if (chr == Constants.LF) {
eol = true;
} else {
headerData.lastSignificantChar = pos;
}
}
if (rejectIllegalHeaderName || log.isDebugEnabled()) {
String message = sm.getString(""iib.invalidheader"",
HeaderUtil.toPrintableString(byteBuffer.array(), headerData.lineStart,
headerData.lastSignificantChar - headerData.lineStart + 1));
if (rejectIllegalHeaderName) {
throw new IllegalArgumentException(message);
}
log.debug(message);
}
headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}","public class main {
private HeaderParseStatus skipLine() throws IOException {
headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;
boolean eol = false;
byte chr = 0;
byte prevChr = 0;
while (!eol) {
if (byteBuffer.position() >= byteBuffer.limit()) {
if (!fill(false)) {
return HeaderParseStatus.NEED_MORE_DATA;
}
}
int pos = byteBuffer.position();
prevChr = chr;
chr = byteBuffer.get();
if (chr == Constants.CR) {
} else if (prevChr == Constants.CR && chr == Constants.LF) {
eol = true;
} else {
headerData.lastSignificantChar = pos;
}
}
if (rejectIllegalHeader || log.isDebugEnabled()) {
String message = sm.getString(""iib.invalidheader"",
HeaderUtil.toPrintableString(byteBuffer.array(), headerData.lineStart,
headerData.lastSignificantChar - headerData.lineStart + 1));
if (rejectIllegalHeader) {
throw new IllegalArgumentException(message);
}
log.debug(message);
}
headerParsePos = HeaderParsePosition.HEADER_START;
return HeaderParseStatus.HAVE_MORE_HEADERS;
}
}",+ byte chr = 0;+ byte prevChr = 0;+ prevChr = chr;- byte chr = byteBuffer.get();+ chr = byteBuffer.get();- } else if (chr == Constants.LF) {+ } else if (prevChr == Constants.CR && chr == Constants.LF) {- if (rejectIllegalHeaderName || log.isDebugEnabled()) {+ if (rejectIllegalHeader || log.isDebugEnabled()) {- if (rejectIllegalHeaderName) {+ if (rejectIllegalHeader) {,1
12398,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public void doHandshake(final NextFilter nextFilter) {
logger.debug("" doHandshake()"");
writeRequest(nextFilter, request);
}
}","public class main {
public void doHandshake(final NextFilter nextFilter) {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug("" doHandshake()"");
}
writeRequest(nextFilter, request);
}
}","+ if (LOGGER.isDebugEnabled()) {- logger.debug("" doHandshake()"");+ LOGGER.debug("" doHandshake()"");+ }",1
19146,14b62aca4764d496813f55a43d050b017e01eb65,ProjectKB,"public class main {
public void setCharacterStream() throws  Exception {
String exmplar = ""<x>value</x>"";
SQLXML pgSQLXML = con.createSQLXML();
Writer writer = pgSQLXML.setCharacterStream();
writer.write(exmplar);
PreparedStatement preparedStatement = con.prepareStatement(""insert into xmltab values (?)"");
preparedStatement.setSQLXML(1,pgSQLXML);
preparedStatement.execute();
Statement statement = con.createStatement();
ResultSet rs = statement.executeQuery(""select * from xmltab"");
assertTrue(rs.next());
SQLXML result = rs.getSQLXML(1);
assertNotNull(result);
assertEquals(exmplar, result.getString());
}
}","public class main {
public void setCharacterStream() throws Exception {
String exmplar = ""<x>value</x>"";
SQLXML pgSQLXML = con.createSQLXML();
Writer writer = pgSQLXML.setCharacterStream();
writer.write(exmplar);
PreparedStatement preparedStatement = con.prepareStatement(""insert into xmltab values (?)"");
preparedStatement.setSQLXML(1, pgSQLXML);
preparedStatement.execute();
Statement statement = con.createStatement();
ResultSet rs = statement.executeQuery(""select * from xmltab"");
assertTrue(rs.next());
SQLXML result = rs.getSQLXML(1);
assertNotNull(result);
assertEquals(exmplar, result.getString());
}
}","- public void setCharacterStream() throws  Exception {+ public void setCharacterStream() throws Exception {- preparedStatement.setSQLXML(1,pgSQLXML);+ preparedStatement.setSQLXML(1, pgSQLXML);",1
6661,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public synchronized int getKeySequenceNumber(Map conf) throws KeyNotFoundException {
TreeSet<Integer> sequenceNumbers = new TreeSet<Integer>();
CuratorFramework zkClient = BlobStoreUtils.createZKClient(conf);
try {
if (zkClient.checkExists().forPath(BLOBSTORE_SUBTREE + ""/"" + key) == null) {
zkClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT)
.withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE).forPath(BLOBSTORE_MAX_KEY_SEQUENCE_SUBTREE + ""/"" + key);
zkClient.setData().forPath(BLOBSTORE_MAX_KEY_SEQUENCE_SUBTREE + ""/"" + key,
ByteBuffer.allocate(INT_CAPACITY).putInt(INITIAL_SEQUENCE_NUMBER).array());
return INITIAL_SEQUENCE_NUMBER;
}
List<String> stateInfoList = zkClient.getChildren().forPath(BLOBSTORE_SUBTREE + ""/"" + key);
LOG.debug(""stateInfoList-size {} stateInfoList-data {}"", stateInfoList.size(), stateInfoList);
if (stateInfoList.isEmpty()) {
return getMaxSequenceNumber(zkClient);
}
LOG.debug(""stateInfoSize {}"", stateInfoList.size());
for (String stateInfo : stateInfoList) {
sequenceNumbers.add(Integer.parseInt(BlobStoreUtils.normalizeNimbusHostPortSequenceNumberInfo(stateInfo)
.getSequenceNumber()));
}
int currentSeqNumber = getMaxSequenceNumber(zkClient);
if (!checkIfStateContainsCurrentNimbusHost(stateInfoList, nimbusInfo) && !nimbusInfo.isLeader()) {
if (sequenceNumbers.last() < currentSeqNumber) {
return currentSeqNumber;
} else {
return INITIAL_SEQUENCE_NUMBER - 1;
}
}
if (!checkIfStateContainsCurrentNimbusHost(stateInfoList, nimbusInfo) && nimbusInfo.isLeader()) {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return currentSeqNumber + 1;
}
if (sequenceNumbers.size() == 1) {
if (sequenceNumbers.first() < currentSeqNumber) {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return currentSeqNumber + 1;
} else {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return sequenceNumbers.first() + 1;
}
}
return sequenceNumbers.last();
} catch (KeeperException.NoNodeException e) {
throw new KeyNotFoundException(key);
} catch(Exception e) {
LOG.error(""Exception {}
}","public class main {
public synchronized int getKeySequenceNumber(Map conf, List<ACL> defaultAcls) throws KeyNotFoundException {
TreeSet<Integer> sequenceNumbers = new TreeSet<Integer>();
CuratorFramework zkClient = BlobStoreUtils.createZKClient(conf, defaultAcls);
try {
if (zkClient.checkExists().forPath(BLOBSTORE_SUBTREE + ""/"" + key) == null) {
zkClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT)
.withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE).forPath(BLOBSTORE_MAX_KEY_SEQUENCE_SUBTREE + ""/"" + key);
zkClient.setData().forPath(BLOBSTORE_MAX_KEY_SEQUENCE_SUBTREE + ""/"" + key,
ByteBuffer.allocate(INT_CAPACITY).putInt(INITIAL_SEQUENCE_NUMBER).array());
return INITIAL_SEQUENCE_NUMBER;
}
List<String> stateInfoList = zkClient.getChildren().forPath(BLOBSTORE_SUBTREE + ""/"" + key);
LOG.debug(""stateInfoList-size {} stateInfoList-data {}"", stateInfoList.size(), stateInfoList);
if (stateInfoList.isEmpty()) {
return getMaxSequenceNumber(zkClient);
}
LOG.debug(""stateInfoSize {}"", stateInfoList.size());
for (String stateInfo : stateInfoList) {
sequenceNumbers.add(Integer.parseInt(BlobStoreUtils.normalizeNimbusHostPortSequenceNumberInfo(stateInfo)
.getSequenceNumber()));
}
int currentSeqNumber = getMaxSequenceNumber(zkClient);
if (!checkIfStateContainsCurrentNimbusHost(stateInfoList, nimbusInfo) && !nimbusInfo.isLeader()) {
if (sequenceNumbers.last() < currentSeqNumber) {
return currentSeqNumber;
} else {
return INITIAL_SEQUENCE_NUMBER - 1;
}
}
if (!checkIfStateContainsCurrentNimbusHost(stateInfoList, nimbusInfo) && nimbusInfo.isLeader()) {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return currentSeqNumber + 1;
}
if (sequenceNumbers.size() == 1) {
if (sequenceNumbers.first() < currentSeqNumber) {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return currentSeqNumber + 1;
} else {
incrementMaxSequenceNumber(zkClient, currentSeqNumber);
return sequenceNumbers.first() + 1;
}
}
return sequenceNumbers.last();
} catch (KeeperException.NoNodeException e) {
throw new KeyNotFoundException(key);
} catch(Exception e) {
LOG.error(""Exception {}
}","- public synchronized int getKeySequenceNumber(Map conf) throws KeyNotFoundException {+ public synchronized int getKeySequenceNumber(Map conf, List<ACL> defaultAcls) throws KeyNotFoundException {- CuratorFramework zkClient = BlobStoreUtils.createZKClient(conf);+ CuratorFramework zkClient = BlobStoreUtils.createZKClient(conf, defaultAcls);",1
4826,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.clients().get(foo.getId()).roles().create(new RoleRepresentation());
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.clients().get(foo.getId()).roles().create(new RoleRepresentation());+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
13045,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.CLUSTER_READ);
}
}","- functionStringMap.put(new AlterRuntimeConfigFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new AlterRuntimeConfigFunction(), ""*"");- functionStringMap.put(new ChangeLogLevelFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new ChangeLogLevelFunction(), ""*"");- functionStringMap.put(new CloseDurableClientFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableClientFunction(), ""*"");- functionStringMap.put(new CloseDurableCqFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableCqFunction(), ""*"");- functionStringMap.put(new ContinuousQueryFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ContinuousQueryFunction(), ""*"");- functionStringMap.put(new CreateAsyncEventQueueFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new CreateAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new CreateDefinedIndexesFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateDefinedIndexesFunction(), ""*"");- functionStringMap.put(new CreateDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new CreateDiskStoreFunction(), ""*"");- functionStringMap.put(new CreateIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateIndexFunction(), ""*"");- functionStringMap.put(new DataCommandFunction(), ""DATA"");+ functionStringMap.put(new DataCommandFunction(), ""*"");- functionStringMap.put(new DeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new DeployFunction(), ""*"");- functionStringMap.put(new DescribeDiskStoreFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new DestroyDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new DestroyDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new DestroyIndexFunction(), ""*"");- functionStringMap.put(new ExportConfigFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportConfigFunction(), ""*"");- functionStringMap.put(new ExportDataFunction(), ""DATA:READ"");+ functionStringMap.put(new ExportDataFunction(), ""*"");- functionStringMap.put(new ExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportLogsFunction(), ""*"");- functionStringMap.put(new FetchRegionAttributesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchRegionAttributesFunction(), ""*"");- functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""*"");- functionStringMap.put(new GarbageCollectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new GarbageCollectionFunction(), ""*"");- functionStringMap.put(new GatewayReceiverCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewayReceiverCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderDestroyFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderDestroyFunction(), ""*"");- functionStringMap.put(new GetMemberConfigInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberConfigInformationFunction(), ""*"");- functionStringMap.put(new GetMemberInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberInformationFunction(), ""*"");- functionStringMap.put(new GetRegionDescriptionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionDescriptionFunction(), ""*"");- functionStringMap.put(new GetRegionsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionsFunction(), ""*"");- functionStringMap.put(new GetStackTracesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetStackTracesFunction(), ""*"");- functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""*"");- functionStringMap.put(new ImportDataFunction(), ""DATA:WRITE"");+ functionStringMap.put(new ImportDataFunction(), ""*"");- functionStringMap.put(new ListAsyncEventQueuesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListAsyncEventQueuesFunction(), ""*"");- functionStringMap.put(new ListDeployedFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDeployedFunction(), ""*"");- functionStringMap.put(new ListDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDiskStoresFunction(), ""*"");- functionStringMap.put(new ListDurableCqNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDurableCqNamesFunction(), ""*"");- functionStringMap.put(new ListFunctionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListFunctionFunction(), ""*"");- functionStringMap.put(new ListIndexFunction(), ""CLUSTER:READ:QUERY"");+ functionStringMap.put(new ListIndexFunction(), ""*"");- functionStringMap.put(new NetstatFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new NetstatFunction(), ""*"");- functionStringMap.put(new RebalanceFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RebalanceFunction(), ""*"");- functionStringMap.put(new RegionAlterFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionAlterFunction(), ""*"");- functionStringMap.put(new RegionCreateFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionCreateFunction(), ""*"");- functionStringMap.put(new RegionDestroyFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionDestroyFunction(), ""*"");- functionStringMap.put(new ShowMissingDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ShowMissingDiskStoresFunction(), ""*"");- functionStringMap.put(new ShutDownFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new ShutDownFunction(), ""*"");- functionStringMap.put(new SizeExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new SizeExportLogsFunction(), ""*"");- functionStringMap.put(new UndeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UndeployFunction(), ""*"");- functionStringMap.put(new UnregisterFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UnregisterFunction(), ""*"");- functionStringMap.put(new GetRegionNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionNamesFunction(), ""*"");- functionStringMap.put(new RecreateCacheFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new RecreateCacheFunction(), ""*"");- functionStringMap.put(new DownloadJarFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DownloadJarFunction(), ""*"");",1
18368,992b5d9c24102ad20330d36c0a71162753a37449,ProjectKB,"public class main {
public SymbolHash() {
fBuckets = new Entry[fTableSize];
}
}","public class main {
public SymbolHash() {
this(TABLE_SIZE);
}
}",- fBuckets = new Entry[fTableSize];+ this(TABLE_SIZE);,1
18219,94de25eb9fb8be6e6deba38a72afcf7b14ce1d0b,ProjectKB,"public class main {
protected long readFromNetwork() throws IOException {
QpidByteBuffer buffer = _delegate.getNetInputBuffer();
long read = buffer.read(_socketChannel);
if (read == -1) {
_closed.set(true);
}
}","public class main {
protected long readFromNetwork() throws IOException {
QpidByteBuffer buffer = _delegate.getNetInputBuffer();
long read = buffer.read(_socketChannel);
if (read == -1) {
_closed.set(true);
_protocolEngine.notifyWork();
}
}",+ _protocolEngine.notifyWork();,1
6358,adb1e6d19c681f394c9513799b81b527b0cb007,ProjectKB,"public class main {
protected String createTemplate(Map<String, Object> model, HttpServletRequest request) {
String template = TEMPLATE;
if (model.containsKey(""scopes"") || request.getAttribute(""scopes"") != null) {
template = template.replace(""%scopes%"", createScopes(model, request)).replace(""%denial%"", """");
}
else {
template = template.replace(""%scopes%"", """").replace(""%denial%"", DENIAL);
}
if (model.containsKey(""_csrf"") || request.getAttribute(""_csrf"") != null) {
template = template.replace(""%csrf%"", CSRF);
}
else {
template = template.replace(""%csrf%"", """");
}
return template;
}
}","public class main {
protected String createTemplate(Map<String, Object> model, HttpServletRequest request) {
AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(""authorizationRequest"");
String clientId = authorizationRequest.getClientId();
StringBuilder builder = new StringBuilder();
builder.append(""<html><body><h1>OAuth Approval</h1>"");
builder.append(""<p>Do you authorize \"""").append(HtmlUtils.htmlEscape(clientId));
builder.append(""\"" to access your protected resources?</p>"");
builder.append(""<form id=\""confirmationForm\"" name=\""confirmationForm\"" action=\"""");
String requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();
if (requestPath == null) {
requestPath = """";
}
builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");
builder.append(""<input name=\""user_oauth_approval\"" value=\""true\"" type=\""hidden\""/>"");
String csrfTemplate = null;
CsrfToken csrfToken = (CsrfToken) (model.containsKey(""_csrf"") ? model.get(""_csrf"") : request.getAttribute(""_csrf""));
if (csrfToken != null) {
csrfTemplate = ""<input type=\""hidden\"" name=\"""" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) +
""\"" value=\"""" + HtmlUtils.htmlEscape(csrfToken.getToken()) + ""\"" />"";
}
if (csrfTemplate != null) {
builder.append(csrfTemplate);
}
String authorizeInputTemplate = ""<label><input name=\""authorize\"" value=\""Authorize\"" type=\""submit\""/></label></form>"";
if (model.containsKey(""scopes"") || request.getAttribute(""scopes"") != null) {
builder.append(createScopes(model, request));
builder.append(authorizeInputTemplate);
} else {
builder.append(authorizeInputTemplate);
builder.append(""<form id=\""denialForm\"" name=\""denialForm\"" action=\"""");
builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");
builder.append(""<input name=\""user_oauth_approval\"" value=\""false\"" type=\""hidden\""/>"");
if (csrfTemplate != null) {
builder.append(csrfTemplate);
}
builder.append(""<label><input name=\""deny\"" value=\""Deny\"" type=\""submit\""/></label></form>"");
}
builder.append(""</body></html>"");
return builder.toString();
}
}","- String template = TEMPLATE;+ AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(""authorizationRequest"");+ String clientId = authorizationRequest.getClientId();+ StringBuilder builder = new StringBuilder();+ builder.append(""<html><body><h1>OAuth Approval</h1>"");+ builder.append(""<p>Do you authorize \"""").append(HtmlUtils.htmlEscape(clientId));+ builder.append(""\"" to access your protected resources?</p>"");+ builder.append(""<form id=\""confirmationForm\"" name=\""confirmationForm\"" action=\"""");+ String requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();+ if (requestPath == null) {+ requestPath = """";+ }+ builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");+ builder.append(""<input name=\""user_oauth_approval\"" value=\""true\"" type=\""hidden\""/>"");+ String csrfTemplate = null;+ CsrfToken csrfToken = (CsrfToken) (model.containsKey(""_csrf"") ? model.get(""_csrf"") : request.getAttribute(""_csrf""));+ if (csrfToken != null) {+ csrfTemplate = ""<input type=\""hidden\"" name=\"""" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) ++ ""\"" value=\"""" + HtmlUtils.htmlEscape(csrfToken.getToken()) + ""\"" />"";+ }+ if (csrfTemplate != null) {+ builder.append(csrfTemplate);+ }+ String authorizeInputTemplate = ""<label><input name=\""authorize\"" value=\""Authorize\"" type=\""submit\""/></label></form>"";- template = template.replace(""%scopes%"", createScopes(model, request)).replace(""%denial%"", """");+ builder.append(createScopes(model, request));+ builder.append(authorizeInputTemplate);+ } else {+ builder.append(authorizeInputTemplate);+ builder.append(""<form id=\""denialForm\"" name=\""denialForm\"" action=\"""");+ builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");+ builder.append(""<input name=\""user_oauth_approval\"" value=\""false\"" type=\""hidden\""/>"");+ if (csrfTemplate != null) {+ builder.append(csrfTemplate);+ builder.append(""<label><input name=\""deny\"" value=\""Deny\"" type=\""submit\""/></label></form>"");- else {- template = template.replace(""%scopes%"", """").replace(""%denial%"", DENIAL);+ builder.append(""</body></html>"");+ return builder.toString();- if (model.containsKey(""_csrf"") || request.getAttribute(""_csrf"") != null) {- template = template.replace(""%csrf%"", CSRF);- }- else {- template = template.replace(""%csrf%"", """");- }- return template;",1
2427,61c842923a6d60d4aedd126445a8437b53b752c8,ProjectKB,"public class main {
public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {
Map<String, Object> map = new HashMap<String, Object>();
String usernameOrEmail = StringUtils.trimToNull(request.getParameter(""usernameOrEmail""));
if (usernameOrEmail != null) {
map.put(""usernameOrEmail"", usernameOrEmail);
User user = getUserByUsernameOrEmail(usernameOrEmail);
boolean captchaOk;
if (settingsService.isCaptchaEnabled()) {
String recaptchaResponse = request.getParameter(""g-recaptcha-response"");
ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());
captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);
} else {
captchaOk = true;
}
if (!captchaOk) {
map.put(""error"", ""recover.error.invalidcaptcha"");
} else if (user == null) {
map.put(""error"", ""recover.error.usernotfound"");
} else if (user.getEmail() == null) {
map.put(""error"", ""recover.error.noemail"");
} else {
String password = RandomStringUtils.randomAlphanumeric(8);
if (emailPassword(password, user.getUsername(), user.getEmail())) {
map.put(""sentTo"", user.getEmail());
user.setLdapAuthenticated(false);
user.setPassword(password);
securityService.updateUser(user);
} else {
map.put(""error"", ""recover.error.sendfailed"");
}
}
}
if (settingsService.isCaptchaEnabled()) {
map.put(""recaptchaSiteKey"", settingsService.getRecaptchaSiteKey());
}
return new ModelAndView(""recover"", ""model"", map);
}
}","public class main {
public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {
Map<String, Object> map = new HashMap<String, Object>();
String usernameOrEmail = StringUtils.trimToNull(request.getParameter(""usernameOrEmail""));
if (usernameOrEmail != null) {
map.put(""usernameOrEmail"", usernameOrEmail);
User user = getUserByUsernameOrEmail(usernameOrEmail);
boolean captchaOk;
if (settingsService.isCaptchaEnabled()) {
String recaptchaResponse = request.getParameter(""g-recaptcha-response"");
ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());
captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);
} else {
captchaOk = true;
}
if (!captchaOk) {
map.put(""error"", ""recover.error.invalidcaptcha"");
} else if (user == null) {
map.put(""error"", ""recover.error.usernotfound"");
} else if (user.getEmail() == null) {
map.put(""error"", ""recover.error.noemail"");
} else {
StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);
for(int i=0; i<PASSWORD_LENGTH; i++) {
int index = random.nextInt(SYMBOLS.length());
sb.append(SYMBOLS.charAt(index));
}
String password = sb.toString();
if (emailPassword(password, user.getUsername(), user.getEmail())) {
map.put(""sentTo"", user.getEmail());
user.setLdapAuthenticated(false);
user.setPassword(password);
securityService.updateUser(user);
} else {
map.put(""error"", ""recover.error.sendfailed"");
}
}
}
if (settingsService.isCaptchaEnabled()) {
map.put(""recaptchaSiteKey"", settingsService.getRecaptchaSiteKey());
}
return new ModelAndView(""recover"", ""model"", map);
}
}",- String password = RandomStringUtils.randomAlphanumeric(8);+ StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);+ for(int i=0; i<PASSWORD_LENGTH; i++) {+ int index = random.nextInt(SYMBOLS.length());+ sb.append(SYMBOLS.charAt(index));+ }+ String password = sb.toString();,1
8220,8b54b20fc488ae3e83f4a350a707dc0303ade23,ProjectKB,"public class main {
public void deleteAllCollections() throws Exception {
try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {
final CountDownLatch latch = new CountDownLatch(1);
reader.registerCloudCollectionsListener(new CloudCollectionsListener() {
@Override
public void onChange(Set<String> oldCollections, Set<String> newCollections) {
if (newCollections != null && newCollections.size() == 0) {
latch.countDown();
}
}
}
}","public class main {
public void deleteAllCollections() throws Exception {
try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {
final CountDownLatch latch = new CountDownLatch(1);
reader.registerCloudCollectionsListener(new CloudCollectionsListener() {
@Override
public void onChange(Set<String> oldCollections, Set<String> newCollections) {
if (newCollections != null && newCollections.size() == 0) {
latch.countDown();
}
}
}
}",+ }+ });+ reader.createClusterStateWatchersAndUpdate();       reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);+ for (String collection : reader.getClusterState().getCollectionStates().keySet()) {+ CollectionAdminRequest.deleteCollection(collection).process(solrClient);,1
18500,7dbb8e777ece8675f3333a1ef1cb4d6b9be80395,ProjectKB,"public class main {
public Authentication authenticate(Authentication authentication) throws AuthenticationException {
Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,
messages.getMessage(""LdapAuthenticationProvider.onlySupports"",
""Only UsernamePasswordAuthenticationToken is supported""));
final UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken)authentication;
String username = userToken.getName();
String password = (String) authentication.getCredentials();
if (logger.isDebugEnabled()) {
logger.debug(""Processing authentication request for user: "" + username);
}
if (!StringUtils.hasLength(username)) {
throw new BadCredentialsException(messages.getMessage(""LdapAuthenticationProvider.emptyUsername"",
""Empty Username""));
}
Assert.notNull(password, ""Null password was supplied in authentication token"");
DirContextOperations userData = doAuthentication(userToken);
UserDetails user = userDetailsContextMapper.mapUserFromContext(userData, authentication.getName(),
loadUserAuthorities(userData, authentication.getName(), (String)authentication.getCredentials()));
return createSuccessfulAuthentication(userToken, user);
}
}","public class main {
public Authentication authenticate(Authentication authentication) throws AuthenticationException {
Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,
messages.getMessage(""LdapAuthenticationProvider.onlySupports"",
""Only UsernamePasswordAuthenticationToken is supported""));
final UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken)authentication;
String username = userToken.getName();
String password = (String) authentication.getCredentials();
if (logger.isDebugEnabled()) {
logger.debug(""Processing authentication request for user: "" + username);
}
if (!StringUtils.hasLength(username)) {
throw new BadCredentialsException(messages.getMessage(""LdapAuthenticationProvider.emptyUsername"",
""Empty Username""));
}
if (!StringUtils.hasLength(password)) {
throw new BadCredentialsException(messages.getMessage(""AbstractLdapAuthenticationProvider.emptyPassword"",
""Empty Password""));
}
Assert.notNull(password, ""Null password was supplied in authentication token"");
DirContextOperations userData = doAuthentication(userToken);
UserDetails user = userDetailsContextMapper.mapUserFromContext(userData, authentication.getName(),
loadUserAuthorities(userData, authentication.getName(), (String)authentication.getCredentials()));
return createSuccessfulAuthentication(userToken, user);
}
}","+ if (!StringUtils.hasLength(password)) {+ throw new BadCredentialsException(messages.getMessage(""AbstractLdapAuthenticationProvider.emptyPassword"",+ ""Empty Password""));+ }",1
13520,2281e421915627792a88acb64d0fea51ad138092,ProjectKB,"public class main {
public static ServletUriComponentsBuilder fromServletMapping(HttpServletRequest request) {
ServletUriComponentsBuilder builder = fromContextPath(request);
if (StringUtils.hasText(new UrlPathHelper().getPathWithinServletMapping(request))) {
builder.path(request.getServletPath());
}
return builder;
}
}","public class main {
public static ServletUriComponentsBuilder fromServletMapping(HttpServletRequest request) {
ServletUriComponentsBuilder builder = fromContextPath(request);
if (StringUtils.hasText(UrlPathHelper.defaultInstance.getPathWithinServletMapping(request))) {
builder.path(request.getServletPath());
}
return builder;
}
}",- if (StringUtils.hasText(new UrlPathHelper().getPathWithinServletMapping(request))) {+ if (StringUtils.hasText(UrlPathHelper.defaultInstance.getPathWithinServletMapping(request))) {,1
1929,bd8c86c94b7ffc420d94286b25b0c5cc51afda1a,ProjectKB,"public class main {
public void setLanguage(final String language) {
this.language = language;
}
}","public class main {
public void setLanguage(final String language) {
this.language = StringEscapeUtils.escapeHtml4(language);
}
}",- this.language = language;+ this.language = StringEscapeUtils.escapeHtml4(language);,1
8065,772a9b969aa179150aa216e9efd950e512e9d0b4,ProjectKB,"public class main {
public void testTimeout() throws Exception {
ChildProcAppHandle handle = null;
TestClient client = null;
try {
SparkLauncher.setConfig(SparkLauncher.CHILD_CONNECTION_TIMEOUT, ""0"");
handle = LauncherServer.newAppHandle();
Socket s = new Socket(InetAddress.getLoopbackAddress(),
LauncherServer.getServerInstance().getPort());
client = new TestClient(s);
boolean helloSent = false;
int maxTries = 10;
for (int i = 0; i < maxTries; i++) {
try {
if (!helloSent) {
client.send(new Hello(handle.getSecret(), ""1.4.0""));
helloSent = true;
} else {
client.send(new SetAppId(""appId""));
}
fail(""Expected exception caused by connection timeout."");
} catch (IllegalStateException | IOException e) {
break;
} catch (AssertionError e) {
if (i < maxTries - 1) {
Thread.sleep(100);
} else {
throw new AssertionError(""Test failed after "" + maxTries + "" attempts."", e);
}
}
}
} finally {
SparkLauncher.launcherConfig.remove(SparkLauncher.CHILD_CONNECTION_TIMEOUT);
kill(handle);
close(client);
}
}
}","public class main {
public void testTimeout() throws Exception {
ChildProcAppHandle handle = null;
TestClient client = null;
try {
SparkLauncher.setConfig(SparkLauncher.CHILD_CONNECTION_TIMEOUT, ""0"");
handle = LauncherServer.newAppHandle();
Socket s = new Socket(InetAddress.getLoopbackAddress(),
LauncherServer.getServerInstance().getPort());
client = new TestClient(s);
waitForError(client, handle.getSecret());
} finally {
SparkLauncher.launcherConfig.remove(SparkLauncher.CHILD_CONNECTION_TIMEOUT);
kill(handle);
close(client);
}
}
}","+ waitForError(client, handle.getSecret());- boolean helloSent = false;- int maxTries = 10;- for (int i = 0; i < maxTries; i++) {- try {- if (!helloSent) {- client.send(new Hello(handle.getSecret(), ""1.4.0""));- helloSent = true;- } else {- client.send(new SetAppId(""appId""));- }- fail(""Expected exception caused by connection timeout."");- } catch (IllegalStateException | IOException e) {- break;- } catch (AssertionError e) {- if (i < maxTries - 1) {- Thread.sleep(100);- } else {- throw new AssertionError(""Test failed after "" + maxTries + "" attempts."", e);- }- }- }",1
7520,f2694a8ed93f1f63f87ce45d0bb638478b426acd,ProjectKB,"public class main {
public void filterWithParameter() throws IOException, ServletException {
MockHttpServletRequest request = new MockHttpServletRequest(""POST"", ""/hotels"");
request.addParameter(""_method"", ""delete"");
MockHttpServletResponse response = new MockHttpServletResponse();
FilterChain filterChain = new FilterChain() {
@Override
public void doFilter(ServletRequest filterRequest,
ServletResponse filterResponse) throws IOException, ServletException {
assertEquals(""Invalid method"", ""DELETE"",
((HttpServletRequest) filterRequest).getMethod());
}
};
filter.doFilter(request, response, filterChain);
}
}","public class main {
public void filterWithParameter() throws IOException, ServletException {
filterWithParameterForMethod(""delete"", ""DELETE"");
filterWithParameterForMethod(""put"", ""PUT"");
filterWithParameterForMethod(""patch"", ""PATCH"");
}
}","+ filterWithParameterForMethod(""delete"", ""DELETE"");+ filterWithParameterForMethod(""put"", ""PUT"");+ filterWithParameterForMethod(""patch"", ""PATCH"");- MockHttpServletRequest request = new MockHttpServletRequest(""POST"", ""/hotels"");- request.addParameter(""_method"", ""delete"");- MockHttpServletResponse response = new MockHttpServletResponse();- FilterChain filterChain = new FilterChain() {- @Override- public void doFilter(ServletRequest filterRequest,- ServletResponse filterResponse) throws IOException, ServletException {- assertEquals(""Invalid method"", ""DELETE"",- ((HttpServletRequest) filterRequest).getMethod());- }- };- filter.doFilter(request, response, filterChain);",1
7419,b52bf267c7aa528b282d09c637344650f903495,ProjectKB,"public class main {
public Overseer getOpenOverseer() {
List<Overseer> overseers = new ArrayList<>();
for (int i = 0; i < jettys.size(); i++) {
JettySolrRunner runner = getJettySolrRunner(i);
if (runner.getCoreContainer() != null) {
overseers.add(runner.getCoreContainer().getZkController().getOverseer());
}
}
return getOpenOverseer(overseers);
}
public static Overseer getOpenOverseer(List<Overseer> overseers) {
ArrayList<Overseer> shuffledOverseers = new ArrayList<Overseer>(overseers);
Collections.shuffle(shuffledOverseers, LuceneTestCase.random());
for (Overseer overseer : shuffledOverseers) {
if (!overseer.isClosed()) {
return overseer;
}
}","public class main {
public Overseer getOpenOverseer() {
List<Overseer> overseers = new ArrayList<>();
for (int i = 0; i < jettys.size(); i++) {
JettySolrRunner runner = getJettySolrRunner(i);
if (runner.getCoreContainer() != null) {
overseers.add(runner.getCoreContainer().getZkController().getOverseer());
}
}
return getOpenOverseer(overseers);
}
public static Overseer getOpenOverseer(List<Overseer> overseers) {
ArrayList<Overseer> shuffledOverseers = new ArrayList<Overseer>(overseers);
Collections.shuffle(shuffledOverseers, LuceneTestCase.random());
for (Overseer overseer : shuffledOverseers) {
if (!overseer.isClosed()) {
return overseer;
}
}","- }- protected CloudSolrClient buildSolrClient() {- return new Builder(Collections.singletonList(getZkServer().getZkAddress()), Optional.empty())- .withSocketTimeout(90000).withConnectionTimeout(15000).build();   }- private static String getHostContextSuitableForServletContext(String ctx) {- if (ctx == null || """".equals(ctx)) ctx = ""/solr"";- if (ctx.endsWith(""/"")) ctx = ctx.substring(0,ctx.length()-1);- if (!ctx.startsWith(""/"")) ctx = ""/"" + ctx;- return ctx;- }- private Exception checkForExceptions(String message, Collection<Future<JettySolrRunner>> futures) throws InterruptedException {- Exception parsed = new Exception(message);- boolean ok = true;- for (Future<JettySolrRunner> future : futures) {- try {- future.get();",1
910,e9db95831b9db69fbc0bef499b0d3f41bc6448f,ProjectKB,"public class main {
public static void afterTests() throws Exception {
JSONTestUtil.failRepeatedKeys = false;
if (servers != null) {
servers.stop();
servers = null;
}
}
}","public class main {
public static void afterTests() throws Exception {
JSONTestUtil.failRepeatedKeys = false;
if (servers != null) {
servers.stop();
servers = null;
}
systemClearPropertySolrDisableShardsWhitelist();
}
}",+ systemClearPropertySolrDisableShardsWhitelist();,1
4895,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.flows().getAuthenticatorConfig(""nosuch"");
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.flows().getAuthenticatorConfig(""nosuch"");+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
12707,28104c45df424730006a90c52cafda8f7dbcd303,ProjectKB,"public class main {
public static ChannelHandlerFactory newObjectEncoder(String protocol) {
if (""udp"".equals(protocol)) {
return new ShareableChannelHandlerFactory(new DatagramPacketObjectEncoder());
} else {
return new ShareableChannelHandlerFactory(new ObjectEncoder());
}
}
}","public class main {
public static ChannelHandlerFactory newObjectEncoder(String protocol) {
if (""udp"".equals(protocol)) {
return new ShareableChannelHandlerFactory(new DatagramPacketObjectEncoder());
} else {
return new ShareableChannelHandlerFactory(new ObjectEncoder());
}
}
}","- return new ObjectDecoder(ClassResolvers.weakCachingResolver(null));+ return new DatagramPacketDelimiterDecoder(maxFrameLength, stripDelimiter, delimiters);",1
12786,44e6a3036e5a11d90b60c142cf51ed74b792de31,ProjectKB,"public class main {
public void testHttpSendJavaBodyAndReceiveString() throws Exception {
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
});
context.start();
MyCoolBean cool = new MyCoolBean(123, ""Camel"");
String reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool,
Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, String.class);
assertEquals(""OK"", reply);
}
}","public class main {
public void testHttpSendJavaBodyAndReceiveString() throws Exception {
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(true);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class);
assertNotNull(cool);
assertEquals(123, cool.getId());
assertEquals(""Camel"", cool.getName());
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, ""text/plain"");
exchange.getOut().setBody(""OK"");
}
});
}
});
context.start();
MyCoolBean cool = new MyCoolBean(123, ""Camel"");
String reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool,
Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, String.class);
assertEquals(""OK"", reply);
}
}","+ AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);+ ahc.setAllowJavaSerializedObject(true);",1
1577,1c6815ac1b26fb2f079adbe283c43a7fd0885f3,ProjectKB,"public class main {
protected String createTemplate(Map<String, Object> model, HttpServletRequest request) {
String template = TEMPLATE;
if (model.containsKey(""scopes"") || request.getAttribute(""scopes"") != null) {
template = template.replace(""%scopes%"", createScopes(model, request)).replace(""%denial%"", """");
}
else {
template = template.replace(""%scopes%"", """").replace(""%denial%"", DENIAL);
}
if (model.containsKey(""_csrf"") || request.getAttribute(""_csrf"") != null) {
template = template.replace(""%csrf%"", CSRF);
}
else {
template = template.replace(""%csrf%"", """");
}
return template;
}
}","public class main {
protected String createTemplate(Map<String, Object> model, HttpServletRequest request) {
AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(""authorizationRequest"");
String clientId = authorizationRequest.getClientId();
StringBuilder builder = new StringBuilder();
builder.append(""<html><body><h1>OAuth Approval</h1>"");
builder.append(""<p>Do you authorize \"""").append(HtmlUtils.htmlEscape(clientId));
builder.append(""\"" to access your protected resources?</p>"");
builder.append(""<form id=\""confirmationForm\"" name=\""confirmationForm\"" action=\"""");
String requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();
if (requestPath == null) {
requestPath = """";
}
builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");
builder.append(""<input name=\""user_oauth_approval\"" value=\""true\"" type=\""hidden\""/>"");
String csrfTemplate = null;
CsrfToken csrfToken = (CsrfToken) (model.containsKey(""_csrf"") ? model.get(""_csrf"") : request.getAttribute(""_csrf""));
if (csrfToken != null) {
csrfTemplate = ""<input type=\""hidden\"" name=\"""" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) +
""\"" value=\"""" + HtmlUtils.htmlEscape(csrfToken.getToken()) + ""\"" />"";
}
if (csrfTemplate != null) {
builder.append(csrfTemplate);
}
String authorizeInputTemplate = ""<label><input name=\""authorize\"" value=\""Authorize\"" type=\""submit\""/></label></form>"";
if (model.containsKey(""scopes"") || request.getAttribute(""scopes"") != null) {
builder.append(createScopes(model, request));
builder.append(authorizeInputTemplate);
} else {
builder.append(authorizeInputTemplate);
builder.append(""<form id=\""denialForm\"" name=\""denialForm\"" action=\"""");
builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");
builder.append(""<input name=\""user_oauth_approval\"" value=\""false\"" type=\""hidden\""/>"");
if (csrfTemplate != null) {
builder.append(csrfTemplate);
}
builder.append(""<label><input name=\""deny\"" value=\""Deny\"" type=\""submit\""/></label></form>"");
}
builder.append(""</body></html>"");
return builder.toString();
}
}","- String template = TEMPLATE;+ AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(""authorizationRequest"");+ String clientId = authorizationRequest.getClientId();+ StringBuilder builder = new StringBuilder();+ builder.append(""<html><body><h1>OAuth Approval</h1>"");+ builder.append(""<p>Do you authorize \"""").append(HtmlUtils.htmlEscape(clientId));+ builder.append(""\"" to access your protected resources?</p>"");+ builder.append(""<form id=\""confirmationForm\"" name=\""confirmationForm\"" action=\"""");+ String requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();+ if (requestPath == null) {+ requestPath = """";+ }+ builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");+ builder.append(""<input name=\""user_oauth_approval\"" value=\""true\"" type=\""hidden\""/>"");+ String csrfTemplate = null;+ CsrfToken csrfToken = (CsrfToken) (model.containsKey(""_csrf"") ? model.get(""_csrf"") : request.getAttribute(""_csrf""));+ if (csrfToken != null) {+ csrfTemplate = ""<input type=\""hidden\"" name=\"""" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) ++ ""\"" value=\"""" + HtmlUtils.htmlEscape(csrfToken.getToken()) + ""\"" />"";+ }+ if (csrfTemplate != null) {+ builder.append(csrfTemplate);+ }+ String authorizeInputTemplate = ""<label><input name=\""authorize\"" value=\""Authorize\"" type=\""submit\""/></label></form>"";- template = template.replace(""%scopes%"", createScopes(model, request)).replace(""%denial%"", """");+ builder.append(createScopes(model, request));+ builder.append(authorizeInputTemplate);+ } else {+ builder.append(authorizeInputTemplate);+ builder.append(""<form id=\""denialForm\"" name=\""denialForm\"" action=\"""");+ builder.append(requestPath).append(""/oauth/authorize\"" method=\""post\"">"");+ builder.append(""<input name=\""user_oauth_approval\"" value=\""false\"" type=\""hidden\""/>"");+ if (csrfTemplate != null) {+ builder.append(csrfTemplate);+ builder.append(""<label><input name=\""deny\"" value=\""Deny\"" type=\""submit\""/></label></form>"");- else {- template = template.replace(""%scopes%"", """").replace(""%denial%"", DENIAL);+ builder.append(""</body></html>"");+ return builder.toString();- if (model.containsKey(""_csrf"") || request.getAttribute(""_csrf"") != null) {- template = template.replace(""%csrf%"", CSRF);- }- else {- template = template.replace(""%csrf%"", """");- }- return template;",1
238,1880d4824e6c5f98170b9a00aad1d437ee2aa12,ProjectKB,"public class main {
public void inform(ResourceLoader loader) throws SolrException {
if(loader == null) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Needs ResourceLoader in order to load config file"");
}
this.loader = loader;
reload();
}
}","public class main {
public void inform(ResourceLoader loader) throws SolrException {
if(loader == null) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Needs ResourceLoader in order to load config file"");
}
this.loader = loader;
reload();
}
}","- InputStream is = null;+ log.debug(""Reloading exchange rates from file {}"", currencyConfigFile);+ Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);- log.debug(""Reloading exchange rates from file ""+this.currencyConfigFile);- is = loader.openResource(currencyConfigFile);- javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();- try {- dbf.setXIncludeAware(true);- dbf.setNamespaceAware(true);- } catch (UnsupportedOperationException e) {- throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""XML parser doesn't support XInclude option"", e);- }- try {- Document doc = dbf.newDocumentBuilder().parse(is);+ } catch (SAXException | IOException | XPathExpressionException e) {- } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error parsing currency config."", e);- }- } catch (IOException e) {- throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while opening Currency configuration file ""+currencyConfigFile, e);+ throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""Error while parsing currency configuration file ""+currencyConfigFile, e);- } finally {- try {- if (is != null) {- is.close();- }- } catch (IOException e) {- e.printStackTrace();- }- }- this.rates = tmpRates;- return true;",1
313,030e9d00125cbd1ad759668f85488aba1019c668,ProjectKB,"public class main {
public void create_withThreadPool() throws Exception {
final QueuedThreadPool threadPool = new QueuedThreadPool(100);
final JettyServerFactory jettyServerFactory = mock(JettyServerFactory.class);
final StaticFilesConfiguration staticFilesConfiguration = mock(StaticFilesConfiguration.class);
final Routes routes = mock(Routes.class);
when(jettyServerFactory.create(threadPool)).thenReturn(new Server(threadPool));
final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory).withThreadPool(threadPool);
embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);
embeddedServer.ignite(""localhost"", 8080, null, 0,0,0);
verify(jettyServerFactory, times(1)).create(threadPool);
verifyNoMoreInteractions(jettyServerFactory);
}
}","public class main {
public void create_withThreadPool() throws Exception {
final QueuedThreadPool threadPool = new QueuedThreadPool(100);
final JettyServerFactory jettyServerFactory = mock(JettyServerFactory.class);
final StaticFilesConfiguration staticFilesConfiguration = mock(StaticFilesConfiguration.class);
final Routes routes = mock(Routes.class);
when(jettyServerFactory.create(threadPool)).thenReturn(new Server(threadPool));
final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory).withThreadPool(threadPool);
embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);
embeddedServer.ignite(""localhost"", 6758, null, 0, 0, 0);
verify(jettyServerFactory, times(1)).create(threadPool);
verifyNoMoreInteractions(jettyServerFactory);
}
}","- embeddedServer.ignite(""localhost"", 8080, null, 0,0,0);+ embeddedServer.ignite(""localhost"", 6758, null, 0, 0, 0);",1
8087,5ea0a6f6c6a54f1cddf9691a99b0c237afc95348,ProjectKB,"public class main {
public void testNotAllowedReceive() throws Exception {
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(false);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
});
context.start();
MyCoolBean reply = template.requestBody(getAhcEndpointUri(), ""Hello World"", MyCoolBean.class);
assertNull(reply);
}
}","public class main {
public void testNotAllowedReceive() throws Exception {
HttpCommonComponent jetty = context.getComponent(""jetty"", HttpCommonComponent.class);
jetty.setAllowJavaSerializedObject(true);
AhcComponent ahc = context.getComponent(""ahc"", AhcComponent.class);
ahc.setAllowJavaSerializedObject(false);
context.addRoutes(new RouteBuilder() {
@Override
public void configure() throws Exception {
from(getTestServerEndpointUri())
.process(new Processor() {
public void process(Exchange exchange) throws Exception {
String body = exchange.getIn().getBody(String.class);
assertNotNull(body);
assertEquals(""Hello World"", body);
MyCoolBean reply = new MyCoolBean(456, ""Camel rocks"");
exchange.getOut().setBody(reply);
exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
}
});
}
});
context.start();
MyCoolBean reply = template.requestBody(getAhcEndpointUri(), ""Hello World"", MyCoolBean.class);
assertNull(reply);
}
}","+ HttpCommonComponent jetty = context.getComponent(""jetty"", HttpCommonComponent.class);+ jetty.setAllowJavaSerializedObject(true);",1
12558,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest) {
writeData(nextFilter, session, writeRequest, false);
}
public void writeData(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest,
final boolean isHandshakeData) {
ProxyLogicHandler handler = getProxyHandler(session);
synchronized (handler) {
if (handler.isHandshakeComplete()) {
nextFilter.filterWrite(session, writeRequest);
} else if (isHandshakeData) {
LOGGER.debug(""   handshake data: {}"", writeRequest.getMessage());
nextFilter.filterWrite(session, writeRequest);
} else {
if (!session.isConnected()) {
LOGGER.debug("" Write request on closed session. Request ignored."");
}
}","public class main {
public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest) {
writeData(nextFilter, session, writeRequest, false);
}
public void writeData(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest,
final boolean isHandshakeData) {
ProxyLogicHandler handler = getProxyHandler(session);
synchronized (handler) {
if (handler.isHandshakeComplete()) {
nextFilter.filterWrite(session, writeRequest);
} else if (isHandshakeData) {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""   handshake data: {}"", writeRequest.getMessage());
}
nextFilter.filterWrite(session, writeRequest);
} else {
if (!session.isConnected()) {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug("" Write request on closed session. Request ignored."");
}
} else {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug("" Handshaking is not complete yet. Buffering write request."");
}
}","+ if (LOGGER.isDebugEnabled()) {+ }+ if (LOGGER.isDebugEnabled()) {+ }+ } else {+ if (LOGGER.isDebugEnabled()) {+ LOGGER.debug("" Handshaking is not complete yet. Buffering write request."");",1
2385,836c84635e982e74f2f2771b2c8640c3a34221bd,ProjectKB,"public class main {
public void onTurnEnded(TurnEndedEvent event) {
super.onTurnEnded(event);
final String out = event.getTurnSnapshot().getRobots()[0].getOutputStreamSnapshot();
if (out.contains(""access denied (java.net.SocketPermission"")
|| out.contains(""access denied (\""java.net.SocketPermission\"""")) {
messagedAccessDenied = true;
}
}
}","public class main {
public void onTurnEnded(TurnEndedEvent event) {
super.onTurnEnded(event);
final String out = event.getTurnSnapshot().getRobots()[0].getOutputStreamSnapshot();
if (out.contains(""java.lang.SecurityException:"")) {
securityExceptionOccurred = true;
}
}
}","+ if (out.contains(""java.lang.SecurityException:"")) {+ securityExceptionOccurred = true;- if (out.contains(""access denied (java.net.SocketPermission"")- || out.contains(""access denied (\""java.net.SocketPermission\"""")) {- messagedAccessDenied = true;",1
5895,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public <V> GetOperation<V> newGetKeyOperation(Object key, byte[] keyBytes) {
return new GetOperation<>(
codec, channelFactory, key, keyBytes, cacheNameBytes, topologyId, flags(), cfg);
}
}","public class main {
public <V> GetOperation<V> newGetKeyOperation(Object key, byte[] keyBytes, DataFormat dataFormat) {
return new GetOperation<>(
codec, channelFactory, key, keyBytes, cacheNameBytes, topologyId, flags(), cfg, dataFormat);
}
}","- public <V> GetOperation<V> newGetKeyOperation(Object key, byte[] keyBytes) {+ public <V> GetOperation<V> newGetKeyOperation(Object key, byte[] keyBytes, DataFormat dataFormat) {- codec, channelFactory, key, keyBytes, cacheNameBytes, topologyId, flags(), cfg);+ codec, channelFactory, key, keyBytes, cacheNameBytes, topologyId, flags(), cfg, dataFormat);",1
14121,f2d54c4ecb75c7264d4160ca7c461135712201a9,ProjectKB,"public class main {
public void registerChildren(ManagementResourceRegistration resourceRegistration) {
resourceRegistration.registerSubModel(new EncryptionResource());
}
}","public class main {
public void registerChildren(ManagementResourceRegistration resourceRegistration) {
resourceRegistration.registerSubModel(new RestAuthenticationResource());
resourceRegistration.registerSubModel(new EncryptionResource());
}
}",+ resourceRegistration.registerSubModel(new RestAuthenticationResource());,1
4867,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void invoke(RealmResource realm) {
realm.roles().get(""sample-role"").update(newRole);
}
}","public class main {
public void invoke(RealmResource realm) {
clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());
}
}","- realm.roles().get(""sample-role"").update(newRole);+ clients.get(""master-admin"").realms().create(RealmBuilder.create().name(""master"").build());",1
15295,f6362a8f1865314aa507fc5de772848b7e55236,ProjectKB,"public class main {
public void addSudomain_handlesExtraSpaceInSubdomain_currentZone() {
IdentityZoneHolder.set(new IdentityZone().setSubdomain("" somezone2 ""));
String url2 = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }
}","public class main {
public void addSudomain_handlesExtraSpaceInSubdomain_currentZone() {
IdentityZoneHolder.set(new IdentityZone().setSubdomain("" somezone2 ""));
String url2 = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }
@Test
public void addSubdomain_handlesUnexpectedDotInSubdomain() {
String url = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }
@Test
public void addSubdomain_handlesUnexpectedDotInSubdomain_currentZone() {
IdentityZoneHolder.set(new IdentityZone().setSubdomain("" somezone2. ""));
String url2 = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }
}","+ String url2 = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }+ @Test+ public void addSubdomain_handlesUnexpectedDotInSubdomain() {+ String url = UaaUrlUtils.addSubdomainToUrl(""http:        assertEquals(""http:    }+ @Test+ public void addSubdomain_handlesUnexpectedDotInSubdomain_currentZone() {+ IdentityZoneHolder.set(new IdentityZone().setSubdomain("" somezone2. ""));",1
7052,8386d8f7260143802553bc6dbae2880d6c0bafda,ProjectKB,"public class main {
public void configure() {
from(""direct:start"").
marshal().xstream().
process(new Processor() {
public void process(Exchange exchange) throws Exception {
log.debug(""marshalled: "" + exchange.getIn().getBody(String.class));
}
}).
unmarshal().xstream().
to(""mock:result"");
}
}","public class main {
public void configure() {
from(""direct:start"").
marshal().xstream(PurchaseOrder.class).
process(new Processor() {
public void process(Exchange exchange) throws Exception {
log.debug(""marshalled: "" + exchange.getIn().getBody(String.class));
}
}).
unmarshal().xstream(PurchaseOrder.class).
to(""mock:result"");
}
}",- marshal().xstream().+ marshal().xstream(PurchaseOrder.class).- unmarshal().xstream().+ unmarshal().xstream(PurchaseOrder.class).,1
6620,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {
List<ACL> aclList = null;
String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);
if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) {
aclList = new ArrayList<>();
ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);
aclList.add(acl1);
ACL acl2 = new ACL(ZooDefs.Perms.READ, new Id(""digest"", DigestAuthenticationProvider.generateDigest(payload)));
aclList.add(acl2);
}
return aclList;
}
}","public class main {
public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {
List<ACL> aclList = null;
String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);
if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) {
aclList = new ArrayList<>();
ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);
aclList.add(acl1);
ACL acl2 = new ACL(ZooDefs.Perms.READ, new Id(""digest"", DigestAuthenticationProvider.generateDigest(payload)));
aclList.add(acl2);
}
return aclList;
}
}","- } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {+ } else if (UaaUrlUtils.uriHasMatchingHost(redirectFormParam, request.getServerName())) {",1
2008,6b1791179c1092553aa0690da22dac4dff2fc58,ProjectKB,"public class main {
public ModelAndView getAccessConfirmation(Map<String, Object> model, HttpServletRequest request) throws Exception {
String template = createTemplate(model, request);
if (request.getAttribute(""_csrf"") != null) {
model.put(""_csrf"", request.getAttribute(""_csrf""));
}
return new ModelAndView(new SpelView(template), model);
}
}","public class main {
public ModelAndView getAccessConfirmation(Map<String, Object> model, HttpServletRequest request) throws Exception {
final String approvalContent = createTemplate(model, request);
if (request.getAttribute(""_csrf"") != null) {
model.put(""_csrf"", request.getAttribute(""_csrf""));
}
View approvalView = new View() {
@Override
public String getContentType() {
return ""text/html"";
}
@Override
public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
response.setContentType(getContentType());
response.getWriter().append(approvalContent);
}
};
return new ModelAndView(approvalView, model);
}
}","- String template = createTemplate(model, request);+ final String approvalContent = createTemplate(model, request);+ View approvalView = new View() {+ @Override+ public String getContentType() {+ return ""text/html"";+ }+ @Override+ public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {+ response.setContentType(getContentType());+ response.getWriter().append(approvalContent);+ }+ };- return new ModelAndView(new SpelView(template), model);+ return new ModelAndView(approvalView, model);",1
18628,3c20b874fba9cc2a78b9ace10208de1602b56c3f,ProjectKB,"public class main {
public void test_like_endsWith() {
Entity from = from(Entity.class);
where(from.getCode()).like().endsWith(""test"");
Query<Entity> select = select(from);
assertEquals(""select entity_0 from Entity entity_0 where entity_0.code like '%test'"", select.getQuery());
}
}","public class main {
public void test_like_endsWith() {
Entity from = from(Entity.class);
where(from.getCode()).like().endsWith(""test"");
Query<Entity> select = select(from);
assertEquals(""select entity_0 from Entity entity_0 where entity_0.code like :code_1"", select.getQuery());
assertEquals(""%test"", select.getParameters().get(""code_1""));
}
}","- assertEquals(""select entity_0 from Entity entity_0 where entity_0.code like '%test'"", select.getQuery());+ assertEquals(""select entity_0 from Entity entity_0 where entity_0.code like :code_1"", select.getQuery());+ assertEquals(""%test"", select.getParameters().get(""code_1""));",1
16632,2d9b168cfbbf5a6d16fa6e8a5b34503e3dc42364,ProjectKB,"public class main {
public boolean isCorsAccessAllowed(String pOrigin) {
return restrictor.isCorsAccessAllowed(pOrigin);
}
}","public class main {
public boolean isCorsAccessAllowed(String pOrigin) {
return restrictor.isCorsAccessAllowed(pOrigin);
}
}","- requestHandler.checkClientIPAccess(pReq.getRemoteHost(),pReq.getRemoteAddr());+ requestHandler.checkAccess(pReq.getRemoteHost(), pReq.getRemoteAddr(),+ getOriginOrReferer(pReq));",1
10593,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public void dumpDirectoryFileRequiresBoth_dataReadAnotherRegion() {
gfsh.executeAndAssertThat(""execute function --region=testRegion --id="" + DumpDirectoryFiles.ID)
.tableHasRowCount(RESULT_HEADER, 1)
.tableHasColumnWithValuesContaining(RESULT_HEADER, ""DATA:READ:testRegion"").statusIsError();
}
}","public class main {
public void dumpDirectoryFileRequiresBoth_dataReadAnotherRegion() {
gfsh.executeAndAssertThat(""execute function --region=testRegion --id="" + DumpDirectoryFiles.ID)
.tableHasRowCount(RESULT_HEADER, 1)
.tableHasRowWithValues(RESULT_HEADER,
""Exception: clusterManage,dataReadRegionB not authorized for DATA:READ:testRegion"")
.statusIsError();
}
}","- .tableHasColumnWithValuesContaining(RESULT_HEADER, ""DATA:READ:testRegion"").statusIsError();+ .tableHasRowWithValues(RESULT_HEADER,+ ""Exception: clusterManage,dataReadRegionB not authorized for DATA:READ:testRegion"")+ .statusIsError();",1
9313,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
public MQTTAutoSslAuthTest(String protocol) {
this.protocol = protocol;
protocolConfig = ""transport.needClientAuth=true"";
}
}","public class main {
public MQTTAutoSslAuthTest(String protocol) {
this.protocol = protocol;
protocolConfig = ""transport.needClientAuth=true&transport.verifyHostName=false&"";
}
}","- protocolConfig = ""transport.needClientAuth=true"";+ protocolConfig = ""transport.needClientAuth=true&transport.verifyHostName=false&"";",1
13184,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.DATA_WRITE);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.DATA_WRITE);
}
}","- functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneCreateIndexFunction(), ""*"");- functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneDescribeIndexFunction(), ""*"");- functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneDestroyIndexFunction(), ""*"");- functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneListIndexFunction(), ""*"");- functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneSearchIndexFunction(), ""*"");- functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneQueryFunction(), ""*"");- functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new WaitUntilFlushedFunction(), ""*"");- functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneGetPageFunction(), ""*"");",1
13021,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.DATA_READ);
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(ResourcePermissions.DATA_READ);
}
}","- functionStringMap.put(new AlterRuntimeConfigFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new AlterRuntimeConfigFunction(), ""*"");- functionStringMap.put(new ChangeLogLevelFunction(), ""CLUSTER:WRITE"");+ functionStringMap.put(new ChangeLogLevelFunction(), ""*"");- functionStringMap.put(new CloseDurableClientFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableClientFunction(), ""*"");- functionStringMap.put(new CloseDurableCqFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CloseDurableCqFunction(), ""*"");- functionStringMap.put(new ContinuousQueryFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ContinuousQueryFunction(), ""*"");- functionStringMap.put(new CreateAsyncEventQueueFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new CreateAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new CreateDefinedIndexesFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateDefinedIndexesFunction(), ""*"");- functionStringMap.put(new CreateDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new CreateDiskStoreFunction(), ""*"");- functionStringMap.put(new CreateIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new CreateIndexFunction(), ""*"");- functionStringMap.put(new DataCommandFunction(), ""DATA"");+ functionStringMap.put(new DataCommandFunction(), ""*"");- functionStringMap.put(new DeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new DeployFunction(), ""*"");- functionStringMap.put(new DescribeDiskStoreFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DescribeDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new DestroyAsyncEventQueueFunction(), ""*"");- functionStringMap.put(new DestroyDiskStoreFunction(), ""CLUSTER:MANAGE:DISK"");+ functionStringMap.put(new DestroyDiskStoreFunction(), ""*"");- functionStringMap.put(new DestroyIndexFunction(), ""CLUSTER:MANAGE:QUERY"");+ functionStringMap.put(new DestroyIndexFunction(), ""*"");- functionStringMap.put(new ExportConfigFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportConfigFunction(), ""*"");- functionStringMap.put(new ExportDataFunction(), ""DATA:READ"");+ functionStringMap.put(new ExportDataFunction(), ""*"");- functionStringMap.put(new ExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ExportLogsFunction(), ""*"");- functionStringMap.put(new FetchRegionAttributesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchRegionAttributesFunction(), ""*"");- functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new FetchSharedConfigurationStatusFunction(), ""*"");- functionStringMap.put(new GarbageCollectionFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new GarbageCollectionFunction(), ""*"");- functionStringMap.put(new GatewayReceiverCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewayReceiverCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderCreateFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderCreateFunction(), ""*"");- functionStringMap.put(new GatewaySenderDestroyFunction(), ""CLUSTER:MANAGE:GATEWAY"");+ functionStringMap.put(new GatewaySenderDestroyFunction(), ""*"");- functionStringMap.put(new GetMemberConfigInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberConfigInformationFunction(), ""*"");- functionStringMap.put(new GetMemberInformationFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetMemberInformationFunction(), ""*"");- functionStringMap.put(new GetRegionDescriptionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionDescriptionFunction(), ""*"");- functionStringMap.put(new GetRegionsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionsFunction(), ""*"");- functionStringMap.put(new GetStackTracesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetStackTracesFunction(), ""*"");- functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetSubscriptionQueueSizeFunction(), ""*"");- functionStringMap.put(new ImportDataFunction(), ""DATA:WRITE"");+ functionStringMap.put(new ImportDataFunction(), ""*"");- functionStringMap.put(new ListAsyncEventQueuesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListAsyncEventQueuesFunction(), ""*"");- functionStringMap.put(new ListDeployedFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDeployedFunction(), ""*"");- functionStringMap.put(new ListDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDiskStoresFunction(), ""*"");- functionStringMap.put(new ListDurableCqNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListDurableCqNamesFunction(), ""*"");- functionStringMap.put(new ListFunctionFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ListFunctionFunction(), ""*"");- functionStringMap.put(new ListIndexFunction(), ""CLUSTER:READ:QUERY"");+ functionStringMap.put(new ListIndexFunction(), ""*"");- functionStringMap.put(new NetstatFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new NetstatFunction(), ""*"");- functionStringMap.put(new RebalanceFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RebalanceFunction(), ""*"");- functionStringMap.put(new RegionAlterFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionAlterFunction(), ""*"");- functionStringMap.put(new RegionCreateFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionCreateFunction(), ""*"");- functionStringMap.put(new RegionDestroyFunction(), ""DATA:MANAGE"");+ functionStringMap.put(new RegionDestroyFunction(), ""*"");- functionStringMap.put(new ShowMissingDiskStoresFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new ShowMissingDiskStoresFunction(), ""*"");- functionStringMap.put(new ShutDownFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new ShutDownFunction(), ""*"");- functionStringMap.put(new SizeExportLogsFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new SizeExportLogsFunction(), ""*"");- functionStringMap.put(new UndeployFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UndeployFunction(), ""*"");- functionStringMap.put(new UnregisterFunction(), ""CLUSTER:MANAGE:DEPLOY"");+ functionStringMap.put(new UnregisterFunction(), ""*"");- functionStringMap.put(new GetRegionNamesFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new GetRegionNamesFunction(), ""*"");- functionStringMap.put(new RecreateCacheFunction(), ""CLUSTER:MANAGE"");+ functionStringMap.put(new RecreateCacheFunction(), ""*"");- functionStringMap.put(new DownloadJarFunction(), ""CLUSTER:READ"");+ functionStringMap.put(new DownloadJarFunction(), ""*"");",1
12863,cdeeaca47dc3bc6f727c79a582c9e4123099526e,ProjectKB,"public class main {
public LibPQFactory(Properties info) throws PSQLException {
try {
sslmode = PGProperty.SSL_MODE.get(info);
SSLContext ctx = SSLContext.getInstance(""TLS"");
String pathsep = System.getProperty(""file.separator"");
String defaultdir;
boolean defaultfile = false;
if (System.getProperty(""os.name"").toLowerCase().contains(""windows"")) {         defaultdir = System.getenv(""APPDATA"") + pathsep + ""postgresql"" + pathsep;
} else {
defaultdir = System.getProperty(""user.home"") + pathsep + "".postgresql"" + pathsep;
}
String sslcertfile = PGProperty.SSL_CERT.get(info);
if (sslcertfile == null) {         defaultfile = true;
sslcertfile = defaultdir + ""postgresql.crt"";
}
String sslkeyfile = PGProperty.SSL_KEY.get(info);
if (sslkeyfile == null) {         defaultfile = true;
sslkeyfile = defaultdir + ""postgresql.pk8"";
}
CallbackHandler cbh;
String sslpasswordcallback = PGProperty.SSL_PASSWORD_CALLBACK.get(info);
if (sslpasswordcallback != null) {
try {
cbh = (CallbackHandler) MakeSSL.instantiate(sslpasswordcallback, info, false, null);
} catch (Exception e) {
throw new PSQLException(
GT.tr(""The password callback class provided {0} could not be instantiated."",
sslpasswordcallback),
PSQLState.CONNECTION_FAILURE, e);
}
} else {
cbh = new ConsoleCallbackHandler(PGProperty.SSL_PASSWORD.get(info));
}
km = new LazyKeyManager(("""".equals(sslcertfile) ? null : sslcertfile),
("""".equals(sslkeyfile) ? null : sslkeyfile), cbh, defaultfile);
TrustManager[] tm;
if (""verify-ca"".equals(sslmode) || ""verify-full"".equals(sslmode)) {
TrustManagerFactory tmf = TrustManagerFactory.getInstance(""PKIX"");
KeyStore ks;
try {
ks = KeyStore.getInstance(""jks"");
} catch (KeyStoreException e) {
throw new NoSuchAlgorithmException(""jks KeyStore not available"");
}
String sslrootcertfile = PGProperty.SSL_ROOT_CERT.get(info);
if (sslrootcertfile == null) {           sslrootcertfile = defaultdir + ""root.crt"";
}
FileInputStream fis;
try {
fis = new FileInputStream(sslrootcertfile);         } catch (FileNotFoundException ex) {
throw new PSQLException(
GT.tr(""Could not open SSL root certificate file {0}."", sslrootcertfile),
PSQLState.CONNECTION_FAILURE, ex);
}
try {
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
Object[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{});
ks.load(null, null);
for (int i = 0; i < certs.length; i++) {
ks.setCertificateEntry(""cert"" + i, (Certificate) certs[i]);
}
tmf.init(ks);
} catch (IOException ioex) {
throw new PSQLException(
GT.tr(""Could not read SSL root certificate file {0}."", sslrootcertfile),
PSQLState.CONNECTION_FAILURE, ioex);
} catch (GeneralSecurityException gsex) {
throw new PSQLException(
GT.tr(""Loading the SSL root certificate {0} into a TrustManager failed."",
sslrootcertfile),
PSQLState.CONNECTION_FAILURE, gsex);
} finally {
try {
fis.close();
} catch (IOException e) {
}
}
tm = tmf.getTrustManagers();
} else {         tm = new TrustManager[]{new NonValidatingTM()};
}
try {
ctx.init(new KeyManager[]{km}, tm, null);
}
}","public class main {
public LibPQFactory(Properties info) throws PSQLException {
super(info);
sslMode = SslMode.of(info);
}
}","+ super(info);+ sslMode = SslMode.of(info);- try {- sslmode = PGProperty.SSL_MODE.get(info);- SSLContext ctx = SSLContext.getInstance(""TLS"");- String pathsep = System.getProperty(""file.separator"");- String defaultdir;- boolean defaultfile = false;- if (System.getProperty(""os.name"").toLowerCase().contains(""windows"")) {         defaultdir = System.getenv(""APPDATA"") + pathsep + ""postgresql"" + pathsep;- } else {- defaultdir = System.getProperty(""user.home"") + pathsep + "".postgresql"" + pathsep;- }- String sslcertfile = PGProperty.SSL_CERT.get(info);- if (sslcertfile == null) {         defaultfile = true;- sslcertfile = defaultdir + ""postgresql.crt"";- }- String sslkeyfile = PGProperty.SSL_KEY.get(info);- if (sslkeyfile == null) {         defaultfile = true;- sslkeyfile = defaultdir + ""postgresql.pk8"";- }- CallbackHandler cbh;- String sslpasswordcallback = PGProperty.SSL_PASSWORD_CALLBACK.get(info);- if (sslpasswordcallback != null) {- try {- cbh = (CallbackHandler) MakeSSL.instantiate(sslpasswordcallback, info, false, null);- } catch (Exception e) {- throw new PSQLException(- GT.tr(""The password callback class provided {0} could not be instantiated."",- sslpasswordcallback),- PSQLState.CONNECTION_FAILURE, e);- }- } else {- cbh = new ConsoleCallbackHandler(PGProperty.SSL_PASSWORD.get(info));- }- km = new LazyKeyManager(("""".equals(sslcertfile) ? null : sslcertfile),- ("""".equals(sslkeyfile) ? null : sslkeyfile), cbh, defaultfile);- TrustManager[] tm;- if (""verify-ca"".equals(sslmode) || ""verify-full"".equals(sslmode)) {- TrustManagerFactory tmf = TrustManagerFactory.getInstance(""PKIX"");- KeyStore ks;- try {- ks = KeyStore.getInstance(""jks"");- } catch (KeyStoreException e) {- throw new NoSuchAlgorithmException(""jks KeyStore not available"");- }- String sslrootcertfile = PGProperty.SSL_ROOT_CERT.get(info);- if (sslrootcertfile == null) {           sslrootcertfile = defaultdir + ""root.crt"";- }- FileInputStream fis;- try {- fis = new FileInputStream(sslrootcertfile);         } catch (FileNotFoundException ex) {- throw new PSQLException(- GT.tr(""Could not open SSL root certificate file {0}."", sslrootcertfile),- PSQLState.CONNECTION_FAILURE, ex);- }- try {- CertificateFactory cf = CertificateFactory.getInstance(""X.509"");- Object[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{});- ks.load(null, null);- for (int i = 0; i < certs.length; i++) {- ks.setCertificateEntry(""cert"" + i, (Certificate) certs[i]);- }- tmf.init(ks);- } catch (IOException ioex) {- throw new PSQLException(- GT.tr(""Could not read SSL root certificate file {0}."", sslrootcertfile),- PSQLState.CONNECTION_FAILURE, ioex);- } catch (GeneralSecurityException gsex) {- throw new PSQLException(- GT.tr(""Loading the SSL root certificate {0} into a TrustManager failed."",- sslrootcertfile),- PSQLState.CONNECTION_FAILURE, gsex);- } finally {- try {- fis.close();- } catch (IOException e) {- }- }- tm = tmf.getTrustManagers();- } else {         tm = new TrustManager[]{new NonValidatingTM()};- }- try {- ctx.init(new KeyManager[]{km}, tm, null);",1
11826,32bfbe5f78e214e2d589f92050228b91d704758e,ProjectKB,"public class main {
public User loadUser(String userName, String organization) {
JpaUser user = UserDirectoryPersistenceUtil.findUser(userName, organization, emf);
return Option.option(user).map(addProviderName).getOrElseNull();
}
public User loadUser(long userId, String organization) {
JpaUser user = UserDirectoryPersistenceUtil.findUser(userId, organization, emf);
return Option.option(user).map(addProviderName).getOrElseNull();
}
public void addUser(JpaUser user) throws UnauthorizedException {
if (!UserDirectoryUtils.isCurrentUserAuthorizedHandleRoles(securityService, user.getRoles()))
throw new UnauthorizedException(""The user is not allowed to set the admin role on other users"");
String encodedPassword = PasswordEncoder.encode(user.getPassword(), user.getUsername());
Set<JpaRole> roles = UserDirectoryPersistenceUtil.saveRoles(filterRoles(user.getRoles()), emf);
JpaOrganization organization = UserDirectoryPersistenceUtil.saveOrganization(
(JpaOrganization) user.getOrganization(), emf);
JpaUser newUser = new JpaUser(user.getUsername(), encodedPassword, organization, user.getName(), user.getEmail(),
user.getProvider(), user.isManageable(), roles);
EntityManager em = null;
EntityTransaction tx = null;
try {
em = emf.createEntityManager();
tx = em.getTransaction();
tx.begin();
em.persist(newUser);
tx.commit();
cache.put(user.getUsername() + DELIMITER + user.getOrganization().getId(), newUser);
} finally {
if (tx.isActive()) {
tx.rollback();
}
}","public class main {
public User loadUser(String userName, String organization) {
JpaUser user = UserDirectoryPersistenceUtil.findUser(userName, organization, emf);
return Option.option(user).map(addProviderName).getOrElseNull();
}
}","- }- public User loadUser(long userId, String organization) {- JpaUser user = UserDirectoryPersistenceUtil.findUser(userId, organization, emf);- return Option.option(user).map(addProviderName).getOrElseNull();- }- public void addUser(JpaUser user) throws UnauthorizedException {- if (!UserDirectoryUtils.isCurrentUserAuthorizedHandleRoles(securityService, user.getRoles()))- throw new UnauthorizedException(""The user is not allowed to set the admin role on other users"");- String encodedPassword = PasswordEncoder.encode(user.getPassword(), user.getUsername());- Set<JpaRole> roles = UserDirectoryPersistenceUtil.saveRoles(filterRoles(user.getRoles()), emf);- JpaOrganization organization = UserDirectoryPersistenceUtil.saveOrganization(- (JpaOrganization) user.getOrganization(), emf);- JpaUser newUser = new JpaUser(user.getUsername(), encodedPassword, organization, user.getName(), user.getEmail(),- user.getProvider(), user.isManageable(), roles);- EntityManager em = null;- EntityTransaction tx = null;- try {- em = emf.createEntityManager();- tx = em.getTransaction();- tx.begin();- em.persist(newUser);- tx.commit();- cache.put(user.getUsername() + DELIMITER + user.getOrganization().getId(), newUser);- } finally {- if (tx.isActive()) {- tx.rollback();",1
12476,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public ProtocolEncoder getEncoder(IoSession session) throws Exception {
return encoder;
}
}","public class main {
public ProtocolEncoder getEncoder(IoSession session) {
return encoder;
}
}",- public ProtocolEncoder getEncoder(IoSession session) throws Exception {+ public ProtocolEncoder getEncoder(IoSession session) {,1
2179,6d63958821232699f0a8423d9b21d4915bfba64,ProjectKB,"public class main {
public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.start(false);
if (!jettys.contains(jetty)) jettys.add(jetty);
return jetty;
}
public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.stop();
jettys.remove(jetty);
return jetty;
}
public void uploadConfigSet(Path configDir, String configName) throws IOException, KeeperException, InterruptedException {
try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),
AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {
ZkConfigManager manager = new ZkConfigManager(zkClient);
manager.uploadConfigDir(configDir, configName);
}
}
public void deleteAllCollections() throws Exception {
try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {
final CountDownLatch latch = new CountDownLatch(1);
reader.registerCloudCollectionsListener(new CloudCollectionsListener() {
@Override
public void onChange(Set<String> oldCollections, Set<String> newCollections) {
if (newCollections != null && newCollections.size() == 0) {
latch.countDown();
}
}
});
reader.createClusterStateWatchersAndUpdate();       reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);
for (String collection : reader.getClusterState().getCollectionStates().keySet()) {
CollectionAdminRequest.deleteCollection(collection).process(solrClient);
}
}","public class main {
public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.start(false);
if (!jettys.contains(jetty)) jettys.add(jetty);
return jetty;
}
public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {
jetty.stop();
jettys.remove(jetty);
return jetty;
}
}","- }- public void uploadConfigSet(Path configDir, String configName) throws IOException, KeeperException, InterruptedException {- try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),- AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {- ZkConfigManager manager = new ZkConfigManager(zkClient);- manager.uploadConfigDir(configDir, configName);- }- }- public void deleteAllCollections() throws Exception {- try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {- final CountDownLatch latch = new CountDownLatch(1);- reader.registerCloudCollectionsListener(new CloudCollectionsListener() {- @Override- public void onChange(Set<String> oldCollections, Set<String> newCollections) {- if (newCollections != null && newCollections.size() == 0) {- latch.countDown();- }- }- });- reader.createClusterStateWatchersAndUpdate();       reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);- for (String collection : reader.getClusterState().getCollectionStates().keySet()) {- CollectionAdminRequest.deleteCollection(collection).process(solrClient);",1
1342,eaf8cc4cd2015456307ff3fcf98e49f2826fa270,ProjectKB,"public class main {
private boolean validateHdfsURL(String webhdfsUrl) {
String[] schemes = {""webhdfs"", ""hdfs"", ""s3"", ""file""};
return validateURL(webhdfsUrl, schemes);
}
}","public class main {
private boolean validateHdfsURL(String webhdfsUrl) {
String[] schemes = {""webhdfs"", ""hdfs"", ""s3"", ""file""};
return validateURL(webhdfsUrl, schemes);
}
}",- if (!validateHdfsURL(webhdfsUrl)) {+ if (!ValidatorUtils.validateHdfsURL(webhdfsUrl)) {,1
13460,4cba3b5a350f4d477466fc73b32cbd653eee840,ProjectKB,"public class main {
public void testTimeout() throws Exception {
ChildProcAppHandle handle = null;
TestClient client = null;
try {
SparkLauncher.setConfig(SparkLauncher.CHILD_CONNECTION_TIMEOUT, ""0"");
handle = LauncherServer.newAppHandle();
Socket s = new Socket(InetAddress.getLoopbackAddress(),
LauncherServer.getServerInstance().getPort());
client = new TestClient(s);
boolean helloSent = false;
int maxTries = 10;
for (int i = 0; i < maxTries; i++) {
try {
if (!helloSent) {
client.send(new Hello(handle.getSecret(), ""1.4.0""));
helloSent = true;
} else {
client.send(new SetAppId(""appId""));
}
fail(""Expected exception caused by connection timeout."");
} catch (IllegalStateException | IOException e) {
break;
} catch (AssertionError e) {
if (i < maxTries - 1) {
Thread.sleep(100);
} else {
throw new AssertionError(""Test failed after "" + maxTries + "" attempts."", e);
}
}
}
} finally {
SparkLauncher.launcherConfig.remove(SparkLauncher.CHILD_CONNECTION_TIMEOUT);
kill(handle);
close(client);
}
}
}","public class main {
public void testTimeout() throws Exception {
ChildProcAppHandle handle = null;
TestClient client = null;
try {
SparkLauncher.setConfig(SparkLauncher.CHILD_CONNECTION_TIMEOUT, ""0"");
handle = LauncherServer.newAppHandle();
Socket s = new Socket(InetAddress.getLoopbackAddress(),
LauncherServer.getServerInstance().getPort());
client = new TestClient(s);
waitForError(client, handle.getSecret());
} finally {
SparkLauncher.launcherConfig.remove(SparkLauncher.CHILD_CONNECTION_TIMEOUT);
kill(handle);
close(client);
}
}
}","+ waitForError(client, handle.getSecret());- boolean helloSent = false;- int maxTries = 10;- for (int i = 0; i < maxTries; i++) {- try {- if (!helloSent) {- client.send(new Hello(handle.getSecret(), ""1.4.0""));- helloSent = true;- } else {- client.send(new SetAppId(""appId""));- }- fail(""Expected exception caused by connection timeout."");- } catch (IllegalStateException | IOException e) {- break;- } catch (AssertionError e) {- if (i < maxTries - 1) {- Thread.sleep(100);- } else {- throw new AssertionError(""Test failed after "" + maxTries + "" attempts."", e);- }- }- }",1
15078,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
public void execute() throws BuildException {
checkConfiguration();
Vector files = getFileList();
if (isUpToDate(files)) {
return;
}
log(""Building "" + archiveType + "": "" + cabFile.getAbsolutePath());
if (!Os.isFamily(""windows"")) {
log(""Using listcab/libcabinet"", Project.MSG_VERBOSE);
StringBuffer sb = new StringBuffer();
Enumeration fileEnum = files.elements();
while (fileEnum.hasMoreElements()) {
sb.append(fileEnum.nextElement()).append(""\n"");
}
sb.append(""\n"").append(cabFile.getAbsolutePath()).append(""\n"");
try {
Process p = Execute.launch(getProject(),
new String[] {""listcab""}, null,
baseDir != null ? baseDir : getProject().getBaseDir(),
true);
OutputStream out = p.getOutputStream();
LogOutputStream outLog = new LogOutputStream(this, Project.MSG_VERBOSE);
LogOutputStream errLog = new LogOutputStream(this, Project.MSG_ERR);
StreamPumper    outPump = new StreamPumper(p.getInputStream(), outLog);
StreamPumper    errPump = new StreamPumper(p.getErrorStream(), errLog);
(new Thread(outPump)).start();
(new Thread(errPump)).start();
out.write(sb.toString().getBytes());
out.flush();
out.close();
int result = DEFAULT_RESULT;
try {
result = p.waitFor();
outPump.waitFor();
outLog.close();
errPump.waitFor();
errLog.close();
} catch (InterruptedException ie) {
log(""Thread interrupted: "" + ie);
}
if (Execute.isFailure(result)) {
log(""Error executing listcab; error code: "" + result);
}
} catch (IOException ex) {
String msg = ""Problem creating "" + cabFile + "" "" + ex.getMessage();
throw new BuildException(msg, getLocation());
}
} else {
try {
File listFile = createListFile(files);
ExecTask exec = createExec();
File outFile = null;
exec.setFailonerror(true);
exec.setDir(baseDir);
if (!doVerbose) {
outFile = FILE_UTILS.createTempFile(""ant"", """", null, true, true);
exec.setOutput(outFile);
}
exec.setExecutable(""cabarc"");
exec.createArg().setValue(""-r"");
exec.createArg().setValue(""-p"");
if (!doCompress) {
exec.createArg().setValue(""-m"");
exec.createArg().setValue(""none"");
}
if (cmdOptions != null) {
exec.createArg().setLine(cmdOptions);
}
exec.createArg().setValue(""n"");
exec.createArg().setFile(cabFile);
exec.createArg().setValue(""@"" + listFile.getAbsolutePath());
exec.execute();
if (outFile != null) {
outFile.delete();
}
listFile.delete();
} catch (IOException ioe) {
String msg = ""Problem creating "" + cabFile + "" "" + ioe.getMessage();
throw new BuildException(msg, getLocation());
}
}
}
}","public class main {
public void execute() throws BuildException {
checkConfiguration();
Vector files = getFileList();
if (isUpToDate(files)) {
return;
}
log(""Building "" + archiveType + "": "" + cabFile.getAbsolutePath());
if (!Os.isFamily(""windows"")) {
log(""Using listcab/libcabinet"", Project.MSG_VERBOSE);
StringBuffer sb = new StringBuffer();
Enumeration fileEnum = files.elements();
while (fileEnum.hasMoreElements()) {
sb.append(fileEnum.nextElement()).append(""\n"");
}
sb.append(""\n"").append(cabFile.getAbsolutePath()).append(""\n"");
try {
Process p = Execute.launch(getProject(),
new String[] {""listcab""}, null,
baseDir != null ? baseDir : getProject().getBaseDir(),
true);
OutputStream out = p.getOutputStream();
LogOutputStream outLog = new LogOutputStream(this, Project.MSG_VERBOSE);
LogOutputStream errLog = new LogOutputStream(this, Project.MSG_ERR);
StreamPumper    outPump = new StreamPumper(p.getInputStream(), outLog);
StreamPumper    errPump = new StreamPumper(p.getErrorStream(), errLog);
(new Thread(outPump)).start();
(new Thread(errPump)).start();
out.write(sb.toString().getBytes());
out.flush();
out.close();
int result = DEFAULT_RESULT;
try {
result = p.waitFor();
outPump.waitFor();
outLog.close();
errPump.waitFor();
errLog.close();
} catch (InterruptedException ie) {
log(""Thread interrupted: "" + ie);
}
if (Execute.isFailure(result)) {
log(""Error executing listcab; error code: "" + result);
}
} catch (IOException ex) {
String msg = ""Problem creating "" + cabFile + "" "" + ex.getMessage();
throw new BuildException(msg, getLocation());
}
} else {
try {
File listFile = createListFile(files);
ExecTask exec = createExec();
File outFile = null;
exec.setFailonerror(true);
exec.setDir(baseDir);
if (!doVerbose) {
outFile = FILE_UTILS.createTempFile(getProject(), ""ant"", """", null, true, true);
exec.setOutput(outFile);
}
exec.setExecutable(""cabarc"");
exec.createArg().setValue(""-r"");
exec.createArg().setValue(""-p"");
if (!doCompress) {
exec.createArg().setValue(""-m"");
exec.createArg().setValue(""none"");
}
if (cmdOptions != null) {
exec.createArg().setLine(cmdOptions);
}
exec.createArg().setValue(""n"");
exec.createArg().setFile(cabFile);
exec.createArg().setValue(""@"" + listFile.getAbsolutePath());
exec.execute();
if (outFile != null) {
outFile.delete();
}
listFile.delete();
} catch (IOException ioe) {
String msg = ""Problem creating "" + cabFile + "" "" + ioe.getMessage();
throw new BuildException(msg, getLocation());
}
}
}
}","- outFile = FILE_UTILS.createTempFile(""ant"", """", null, true, true);+ outFile = FILE_UTILS.createTempFile(getProject(), ""ant"", """", null, true, true);",1
13205,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(
new ResourcePermission(Resource.CLUSTER, Operation.MANAGE, LucenePermission.TARGET));
}
}","public class main {
public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
return Collections.singleton(
new ResourcePermission(Resource.CLUSTER, Operation.MANAGE, LucenePermission.TARGET));
}
}","- functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneCreateIndexFunction(), ""*"");- functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneDescribeIndexFunction(), ""*"");- functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");+ functionStringMap.put(new LuceneDestroyIndexFunction(), ""*"");- functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");+ functionStringMap.put(new LuceneListIndexFunction(), ""*"");- functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneSearchIndexFunction(), ""*"");- functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneQueryFunction(), ""*"");- functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new WaitUntilFlushedFunction(), ""*"");- functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");+ functionStringMap.put(new LuceneGetPageFunction(), ""*"");",1
9690,9beae9ae4226c45cd428035dae81214439324676,ProjectKB,"public class main {
public void directory() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/js/"");
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
assertEquals(404, response.getStatus());
}
@Test
public void missingResourcePath() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, """");
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
assertEquals(404, response.getStatus());
}
@Test(expected=IllegalStateException.class)
public void noPathWithinHandlerMappingAttribute() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
}
@Test(expected=HttpRequestMethodNotSupportedException.class)
public void unsupportedHttpMethod() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/foo.css"");
request.setMethod(""POST"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
}
@Test
public void resourceNotFound() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/not-there.css"");
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
assertEquals(404, response.getStatus());
}
}","public class main {
public void directory() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/js/"");
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
assertEquals(404, response.getStatus());
}
@Test
public void missingResourcePath() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, """");
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
assertEquals(404, response.getStatus());
}
@Test(expected=IllegalStateException.class)
public void noPathWithinHandlerMappingAttribute() throws Exception {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setMethod(""GET"");
MockHttpServletResponse response = new MockHttpServletResponse();
handler.handleRequest(request, response);
}
}","- }- @Test(expected=HttpRequestMethodNotSupportedException.class)- public void unsupportedHttpMethod() throws Exception {- MockHttpServletRequest request = new MockHttpServletRequest();- request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/foo.css"");- request.setMethod(""POST"");- MockHttpServletResponse response = new MockHttpServletResponse();- handler.handleRequest(request, response);- }- @Test- public void resourceNotFound() throws Exception {- MockHttpServletRequest request = new MockHttpServletRequest();- request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, ""/not-there.css"");- request.setMethod(""GET"");- MockHttpServletResponse response = new MockHttpServletResponse();- handler.handleRequest(request, response);- assertEquals(404, response.getStatus());",1
18068,af2969dec58ca89150b84b5d57edcf63d4ce1302,ProjectKB,"public class main {
public void showWebPage(String url, boolean openExternal, boolean clearHistory, Map<String, Object> params) {
LOG.d(TAG, ""showWebPage(%s, %b, %b, HashMap"", url, openExternal, clearHistory);
if (clearHistory) {
engine.clearHistory();
}
if (!openExternal) {
if (pluginManager.shouldAllowNavigation(url)) {
loadUrlIntoView(url, true);
return;
}
LOG.w(TAG, ""showWebPage: Cannot load URL into webview since it is not in white list.  Loading into browser instead. (URL="" + url + "")"");
}
try {
Intent intent = new Intent(Intent.ACTION_VIEW);
Uri uri = Uri.parse(url);
if (""file"".equals(uri.getScheme())) {
intent.setDataAndType(uri, resourceApi.getMimeType(uri));
} else {
intent.setData(uri);
}
cordova.getActivity().startActivity(intent);
} catch (android.content.ActivityNotFoundException e) {
LOG.e(TAG, ""Error loading url "" + url, e);
}
}
}","public class main {
public void showWebPage(String url, boolean openExternal, boolean clearHistory, Map<String, Object> params) {
LOG.d(TAG, ""showWebPage(%s, %b, %b, HashMap)"", url, openExternal, clearHistory);
if (clearHistory) {
engine.clearHistory();
}
if (!openExternal) {
if (pluginManager.shouldAllowNavigation(url)) {
loadUrlIntoView(url, true);
} else {
LOG.w(TAG, ""showWebPage: Refusing to load URL into webview since it is not in the <allow-navigation> whitelist. URL="" + url);
}
}
if (!pluginManager.shouldOpenExternalUrl(url)) {
LOG.w(TAG, ""showWebPage: Refusing to send intent for URL since it is not in the <allow-intent> whitelist. URL="" + url);
return;
}
try {
Intent intent = new Intent(Intent.ACTION_VIEW);
Uri uri = Uri.parse(url);
if (""file"".equals(uri.getScheme())) {
intent.setDataAndType(uri, resourceApi.getMimeType(uri));
} else {
intent.setData(uri);
}
cordova.getActivity().startActivity(intent);
} catch (android.content.ActivityNotFoundException e) {
LOG.e(TAG, ""Error loading url "" + url, e);
}
}
}","- LOG.d(TAG, ""showWebPage(%s, %b, %b, HashMap"", url, openExternal, clearHistory);+ LOG.d(TAG, ""showWebPage(%s, %b, %b, HashMap)"", url, openExternal, clearHistory);+ } else {+ LOG.w(TAG, ""showWebPage: Refusing to load URL into webview since it is not in the <allow-navigation> whitelist. URL="" + url);+ }+ }+ if (!pluginManager.shouldOpenExternalUrl(url)) {+ LOG.w(TAG, ""showWebPage: Refusing to send intent for URL since it is not in the <allow-intent> whitelist. URL="" + url);- }- LOG.w(TAG, ""showWebPage: Cannot load URL into webview since it is not in white list.  Loading into browser instead. (URL="" + url + "")"");",1
5727,46ae8627a6887d0c810905585b40845193b9a9f8,ProjectKB,"public class main {
public void deleteCredential(UserContext userContext, String credentialName) {
if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
throw new EntryNotFoundException(""error.acl.lacks_credential_write"");
}
boolean deleteSucceeded = credentialDataService.delete(credentialName);
if (!deleteSucceeded) {
throw new EntryNotFoundException(""error.acl.lacks_credential_write"");
}
}
}","public class main {
public void deleteCredential(UserContext userContext, String credentialName) {
if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
throw new EntryNotFoundException(""error.credential.invalid_access"");
}
boolean deleteSucceeded = credentialDataService.delete(credentialName);
if (!deleteSucceeded) {
throw new EntryNotFoundException(""error.credential.invalid_access"");
}
}
}","- throw new EntryNotFoundException(""error.acl.lacks_credential_write"");+ throw new EntryNotFoundException(""error.credential.invalid_access"");- throw new EntryNotFoundException(""error.acl.lacks_credential_write"");+ throw new EntryNotFoundException(""error.credential.invalid_access"");",1
6009,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public RemoteCloseableIterator(OperationsFactory operationsFactory, Marshaller marshaller, int batchSize, Set<Integer> segments, boolean metadata) {
this(operationsFactory, marshaller, null, null, segments, batchSize, metadata);
}
}","public class main {
public RemoteCloseableIterator(OperationsFactory operationsFactory, Marshaller marshaller, int batchSize, Set<Integer> segments, boolean metadata, DataFormat dataFormat) {
this(operationsFactory, marshaller, null, null, segments, batchSize, metadata, dataFormat);
}
}","- public RemoteCloseableIterator(OperationsFactory operationsFactory, Marshaller marshaller, int batchSize, Set<Integer> segments, boolean metadata) {+ public RemoteCloseableIterator(OperationsFactory operationsFactory, Marshaller marshaller, int batchSize, Set<Integer> segments, boolean metadata, DataFormat dataFormat) {- this(operationsFactory, marshaller, null, null, segments, batchSize, metadata);+ this(operationsFactory, marshaller, null, null, segments, batchSize, metadata, dataFormat);",1
5456,2ec54fa0c13ae65bdcccff764af081a79fcc05f,ProjectKB,"public class main {
protected void loadResource(String resourceUri) throws TransformerException, IOException {
LOG.trace(""{}
}","public class main {
protected void loadResource(String resourceUri) throws TransformerException, IOException {
LOG.trace(""{}
}","- (String) outboundRequestMsg.getProperty(TO), false);+ (String) outboundRequestMsg.getProperty(TO));",1
15620,08140864e3e4c0994e094c4cf0507932baf6a66,ProjectKB,"public class main {
public final HttpClientBuilder setHostnameVerifier(final X509HostnameVerifier hostnameVerifier) {
this.hostnameVerifier = hostnameVerifier;
return this;
}
}","public class main {
public final HttpClientBuilder setHostnameVerifier(final X509HostnameVerifier hostnameVerifier) {
this.hostnameVerifier = hostnameVerifier;
return this;
}
}",,0
15317,044772641d12b9281185f6cf50f8485b8747132,ProjectKB,"public class main {
public void invalidFirstPosition() {
HttpRange.createByteRange(-1);
}
}","public class main {
public void invalidFirstPosition() {
HttpRange.createByteRange(-1);
}
}",,0
13516,2281e421915627792a88acb64d0fea51ad138092,ProjectKB,"public class main {
public MockHttpServletRequestBuilder contentType(String contentType) {
this.contentType = MediaType.parseMediaType(contentType).toString();
return this;
}
}","public class main {
public MockHttpServletRequestBuilder contentType(String contentType) {
this.contentType = MediaType.parseMediaType(contentType).toString();
return this;
}
}",,0
192,cecb46a3dd1737cef38ae49ad5f57ac7a1b2faaa,ProjectKB,"public class main {
protected final B self() {
return (B) this;
}
}","public class main {
protected final B self() {
return (B) this;
}
}",,0
8890,00c0ee7bc4b8492476b377a6edafcc33411f14b,ProjectKB,"public class main {
public boolean needTransform() {
return false;
}
}","public class main {
public boolean needTransform() {
return false;
}
}",,0
18987,ccdb12b26ff89e0a998a333e84dd84bd713ac76,ProjectKB,"public class main {
public void setFederationConfig(FederationConfig fedConfig) {
this.federationConfig = fedConfig;
}
}","public class main {
public void setFederationConfig(FederationConfig fedConfig) {
this.federationConfig = fedConfig;
}
}",,0
11290,1f464b9412e1b1c08d40c8ffac40edd52731da48,ProjectKB,"public class main {
protected QueueViewMBean getQueueView() throws Exception {
String name = getPhysicalDestinationName();
return getBrokerFacade().getQueue(name);
}
}","public class main {
protected QueueViewMBean getQueueView() throws Exception {
String name = getPhysicalDestinationName();
return getBrokerFacade().getQueue(name);
}
}",,0
18660,d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6,ProjectKB,"public class main {
public PropertyOrFieldReference(boolean nullSafe, String propertyOrFieldName, int pos) {
super(pos);
this.nullSafe = nullSafe;
this.name = propertyOrFieldName;
}
}","public class main {
public PropertyOrFieldReference(boolean nullSafe, String propertyOrFieldName, int pos) {
super(pos);
this.nullSafe = nullSafe;
this.name = propertyOrFieldName;
}
}",,0
7902,9617f2922ee2ae27f08676716224933f0d869719,ProjectKB,"public class main {
public void close() {
if (this.context != null) {
this.context.close();
}
}
}","public class main {
public void close() {
if (this.context != null) {
this.context.close();
}
}
}",,0
5475,56b2b4f2ebecf788fb30d385b3a91e8e1a72296d,ProjectKB,"public class main {
public String toModelFilename(String name) {
return toModelName(name);
}
}","public class main {
public String toModelFilename(String name) {
return toModelName(name);
}
}",,0
11293,1f464b9412e1b1c08d40c8ffac40edd52731da48,ProjectKB,"public class main {
protected String getPhysicalDestinationName() {
return createDestination().getPhysicalName();
}
}","public class main {
protected String getPhysicalDestinationName() {
return createDestination().getPhysicalName();
}
}",,0
16053,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
public void getRegionWithSecretThrows() {
when(delegate.getRegion(""secret"")).thenReturn(secretRegion);
assertThatThrownBy(() -> {
cache.getRegion(""secret"");
}).isInstanceOf(NotAuthorizedException.class);
}
}","public class main {
public void getRegionWithSecretThrows() {
when(delegate.getRegion(""secret"")).thenReturn(secretRegion);
assertThatThrownBy(() -> {
cache.getRegion(""secret"");
}).isInstanceOf(NotAuthorizedException.class);
}
}",,0
17788,fd7b93da30c61a45bac10d8b311f1b79a74910f,ProjectKB,"public class main {
public void error(String message, Throwable t) {
log(message,t);
}
}","public class main {
public void error(String message, Throwable t) {
log(message,t);
}
}",,0
3450,adb2a34306d67559ee81db155826dc67a02cc85e,ProjectKB,"public class main {
public synchronized void setDeliveryMode(byte deliveryMode) {
_propertyFlags |= DELIVERY_MODE_MASK;
_deliveryMode = deliveryMode;
nullEncodedForm();
}
}","public class main {
public synchronized void setDeliveryMode(byte deliveryMode) {
_propertyFlags |= DELIVERY_MODE_MASK;
_deliveryMode = deliveryMode;
nullEncodedForm();
}
}",,0
17992,2207733b82d85e354fa1a6fd114dae665816fdf,ProjectKB,"public class main {
public void realWriteChars(CharBuffer from) throws IOException {
while (from.remaining() > 0) {
conv.convert(from, bb);
if (bb.remaining() == 0) {
break;
}
if (from.remaining() > 0) {
flushByteBuffer();
} else if (conv.isUndeflow() && bb.limit() > bb.capacity() - 4) {
flushByteBuffer();
}
}
}
}","public class main {
public void realWriteChars(CharBuffer from) throws IOException {
while (from.remaining() > 0) {
conv.convert(from, bb);
if (bb.remaining() == 0) {
break;
}
if (from.remaining() > 0) {
flushByteBuffer();
} else if (conv.isUndeflow() && bb.limit() > bb.capacity() - 4) {
flushByteBuffer();
}
}
}
}",,0
3108,338a74dfa42a7b19d39adecacfa5f626a050e807,ProjectKB,"public class main {
public void setStatsEnabled(boolean statsEnabled) {
this.stats.setEnabled(statsEnabled);
}
}","public class main {
public void setStatsEnabled(boolean statsEnabled) {
this.stats.setEnabled(statsEnabled);
}
}",,0
19295,f861f0993c35e664906609cad275e45a71e2aaf1,ProjectKB,"public class main {
public void setDeserializationValidator(DeserializationValidator deserializationValidator) {
this.deserializationValidator = deserializationValidator;
}
}","public class main {
public void setDeserializationValidator(DeserializationValidator deserializationValidator) {
this.deserializationValidator = deserializationValidator;
}
}",,0
726,5ddd605ee96b8551c7eb00b609a0b97939925b77,ProjectKB,"public class main {
private void deleteAttribute(RealmModel realm, String userId, String name) {
em.createNamedQuery(""deleteUserFederatedAttributesByUserAndName"")
.setParameter(""userId"", userId)
.setParameter(""realmId"", realm.getId())
.setParameter(""name"", name)
.executeUpdate();
}
}","public class main {
private void deleteAttribute(RealmModel realm, String userId, String name) {
em.createNamedQuery(""deleteUserFederatedAttributesByUserAndName"")
.setParameter(""userId"", userId)
.setParameter(""realmId"", realm.getId())
.setParameter(""name"", name)
.executeUpdate();
}
}",,0
15626,08140864e3e4c0994e094c4cf0507932baf6a66,ProjectKB,"public class main {
public final HttpClientBuilder setUserTokenHandler(final UserTokenHandler userTokenHandler) {
this.userTokenHandler = userTokenHandler;
return this;
}
}","public class main {
public final HttpClientBuilder setUserTokenHandler(final UserTokenHandler userTokenHandler) {
this.userTokenHandler = userTokenHandler;
return this;
}
}",,0
18637,3c20b874fba9cc2a78b9ace10208de1602b56c3f,ProjectKB,"public class main {
public void test_condition_with_root_and_inner() {
Entity entity = from(Entity.class);
SubEntity subEntity = innerJoin(entity.getSubEntities());
OnGoingLogicalCondition condition = condition(entity.getCode()).eq(""test1"").or(subEntity.getCode()).eq(""test2"");
where(entity.getIntegerField()).gt(10).and(condition);
Query<Entity> select = select(entity);
String query = select.getQuery();
assertEquals(
""select entity_0 from Entity entity_0 inner join entity_0.subEntities subEntity_1 where entity_0.integerField > :integerField_2 and ( entity_0.code = :code_3 or subEntity_1.code = :code_4 )"",
query);
}
}","public class main {
public void test_condition_with_root_and_inner() {
Entity entity = from(Entity.class);
SubEntity subEntity = innerJoin(entity.getSubEntities());
OnGoingLogicalCondition condition = condition(entity.getCode()).eq(""test1"").or(subEntity.getCode()).eq(""test2"");
where(entity.getIntegerField()).gt(10).and(condition);
Query<Entity> select = select(entity);
String query = select.getQuery();
assertEquals(
""select entity_0 from Entity entity_0 inner join entity_0.subEntities subEntity_1 where entity_0.integerField > :integerField_2 and ( entity_0.code = :code_3 or subEntity_1.code = :code_4 )"",
query);
}
}",,0
16088,e7fd5f049c2fd51a528f8062da91a1c75e33b0e8,ProjectKB,"public class main {
public Consumer createConsumer(Processor processor) throws Exception {
throw new UnsupportedOperationException(""Cannot consume from http endpoint"");
}
}","public class main {
public Consumer createConsumer(Processor processor) throws Exception {
throw new UnsupportedOperationException(""Cannot consume from http endpoint"");
}
}",,0
10918,13e43c1412ad72d99030b4eb4cb72c84fa57d5ff,ProjectKB,"public class main {
public void setClient(HttpClient client) {
this.client = client;
}
}","public class main {
public void setClient(HttpClient client) {
this.client = client;
}
}",,0
2623,2dbe2d3c4a3ba63a0132a256ccefbfceb69531c9,ProjectKB,"public class main {
public Draft getDraft() {
return draft;
}
}","public class main {
public Draft getDraft() {
return draft;
}
}",,0
150,cecb46a3dd1737cef38ae49ad5f57ac7a1b2faaa,ProjectKB,"public class main {
public boolean isValidateHeaders() {
return super.isValidateHeaders();
}
}","public class main {
public boolean isValidateHeaders() {
return super.isValidateHeaders();
}
}",,0
13668,5a29daedeb5ac7e9e2af87ce1a7bbfad230d5c8,ProjectKB,"public class main {
protected Leader makeLeader(FileTxnSnapLog logFactory) throws IOException {
LeaderZooKeeperServer zk = new LeaderZooKeeperServer(logFactory, this, this.getZkDb()) {
@Override
protected void setupRequestProcessors() {
RequestProcessor finalProcessor = new FinalRequestProcessor(this);
RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor,
getLeader());
commitProcessor = new CommitProcessor(toBeAppliedProcessor, Long.toString(getServerId()), false,
getZooKeeperServerListener());
commitProcessor.start();
ProposalRequestProcessor proposalProcessor = new MockProposalRequestProcessor(this,
commitProcessor);
proposalProcessor.initialize();
prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);
prepRequestProcessor.start();
firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);
}
};
return new Leader(this, zk);
}
}","public class main {
protected Leader makeLeader(FileTxnSnapLog logFactory) throws IOException {
LeaderZooKeeperServer zk = new LeaderZooKeeperServer(logFactory, this, this.getZkDb()) {
@Override
protected void setupRequestProcessors() {
RequestProcessor finalProcessor = new FinalRequestProcessor(this);
RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor,
getLeader());
commitProcessor = new CommitProcessor(toBeAppliedProcessor, Long.toString(getServerId()), false,
getZooKeeperServerListener());
commitProcessor.start();
ProposalRequestProcessor proposalProcessor = new MockProposalRequestProcessor(this,
commitProcessor);
proposalProcessor.initialize();
prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);
prepRequestProcessor.start();
firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);
}
};
return new Leader(this, zk);
}
}",,0
893,e9db95831b9db69fbc0bef499b0d3f41bc6448f,ProjectKB,"public class main {
public void process(ResponseBuilder rb) throws IOException {
SolrParams params = rb.req.getParams();
if (!params.get(TermsParams.TERMS, ""false"").equals(""true"")) {
return;
}
String[] fields = params.getParams(TermsParams.TERMS_FIELD);
NamedList<Object> termsResult = new SimpleOrderedMap<>();
rb.rsp.add(""terms"", termsResult);
if (fields == null || fields.length==0) return;
boolean termStats = params.getBool(TermsParams.TERMS_STATS, false);
if (termStats) {
NamedList<Number> stats = new SimpleOrderedMap<>();
rb.rsp.add(""indexstats"", stats);
collectStats(rb.req.getSearcher(), stats);
}
String termList = params.get(TermsParams.TERMS_LIST);
if (termList != null) {
boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);
fetchTerms(rb.req.getSearcher(), fields, termList, includeTotalTermFreq, termsResult);
return;
}
int _limit = params.getInt(TermsParams.TERMS_LIMIT, 10);
final int limit = _limit < 0 ? Integer.MAX_VALUE : _limit;
String lowerStr = params.get(TermsParams.TERMS_LOWER);
String upperStr = params.get(TermsParams.TERMS_UPPER);
boolean upperIncl = params.getBool(TermsParams.TERMS_UPPER_INCLUSIVE, false);
boolean lowerIncl = params.getBool(TermsParams.TERMS_LOWER_INCLUSIVE, true);
boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(
params.get(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));
int freqmin = params.getInt(TermsParams.TERMS_MINCOUNT, 1);
int _freqmax = params.getInt(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);
final int freqmax = _freqmax < 0 ? Integer.MAX_VALUE : _freqmax;
String prefix = params.get(TermsParams.TERMS_PREFIX_STR);
String regexp = params.get(TermsParams.TERMS_REGEXP_STR);
Pattern pattern = regexp != null ? Pattern.compile(regexp, resolveRegexpFlags(params)) : null;
boolean raw = params.getBool(TermsParams.TERMS_RAW, false);
final LeafReader indexReader = rb.req.getSearcher().getSlowAtomicReader();
for (String field : fields) {
NamedList<Integer> fieldTerms = new NamedList<>();
Terms terms = indexReader.terms(field);
if (terms == null) {
SchemaField sf = rb.req.getSchema().getFieldOrNull(field);
if (sf != null && sf.getType().isPointField()) {
if (lowerStr!=null || upperStr!=null || prefix!=null || regexp!=null) {
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
String.format(Locale.ROOT, ""The terms component does not support Points-based fields with sorting or with parameters %s,%s,%s,%s "", TermsParams.TERMS_LOWER, TermsParams.TERMS_UPPER, TermsParams.TERMS_PREFIX_STR, TermsParams.TERMS_REGEXP_STR));
}
if (sort) {
PointMerger.ValueIterator valueIterator = new PointMerger.ValueIterator(sf, rb.req.getSearcher().getRawReader().leaves());
MutableValue mv = valueIterator.getMutableValue();
BoundedTreeSet<CountPair<MutableValue, Integer>> queue = (sort ? new BoundedTreeSet<>(limit) : null);
for (; ; ) {
long count = valueIterator.getNextCount();
if (count < 0) break;
if (count < freqmin || count > freqmax) continue;
if (queue.size() < limit || queue.last().val < count || (queue.last().val == count && queue.last().key.compareTo(mv) < 0)) {
queue.add(new CountPair<>(mv.duplicate(), (int) count));
}
}
for (CountPair<MutableValue, Integer> item : queue) {
fieldTerms.add(item.key.toString(), item.val);
}
termsResult.add(field, fieldTerms);
continue;
}
if (!sort) {
PointMerger.ValueIterator valueIterator = new PointMerger.ValueIterator(sf, rb.req.getSearcher().getRawReader().leaves());
MutableValue mv = valueIterator.getMutableValue();
int num = 0;
for(;;) {
long count = valueIterator.getNextCount();
if (count < 0) break;
if (count < freqmin || count > freqmax) continue;
if (++num > limit) break;
fieldTerms.add(mv.toString(), (int)count);             }
termsResult.add(field, fieldTerms);
continue;
}
}
termsResult.add(field, fieldTerms);          continue;
}
termsResult.add(field, fieldTerms);
FieldType ft = raw ? null : rb.req.getSchema().getFieldTypeNoEx(field);
if (ft==null) ft = new StrField();
BytesRef prefixBytes = prefix==null ? null : new BytesRef(prefix);
BytesRef upperBytes = null;
if (upperStr != null) {
BytesRefBuilder b = new BytesRefBuilder();
ft.readableToIndexed(upperStr, b);
upperBytes = b.get();
}
BytesRef lowerBytes;
if (lowerStr == null) {
lowerBytes = prefixBytes;
} else {
lowerBytes = new BytesRef();
if (raw) {
lowerBytes = new BytesRef(lowerStr);
} else {
BytesRefBuilder b = new BytesRefBuilder();
ft.readableToIndexed(lowerStr, b);
lowerBytes = b.get();
}
}
TermsEnum termsEnum = terms.iterator();
BytesRef term = null;
if (lowerBytes != null) {
if (termsEnum.seekCeil(lowerBytes) == TermsEnum.SeekStatus.END) {
termsEnum = null;
} else {
term = termsEnum.term();
if (lowerIncl == false && term.equals(lowerBytes)) {
term = termsEnum.next();
}
}
} else {
term = termsEnum.next();
}
int i = 0;
BoundedTreeSet<CountPair<BytesRef, Integer>> queue = (sort ? new BoundedTreeSet<CountPair<BytesRef, Integer>>(limit) : null);
CharsRefBuilder external = new CharsRefBuilder();
while (term != null && (i<limit || sort)) {
boolean externalized = false;
if (prefixBytes != null && !StringHelper.startsWith(term, prefixBytes)) break;
if (pattern != null) {
ft.indexedToReadable(term, external);
externalized = true;
if (!pattern.matcher(external.get()).matches()) {
term = termsEnum.next();
continue;
}
}
if (upperBytes != null) {
int upperCmp = term.compareTo(upperBytes);
if (upperCmp>0 || (upperCmp==0 && !upperIncl)) break;
}
int docFreq = termsEnum.docFreq();
if (docFreq >= freqmin && docFreq <= freqmax) {
if (sort) {
queue.add(new CountPair<>(BytesRef.deepCopyOf(term), docFreq));
} else {
if (!externalized) {
ft.indexedToReadable(term, external);
}
fieldTerms.add(external.toString(), docFreq);
i++;
}
}
term = termsEnum.next();
}
if (sort) {
for (CountPair<BytesRef, Integer> item : queue) {
if (i >= limit) break;
ft.indexedToReadable(item.key, external);
fieldTerms.add(external.toString(), item.val);
i++;
}
}
}
}
}","public class main {
public void process(ResponseBuilder rb) throws IOException {
SolrParams params = rb.req.getParams();
if (!params.get(TermsParams.TERMS, ""false"").equals(""true"")) {
return;
}
String[] fields = params.getParams(TermsParams.TERMS_FIELD);
NamedList<Object> termsResult = new SimpleOrderedMap<>();
rb.rsp.add(""terms"", termsResult);
if (fields == null || fields.length==0) return;
boolean termStats = params.getBool(TermsParams.TERMS_STATS, false);
if (termStats) {
NamedList<Number> stats = new SimpleOrderedMap<>();
rb.rsp.add(""indexstats"", stats);
collectStats(rb.req.getSearcher(), stats);
}
String termList = params.get(TermsParams.TERMS_LIST);
if (termList != null) {
boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);
fetchTerms(rb.req.getSearcher(), fields, termList, includeTotalTermFreq, termsResult);
return;
}
int _limit = params.getInt(TermsParams.TERMS_LIMIT, 10);
final int limit = _limit < 0 ? Integer.MAX_VALUE : _limit;
String lowerStr = params.get(TermsParams.TERMS_LOWER);
String upperStr = params.get(TermsParams.TERMS_UPPER);
boolean upperIncl = params.getBool(TermsParams.TERMS_UPPER_INCLUSIVE, false);
boolean lowerIncl = params.getBool(TermsParams.TERMS_LOWER_INCLUSIVE, true);
boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(
params.get(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));
int freqmin = params.getInt(TermsParams.TERMS_MINCOUNT, 1);
int _freqmax = params.getInt(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);
final int freqmax = _freqmax < 0 ? Integer.MAX_VALUE : _freqmax;
String prefix = params.get(TermsParams.TERMS_PREFIX_STR);
String regexp = params.get(TermsParams.TERMS_REGEXP_STR);
Pattern pattern = regexp != null ? Pattern.compile(regexp, resolveRegexpFlags(params)) : null;
boolean raw = params.getBool(TermsParams.TERMS_RAW, false);
final LeafReader indexReader = rb.req.getSearcher().getSlowAtomicReader();
for (String field : fields) {
NamedList<Integer> fieldTerms = new NamedList<>();
Terms terms = indexReader.terms(field);
if (terms == null) {
SchemaField sf = rb.req.getSchema().getFieldOrNull(field);
if (sf != null && sf.getType().isPointField()) {
if (lowerStr!=null || upperStr!=null || prefix!=null || regexp!=null) {
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
String.format(Locale.ROOT, ""The terms component does not support Points-based fields with sorting or with parameters %s,%s,%s,%s "", TermsParams.TERMS_LOWER, TermsParams.TERMS_UPPER, TermsParams.TERMS_PREFIX_STR, TermsParams.TERMS_REGEXP_STR));
}
if (sort) {
PointMerger.ValueIterator valueIterator = new PointMerger.ValueIterator(sf, rb.req.getSearcher().getRawReader().leaves());
MutableValue mv = valueIterator.getMutableValue();
BoundedTreeSet<CountPair<MutableValue, Integer>> queue = (sort ? new BoundedTreeSet<>(limit) : null);
for (; ; ) {
long count = valueIterator.getNextCount();
if (count < 0) break;
if (count < freqmin || count > freqmax) continue;
if (queue.size() < limit || queue.last().val < count || (queue.last().val == count && queue.last().key.compareTo(mv) < 0)) {
queue.add(new CountPair<>(mv.duplicate(), (int) count));
}
}
for (CountPair<MutableValue, Integer> item : queue) {
fieldTerms.add(item.key.toString(), item.val);
}
termsResult.add(field, fieldTerms);
continue;
}
if (!sort) {
PointMerger.ValueIterator valueIterator = new PointMerger.ValueIterator(sf, rb.req.getSearcher().getRawReader().leaves());
MutableValue mv = valueIterator.getMutableValue();
int num = 0;
for(;;) {
long count = valueIterator.getNextCount();
if (count < 0) break;
if (count < freqmin || count > freqmax) continue;
if (++num > limit) break;
fieldTerms.add(mv.toString(), (int)count);             }
termsResult.add(field, fieldTerms);
continue;
}
}
termsResult.add(field, fieldTerms);          continue;
}
termsResult.add(field, fieldTerms);
FieldType ft = raw ? null : rb.req.getSchema().getFieldTypeNoEx(field);
if (ft==null) ft = new StrField();
BytesRef prefixBytes = prefix==null ? null : new BytesRef(prefix);
BytesRef upperBytes = null;
if (upperStr != null) {
BytesRefBuilder b = new BytesRefBuilder();
ft.readableToIndexed(upperStr, b);
upperBytes = b.get();
}
BytesRef lowerBytes;
if (lowerStr == null) {
lowerBytes = prefixBytes;
} else {
lowerBytes = new BytesRef();
if (raw) {
lowerBytes = new BytesRef(lowerStr);
} else {
BytesRefBuilder b = new BytesRefBuilder();
ft.readableToIndexed(lowerStr, b);
lowerBytes = b.get();
}
}
TermsEnum termsEnum = terms.iterator();
BytesRef term = null;
if (lowerBytes != null) {
if (termsEnum.seekCeil(lowerBytes) == TermsEnum.SeekStatus.END) {
termsEnum = null;
} else {
term = termsEnum.term();
if (lowerIncl == false && term.equals(lowerBytes)) {
term = termsEnum.next();
}
}
} else {
term = termsEnum.next();
}
int i = 0;
BoundedTreeSet<CountPair<BytesRef, Integer>> queue = (sort ? new BoundedTreeSet<CountPair<BytesRef, Integer>>(limit) : null);
CharsRefBuilder external = new CharsRefBuilder();
while (term != null && (i<limit || sort)) {
boolean externalized = false;
if (prefixBytes != null && !StringHelper.startsWith(term, prefixBytes)) break;
if (pattern != null) {
ft.indexedToReadable(term, external);
externalized = true;
if (!pattern.matcher(external.get()).matches()) {
term = termsEnum.next();
continue;
}
}
if (upperBytes != null) {
int upperCmp = term.compareTo(upperBytes);
if (upperCmp>0 || (upperCmp==0 && !upperIncl)) break;
}
int docFreq = termsEnum.docFreq();
if (docFreq >= freqmin && docFreq <= freqmax) {
if (sort) {
queue.add(new CountPair<>(BytesRef.deepCopyOf(term), docFreq));
} else {
if (!externalized) {
ft.indexedToReadable(term, external);
}
fieldTerms.add(external.toString(), docFreq);
i++;
}
}
term = termsEnum.next();
}
if (sort) {
for (CountPair<BytesRef, Integer> item : queue) {
if (i >= limit) break;
ft.indexedToReadable(item.key, external);
fieldTerms.add(external.toString(), item.val);
i++;
}
}
}
}
}",,0
10896,13e43c1412ad72d99030b4eb4cb72c84fa57d5ff,ProjectKB,"public class main {
public void setBinding(HttpBinding binding) {
super.setBinding(binding);
this.binding = binding;
}
}","public class main {
public void setBinding(HttpBinding binding) {
super.setBinding(binding);
this.binding = binding;
}
}",,0
3166,338a74dfa42a7b19d39adecacfa5f626a050e807,ProjectKB,"public class main {
public void removeProducer(ProducerId producerId) {
producers.remove(producerId);
}
}","public class main {
public void removeProducer(ProducerId producerId) {
producers.remove(producerId);
}
}",,0
14190,f2d54c4ecb75c7264d4160ca7c461135712201a9,ProjectKB,"public class main {
public void setIoWorkerCount(int ioWorkerCount) {
this.ioWorkerCount = ioWorkerCount;
}
}","public class main {
public void setIoWorkerCount(int ioWorkerCount) {
this.ioWorkerCount = ioWorkerCount;
}
}",,0
3443,adb2a34306d67559ee81db155826dc67a02cc85e,ProjectKB,"public class main {
public String getEncodingAsString() {
return (getEncoding() == null) ? null : getEncoding().toString();
}
}","public class main {
public String getEncodingAsString() {
return (getEncoding() == null) ? null : getEncoding().toString();
}
}",,0
6558,1db7e02de3eb0c011ee6681f5a12eb9d166fea8,ProjectKB,"public class main {
public void operatorInstanceOf() throws Exception {
expression = parse(""'xyz' instanceof T(String)"");
assertEquals(true, expression.getValue());
assertCanCompile(expression);
assertEquals(true, expression.getValue());
expression = parse(""'xyz' instanceof T(Integer)"");
assertEquals(false, expression.getValue());
assertCanCompile(expression);
assertEquals(false, expression.getValue());
List<String> list = new ArrayList<>();
expression = parse(""#root instanceof T(java.util.List)"");
assertEquals(true, expression.getValue(list));
assertCanCompile(expression);
assertEquals(true, expression.getValue(list));
List<String>[] arrayOfLists = new List[] {new ArrayList<String>()};
expression = parse(""#root instanceof T(java.util.List[])"");
assertEquals(true, expression.getValue(arrayOfLists));
assertCanCompile(expression);
assertEquals(true, expression.getValue(arrayOfLists));
int[] intArray = new int[] {1,2,3};
expression = parse(""#root instanceof T(int[])"");
assertEquals(true, expression.getValue(intArray));
assertCanCompile(expression);
assertEquals(true, expression.getValue(intArray));
String root = null;
expression = parse(""#root instanceof T(Integer)"");
assertEquals(false, expression.getValue(root));
assertCanCompile(expression);
assertEquals(false, expression.getValue(root));
expression = parse(""#root instanceof T(java.lang.Object)"");
assertEquals(false, expression.getValue(root));
assertCanCompile(expression);
assertEquals(false, expression.getValue(root));
root = ""howdy!"";
expression = parse(""#root instanceof T(java.lang.Object)"");
assertEquals(true, expression.getValue(root));
assertCanCompile(expression);
assertEquals(true, expression.getValue(root));
}
}","public class main {
public void operatorInstanceOf() throws Exception {
expression = parse(""'xyz' instanceof T(String)"");
assertEquals(true, expression.getValue());
assertCanCompile(expression);
assertEquals(true, expression.getValue());
expression = parse(""'xyz' instanceof T(Integer)"");
assertEquals(false, expression.getValue());
assertCanCompile(expression);
assertEquals(false, expression.getValue());
List<String> list = new ArrayList<>();
expression = parse(""#root instanceof T(java.util.List)"");
assertEquals(true, expression.getValue(list));
assertCanCompile(expression);
assertEquals(true, expression.getValue(list));
List<String>[] arrayOfLists = new List[] {new ArrayList<String>()};
expression = parse(""#root instanceof T(java.util.List[])"");
assertEquals(true, expression.getValue(arrayOfLists));
assertCanCompile(expression);
assertEquals(true, expression.getValue(arrayOfLists));
int[] intArray = new int[] {1,2,3};
expression = parse(""#root instanceof T(int[])"");
assertEquals(true, expression.getValue(intArray));
assertCanCompile(expression);
assertEquals(true, expression.getValue(intArray));
String root = null;
expression = parse(""#root instanceof T(Integer)"");
assertEquals(false, expression.getValue(root));
assertCanCompile(expression);
assertEquals(false, expression.getValue(root));
expression = parse(""#root instanceof T(java.lang.Object)"");
assertEquals(false, expression.getValue(root));
assertCanCompile(expression);
assertEquals(false, expression.getValue(root));
root = ""howdy!"";
expression = parse(""#root instanceof T(java.lang.Object)"");
assertEquals(true, expression.getValue(root));
assertCanCompile(expression);
assertEquals(true, expression.getValue(root));
}
}",,0
16049,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
public File getDiskDir() {
return this.diskDir;
}
}","public class main {
public File getDiskDir() {
return this.diskDir;
}
}",,0
10804,13e43c1412ad72d99030b4eb4cb72c84fa57d5ff,ProjectKB,"public class main {
public AsyncHttpClientConfig getClientConfig() {
return clientConfig;
}
}","public class main {
public AsyncHttpClientConfig getClientConfig() {
return clientConfig;
}
}",,0
677,9dc43f3ffe85c9c56faee235a21f23bfceb865c8,ProjectKB,"public class main {
protected ModelAndView redirectToBrowseView() {
return new ModelAndView(""redirect:"" + (isQueue() ? ""queues.jsp"" : ""topics.jsp""));
}
}","public class main {
protected ModelAndView redirectToBrowseView() {
return new ModelAndView(""redirect:"" + (isQueue() ? ""queues.jsp"" : ""topics.jsp""));
}
}",,0
4742,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public void addTestRealms(List<RealmRepresentation> testRealms) {
RealmBuilder builder = RealmBuilder.create().name(REALM_NAME).testMail();
builder.client(ClientBuilder.create().clientId(""test-client"").publicClient().directAccessGrants());
builder.user(UserBuilder.create()
.username(AdminRoles.REALM_ADMIN)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN)
.addPassword(""password""));
builder.user(UserBuilder.create()
.username(""multi"")
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.QUERY_GROUPS)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.VIEW_REALM)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.VIEW_CLIENTS)
.addPassword(""password""));
builder.user(UserBuilder.create().username(""none"").addPassword(""password""));
for (String role : AdminRoles.ALL_REALM_ROLES) {
builder.user(UserBuilder.create().username(role).role(Constants.REALM_MANAGEMENT_CLIENT_ID, role).addPassword(""password""));
}
testRealms.add(builder.build());
RealmBuilder builder2 = RealmBuilder.create().name(""realm2"");
builder2.client(ClientBuilder.create().clientId(""test-client"").publicClient().directAccessGrants());
builder2.user(UserBuilder.create().username(""admin"").role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN).addPassword(""password""));
testRealms.add(builder2.build());
}
}","public class main {
public void addTestRealms(List<RealmRepresentation> testRealms) {
RealmBuilder builder = RealmBuilder.create().name(REALM_NAME).testMail();
builder.client(ClientBuilder.create().clientId(""test-client"").publicClient().directAccessGrants());
builder.user(UserBuilder.create()
.username(AdminRoles.REALM_ADMIN)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN)
.addPassword(""password""));
builder.user(UserBuilder.create()
.username(""multi"")
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.QUERY_GROUPS)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.VIEW_REALM)
.role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.VIEW_CLIENTS)
.addPassword(""password""));
builder.user(UserBuilder.create().username(""none"").addPassword(""password""));
for (String role : AdminRoles.ALL_REALM_ROLES) {
builder.user(UserBuilder.create().username(role).role(Constants.REALM_MANAGEMENT_CLIENT_ID, role).addPassword(""password""));
}
testRealms.add(builder.build());
RealmBuilder builder2 = RealmBuilder.create().name(""realm2"");
builder2.client(ClientBuilder.create().clientId(""test-client"").publicClient().directAccessGrants());
builder2.user(UserBuilder.create().username(""admin"").role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN).addPassword(""password""));
testRealms.add(builder2.build());
}
}",,0
18677,d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e6,ProjectKB,"public class main {
public void stringLiteral() throws Exception {
expression = parser.parseExpression(""'abcde'"");
assertEquals(""abcde"", expression.getValue(new TestClass1(), String.class));
assertCanCompile(expression);
String resultC = expression.getValue(new TestClass1(), String.class);
assertEquals(""abcde"", resultC);
assertEquals(""abcde"", expression.getValue(String.class));
assertEquals(""abcde"", expression.getValue());
assertEquals(""abcde"", expression.getValue(new StandardEvaluationContext()));
expression = parser.parseExpression(""\""abcde\"""");
assertCanCompile(expression);
assertEquals(""abcde"", expression.getValue(String.class));
}
}","public class main {
public void stringLiteral() throws Exception {
expression = parser.parseExpression(""'abcde'"");
assertEquals(""abcde"", expression.getValue(new TestClass1(), String.class));
assertCanCompile(expression);
String resultC = expression.getValue(new TestClass1(), String.class);
assertEquals(""abcde"", resultC);
assertEquals(""abcde"", expression.getValue(String.class));
assertEquals(""abcde"", expression.getValue());
assertEquals(""abcde"", expression.getValue(new StandardEvaluationContext()));
expression = parser.parseExpression(""\""abcde\"""");
assertCanCompile(expression);
assertEquals(""abcde"", expression.getValue(String.class));
}
}",,0
14346,59a0cbb98cef10ddf62d294670aa2e4eb9f8cf8c,ProjectKB,"public class main {
public void testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder() throws InterruptedException {
long deliveryTimeoutMs = 1500L;
setupWithTransactionState(null, true, null);
accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT);
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
time.sleep(deliveryTimeoutMs / 2);
accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT);
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
time.sleep(deliveryTimeoutMs / 2);
client.respond(produceResponse(tp0, 0L, Errors.NONE, 0, 0L));
sender.run(time.milliseconds());          assertEquals(0, client.inFlightRequestCount());
assertEquals(0, sender.inFlightBatches(tp0).size());
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
}
}","public class main {
public void testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder() throws InterruptedException {
long deliveryTimeoutMs = 1500L;
setupWithTransactionState(null, true, null);
accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT);
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
time.sleep(deliveryTimeoutMs / 2);
accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT);
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
time.sleep(deliveryTimeoutMs / 2);
client.respond(produceResponse(tp0, 0L, Errors.NONE, 0, 0L));
sender.run(time.milliseconds());          assertEquals(0, client.inFlightRequestCount());
assertEquals(0, sender.inFlightBatches(tp0).size());
sender.run(time.milliseconds());          assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
}
}",,0
19668,7b168c142b09c3b03e39f1449211e7ddf026a14,ProjectKB,"public class main {
public void searchUserIgnoreCase() {
PagedResult<UserTO> matchingUsers = userService.search(
new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).
fiql(SyncopeClient.getUserSearchConditionBuilder().
is(""username"").equalToIgnoreCase(""RoSsINI"").and(""key"").lessThan(2).query()).build());
assertNotNull(matchingUsers);
assertEquals(1, matchingUsers.getResult().size());
assertEquals(""rossini"", matchingUsers.getResult().iterator().next().getUsername());
assertEquals(""1417acbe-cbf6-4277-9372-e75e04f97000"", matchingUsers.getResult().iterator().next().getKey());
matchingUsers = userService.search(
new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).
fiql(""(fullname=~*oSsINi)"").page(1).size(2).build());
assertNotNull(matchingUsers);
assertEquals(1, matchingUsers.getResult().size());
assertEquals(""rossini"", matchingUsers.getResult().iterator().next().getUsername());
assertEquals(""1417acbe-cbf6-4277-9372-e75e04f97000"", matchingUsers.getResult().iterator().next().getKey());
}
}","public class main {
public void searchUserIgnoreCase() {
PagedResult<UserTO> matchingUsers = userService.search(
new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).
fiql(SyncopeClient.getUserSearchConditionBuilder().
is(""username"").equalToIgnoreCase(""RoSsINI"").and(""key"").lessThan(2).query()).build());
assertNotNull(matchingUsers);
assertEquals(1, matchingUsers.getResult().size());
assertEquals(""rossini"", matchingUsers.getResult().iterator().next().getUsername());
assertEquals(""1417acbe-cbf6-4277-9372-e75e04f97000"", matchingUsers.getResult().iterator().next().getKey());
matchingUsers = userService.search(
new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).
fiql(""(fullname=~*oSsINi)"").page(1).size(2).build());
assertNotNull(matchingUsers);
assertEquals(1, matchingUsers.getResult().size());
assertEquals(""rossini"", matchingUsers.getResult().iterator().next().getUsername());
assertEquals(""1417acbe-cbf6-4277-9372-e75e04f97000"", matchingUsers.getResult().iterator().next().getKey());
}
}",,0
17512,c558f30a6d3820faa3d8c4ad5e54448914ec60d0,ProjectKB,"public class main {
public boolean isSessionSupport() {
return sessionSupport;
}
}","public class main {
public boolean isSessionSupport() {
return sessionSupport;
}
}",,0
1813,5b64969d37cf2906efd4623cfd473041ce5132f,ProjectKB,"public class main {
public boolean isEagerDeleteTargetFile() {
return eagerDeleteTargetFile;
}
}","public class main {
public boolean isEagerDeleteTargetFile() {
return eagerDeleteTargetFile;
}
}",,0
16048,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
public boolean getRegisterInterest() {
return this.registerInterest;
}
}","public class main {
public boolean getRegisterInterest() {
return this.registerInterest;
}
}",,0
10767,632951898a2f1474f699094200367fb405397127,ProjectKB,"public class main {
public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException() {
List<Credential> credentials = newArrayList(version1, version2);
when(credentialDataService.findAllByName(CREDENTIAL_NAME))
.thenReturn(credentials);
when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
.thenReturn(false);
try {
subject.getAllCredentialVersions(userContext, newArrayList(),
CREDENTIAL_NAME);
fail(""should throw exception"");
} catch (EntryNotFoundException e) {
assertThat(e.getMessage(), equalTo(""error.credential.invalid_access""));
}
}
}","public class main {
public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException() {
List<Credential> credentials = newArrayList(version1, version2);
when(credentialDataService.findAllByName(CREDENTIAL_NAME))
.thenReturn(credentials);
when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
.thenReturn(false);
try {
subject.getAllCredentialVersions(userContext, newArrayList(),
CREDENTIAL_NAME);
fail(""should throw exception"");
} catch (EntryNotFoundException e) {
assertThat(e.getMessage(), equalTo(""error.credential.invalid_access""));
}
}
}",,0
14540,8ffa920d3894634aa078f0fdf6b02d270262caf,ProjectKB,"public class main {
public static String secretKeysPath(WorkerTokenServiceType type, String topologyId) {
return secretKeysPath(type) + ZK_SEPERATOR + topologyId;
}
}","public class main {
public static String secretKeysPath(WorkerTokenServiceType type, String topologyId) {
return secretKeysPath(type) + ZK_SEPERATOR + topologyId;
}
}",,0
10685,9b75b603e3a5f5ba6deff13cbb45b070bf2d2239,ProjectKB,"public class main {
public static UriBuilder loginActionEmailVerificationBuilder(URI baseUri) {
return loginActionsBase(baseUri).path(LoginActionsService.class, ""emailVerification"");
}
}","public class main {
public static UriBuilder loginActionEmailVerificationBuilder(URI baseUri) {
return loginActionsBase(baseUri).path(LoginActionsService.class, ""emailVerification"");
}
}",,0
9702,38a882331035ffed205d15a5c92b471fd09659c,ProjectKB,"public class main {
protected void setUp() throws Exception {
ch1_all_received.reset();
ch2_all_received.reset();
}
}","public class main {
protected void setUp() throws Exception {
ch1_all_received.reset();
ch2_all_received.reset();
}
}",,0
13193,aa469239860778eb46e09dd7b390aee08f152480,ProjectKB,"public class main {
public String getId() {
return ID;
}
}","public class main {
public String getId() {
return ID;
}
}",,0
8611,d50df341432df1049c6c85bf2dcda9eb0be04d73,ProjectKB,"public class main {
public SubmitXCommand(Configuration conf, String parentId) {
this(conf);
this.parentId = parentId;
}
}","public class main {
public SubmitXCommand(Configuration conf, String parentId) {
this(conf);
this.parentId = parentId;
}
}",,0
16876,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public boolean isUseRetroactiveConsumer() {
return useRetroactiveConsumer;
}
}","public class main {
public boolean isUseRetroactiveConsumer() {
return useRetroactiveConsumer;
}
}",,0
13602,4491c080cb6c8659fc05441e49307b7d4349aa56,ProjectKB,"public class main {
public void setConverters(List<String> converters) {
this.converters = converters;
}
}","public class main {
public void setConverters(List<String> converters) {
this.converters = converters;
}
}",,0
10650,3d15022e4b52a2fcc0912ef6c259c3905d4f374,ProjectKB,"public class main {
public void addExecutor(String name, ActionExecutor evaluator) {
executors.put(name, evaluator);
}
}","public class main {
public void addExecutor(String name, ActionExecutor evaluator) {
executors.put(name, evaluator);
}
}",,0
10585,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public String getId() {
return CloseDurableClientFunction.class.getName();
}
}","public class main {
public String getId() {
return CloseDurableClientFunction.class.getName();
}
}",,0
16183,9f7376abbff7434794f2c7c2909e02bac232fb5,ProjectKB,"public class main {
public SchemaReader(CamelContext camelContext, String schemaResourceUri) {
ObjectHelper.notNull(camelContext, ""camelContext"");
ObjectHelper.notNull(schemaResourceUri, ""schemaResourceUri"");
this.camelContext = camelContext;
this.schemaResourceUri = schemaResourceUri;
}
}","public class main {
public SchemaReader(CamelContext camelContext, String schemaResourceUri) {
ObjectHelper.notNull(camelContext, ""camelContext"");
ObjectHelper.notNull(schemaResourceUri, ""schemaResourceUri"");
this.camelContext = camelContext;
this.schemaResourceUri = schemaResourceUri;
}
}",,0
11734,7b567ba3d15ed7dd0b0bba0330686487e35af85c,ProjectKB,"public class main {
public void search_with_paging() {
userSession.logIn();
IntStream.rangeClosed(0, 9).forEach(i -> db.users().insertUser(u -> u.setLogin(""user-"" + i).setName(""User "" + i)));
userIndexer.indexOnStartup(null);
SearchWsResponse response = ws.newRequest()
.setParam(Param.PAGE_SIZE, ""5"")
.executeProtobuf(SearchWsResponse.class);
assertThat(response.getUsersList())
.extracting(User::getLogin)
.containsExactly(""user-0"", ""user-1"", ""user-2"", ""user-3"", ""user-4"");
assertThat(response.getPaging())
.extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal)
.containsExactly(1, 5, 10);
response = ws.newRequest()
.setParam(Param.PAGE_SIZE, ""5"")
.setParam(Param.PAGE, ""2"")
.executeProtobuf(SearchWsResponse.class);
assertThat(response.getUsersList())
.extracting(User::getLogin)
.containsExactly(""user-5"", ""user-6"", ""user-7"", ""user-8"", ""user-9"");
assertThat(response.getPaging())
.extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal)
.containsExactly(2, 5, 10);
}
}","public class main {
public void search_with_paging() {
userSession.logIn();
IntStream.rangeClosed(0, 9).forEach(i -> db.users().insertUser(u -> u.setLogin(""user-"" + i).setName(""User "" + i)));
userIndexer.indexOnStartup(null);
SearchWsResponse response = ws.newRequest()
.setParam(Param.PAGE_SIZE, ""5"")
.executeProtobuf(SearchWsResponse.class);
assertThat(response.getUsersList())
.extracting(User::getLogin)
.containsExactly(""user-0"", ""user-1"", ""user-2"", ""user-3"", ""user-4"");
assertThat(response.getPaging())
.extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal)
.containsExactly(1, 5, 10);
response = ws.newRequest()
.setParam(Param.PAGE_SIZE, ""5"")
.setParam(Param.PAGE, ""2"")
.executeProtobuf(SearchWsResponse.class);
assertThat(response.getUsersList())
.extracting(User::getLogin)
.containsExactly(""user-5"", ""user-6"", ""user-7"", ""user-8"", ""user-9"");
assertThat(response.getPaging())
.extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal)
.containsExactly(2, 5, 10);
}
}",,0
11127,1ecba1,ProjectKB,"public class main {
public String getCharacterEncoding() {
return characterEncoding;
}
}","public class main {
public String getCharacterEncoding() {
return characterEncoding;
}
}",,0
11587,75e08695a04980dbceae6789364717e9d8764d58,ProjectKB,"public class main {
protected String getOnsubmit() {
return this.onsubmit;
}
}","public class main {
protected String getOnsubmit() {
return this.onsubmit;
}
}",,0
9100,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public void defaultCollectorThrowsExceptionAfterFunctionReturnsFunctionException() {
thrown.expect(FunctionException.class);
thrown.expectCause(is((Throwable) null));
ResultCollector rc = getExecution().execute((context) -> {
context.getResultSender().lastResult(new FunctionException());
});
final Object result = rc.getResult();
}
}","public class main {
public void defaultCollectorThrowsExceptionAfterFunctionReturnsFunctionException() {
thrown.expect(FunctionException.class);
thrown.expectCause(is((Throwable) null));
ResultCollector rc = getExecution().execute((context) -> {
context.getResultSender().lastResult(new FunctionException());
});
final Object result = rc.getResult();
}
}",,0
8318,a7e2a44fe8d4435ae99532eb0ab852e6247f7b16,ProjectKB,"public class main {
public XStream getXStream() {
if (xStream == null) {
xStream = createXStream();
}
return xStream;
}
}","public class main {
public XStream getXStream() {
if (xStream == null) {
xStream = createXStream();
}
return xStream;
}
}",,0
19663,97b565469058cacac6d2559b2cff37effcca2cfd,ProjectKB,"public class main {
public void verifyEmailWithSslEnabled() {
UserRepresentation user = ApiUtil.findUserByUsername(testRealm(), ""test-user@localhost"");
SslMailServer.startWithSsl(this.getClass().getClassLoader().getResource(SslMailServer.PRIVATE_KEY).getFile());
accountManagement.navigateTo();
testRealmLoginPage.form().login(user.getUsername(), ""password"");
EventRepresentation sendEvent = events.expectRequiredAction(EventType.SEND_VERIFY_EMAIL)
.user(user.getId())
.client(""account"")
.detail(Details.USERNAME, ""test-user@localhost"")
.detail(Details.EMAIL, ""test-user@localhost"")
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
String mailCodeId = sendEvent.getDetails().get(Details.CODE_ID);
assertEquals(""You need to verify your email address to activate your account."",
testRealmVerifyEmailPage.feedbackMessage().getText());
String verifyEmailUrl = assertEmailAndGetUrl(MailServerConfiguration.FROM, user.getEmail(),
""Someone has created a Test account with this email address."", true);
log.info(""navigating to url from email: "" + verifyEmailUrl);
driver.navigate().to(verifyEmailUrl);
events.expectRequiredAction(EventType.VERIFY_EMAIL)
.user(user.getId())
.client(""account"")
.detail(Details.USERNAME, ""test-user@localhost"")
.detail(Details.EMAIL, ""test-user@localhost"")
.detail(Details.CODE_ID, mailCodeId)
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
events.expectLogin()
.client(""account"")
.user(user.getId())
.session(mailCodeId)
.detail(Details.USERNAME, ""test-user@localhost"")
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
assertCurrentUrlStartsWith(accountManagement);
accountManagement.signOut();
testRealmLoginPage.form().login(user.getUsername(), ""password"");
assertCurrentUrlStartsWith(accountManagement);
}
}","public class main {
public void verifyEmailWithSslEnabled() {
UserRepresentation user = ApiUtil.findUserByUsername(testRealm(), ""test-user@localhost"");
SslMailServer.startWithSsl(this.getClass().getClassLoader().getResource(SslMailServer.PRIVATE_KEY).getFile());
accountManagement.navigateTo();
testRealmLoginPage.form().login(user.getUsername(), ""password"");
EventRepresentation sendEvent = events.expectRequiredAction(EventType.SEND_VERIFY_EMAIL)
.user(user.getId())
.client(""account"")
.detail(Details.USERNAME, ""test-user@localhost"")
.detail(Details.EMAIL, ""test-user@localhost"")
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
String mailCodeId = sendEvent.getDetails().get(Details.CODE_ID);
assertEquals(""You need to verify your email address to activate your account."",
testRealmVerifyEmailPage.feedbackMessage().getText());
String verifyEmailUrl = assertEmailAndGetUrl(MailServerConfiguration.FROM, user.getEmail(),
""Someone has created a Test account with this email address."", true);
log.info(""navigating to url from email: "" + verifyEmailUrl);
driver.navigate().to(verifyEmailUrl);
events.expectRequiredAction(EventType.VERIFY_EMAIL)
.user(user.getId())
.client(""account"")
.detail(Details.USERNAME, ""test-user@localhost"")
.detail(Details.EMAIL, ""test-user@localhost"")
.detail(Details.CODE_ID, mailCodeId)
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
events.expectLogin()
.client(""account"")
.user(user.getId())
.session(mailCodeId)
.detail(Details.USERNAME, ""test-user@localhost"")
.removeDetail(Details.REDIRECT_URI)
.assertEvent();
assertCurrentUrlStartsWith(accountManagement);
accountManagement.signOut();
testRealmLoginPage.form().login(user.getUsername(), ""password"");
assertCurrentUrlStartsWith(accountManagement);
}
}",,0
572,8a06bd1ccef382461c7b0a63f2012f4aeac9075,ProjectKB,"public class main {
private boolean shouldAppendHost(KerberosName kerberosName) {
return !isSystemPropertyTrue(SYSPROP_REMOVE_HOST) && kerberosName.getHostName() != null;
}
}","public class main {
private boolean shouldAppendHost(KerberosName kerberosName) {
return !isSystemPropertyTrue(SYSPROP_REMOVE_HOST) && kerberosName.getHostName() != null;
}
}",,0
1497,75457496325c4ae8963199a318d834d6a5eaad16,ProjectKB,"public class main {
public ClientRepresentation getClient() {
auth.clients().requireView(client);
ClientRepresentation representation = ModelToRepresentation.toRepresentation(client, session);
representation.setAccess(auth.clients().getAccess(client));
return representation;
}
}","public class main {
public ClientRepresentation getClient() {
auth.clients().requireView(client);
ClientRepresentation representation = ModelToRepresentation.toRepresentation(client, session);
representation.setAccess(auth.clients().getAccess(client));
return representation;
}
}",,0
17318,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
public UUID getCoordinator() {
return impl.getCoordinator();
}
}","public class main {
public UUID getCoordinator() {
return impl.getCoordinator();
}
}",,0
16114,e7fd5f049c2fd51a528f8062da91a1c75e33b0e8,ProjectKB,"public class main {
public boolean isDisableStreamCache() {
return this.disableStreamCache;
}
}","public class main {
public boolean isDisableStreamCache() {
return this.disableStreamCache;
}
}",,0
1359,a30ab30e4e9ae021fdda04e9abfc228476b846b5,ProjectKB,"public class main {
public final void setOrder(int order) {
this.order = order;
}
}","public class main {
public final void setOrder(int order) {
this.order = order;
}
}",,0
11708,b53d4589c586e8bbdcc89ed60f32cd7977e9a4f4,ProjectKB,"public class main {
public HttpServerExchange sendOutOfBandResponse(HttpServerExchange exchange) {
throw UndertowMessages.MESSAGES.outOfBandResponseNotSupported();
}
}","public class main {
public HttpServerExchange sendOutOfBandResponse(HttpServerExchange exchange) {
throw UndertowMessages.MESSAGES.outOfBandResponseNotSupported();
}
}",,0
12415,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
private void addWorkerIfNecessary() {
if (idleWorkers.get() == 0) {
synchronized (workers) {
if (workers.isEmpty() || (idleWorkers.get() == 0)) {
addWorker();
}
}
}
}
}","public class main {
private void addWorkerIfNecessary() {
if (idleWorkers.get() == 0) {
synchronized (workers) {
if (workers.isEmpty() || (idleWorkers.get() == 0)) {
addWorker();
}
}
}
}
}",,0
17431,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
private void checkFileName(String expected, Path pathToReal) throws IOException {
byte[] fileContent = readAllBytes(pathToReal);
assert fileContent != null && fileContent.length > 0;
assertEquals(expected, new String(fileContent));
}
}","public class main {
private void checkFileName(String expected, Path pathToReal) throws IOException {
byte[] fileContent = readAllBytes(pathToReal);
assert fileContent != null && fileContent.length > 0;
assertEquals(expected, new String(fileContent));
}
}",,0
2703,e57028fd62a2f5980ea6c9a7ab89ada06c828634,ProjectKB,"public class main {
public static boolean preferIPv6Addresses() {
return SocketCreator.useIPv6Addresses;
}
}","public class main {
public static boolean preferIPv6Addresses() {
return SocketCreator.useIPv6Addresses;
}
}",,0
765,5ddd605ee96b8551c7eb00b609a0b97939925b77,ProjectKB,"public class main {
public CredentialTypeMetadata getMetadata() {
return metadata;
}
}","public class main {
public CredentialTypeMetadata getMetadata() {
return metadata;
}
}",,0
10608,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public boolean hasResult() {
return true;
}
}","public class main {
public boolean hasResult() {
return true;
}
}",,0
10159,a8a2b8c0a37e348981a4cf41fd2b329b6079f40,ProjectKB,"public class main {
public boolean isStartingDirectoryMustExist() {
return startingDirectoryMustExist;
}
}","public class main {
public boolean isStartingDirectoryMustExist() {
return startingDirectoryMustExist;
}
}",,0
16988,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public void setProducerWindowSize(int producerWindowSize) {
this.producerWindowSize = producerWindowSize;
}
}","public class main {
public void setProducerWindowSize(int producerWindowSize) {
this.producerWindowSize = producerWindowSize;
}
}",,0
2964,d28baa3fc5566b47f1ca7cc2ba1aba658dc634a,ProjectKB,"public class main {
public void testNestedBooleanQuery() throws ParserException, IOException {
Query q = parse(""NestedBooleanQuery.xml"");
dumpResults(""Nested Boolean query"", q, 5);
}
}","public class main {
public void testNestedBooleanQuery() throws ParserException, IOException {
Query q = parse(""NestedBooleanQuery.xml"");
dumpResults(""Nested Boolean query"", q, 5);
}
}",,0
8190,8b54b20fc488ae3e83f4a350a707dc0303ade23,ProjectKB,"public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}","public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}",,0
5900,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
public static byte[] convertOctetStreamToText(byte[] source, MediaType destination) {
if (source == null) return null;
return convertCharset(source, UTF_8, destination.getCharset());
}
}","public class main {
public static byte[] convertOctetStreamToText(byte[] source, MediaType destination) {
if (source == null) return null;
return convertCharset(source, UTF_8, destination.getCharset());
}
}",,0
5036,3f68cd633f03370d33c2603a6496e81273782601,ProjectKB,"public class main {
public static MediaType getMediaType(String filename) {
String mediaType = fileTypeMap.getContentType(filename);
return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);
}
}","public class main {
public static MediaType getMediaType(String filename) {
String mediaType = fileTypeMap.getContentType(filename);
return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);
}
}",,0
8749,3e54b2a6314eda11617ff7a7b899c251e222b1a1,ProjectKB,"public class main {
public String getClassName() {
return wrapper.getServletClass();
}
}","public class main {
public String getClassName() {
return wrapper.getServletClass();
}
}",,0
3082,338a74dfa42a7b19d39adecacfa5f626a050e807,ProjectKB,"public class main {
public ActiveMQPrefetchPolicy getPrefetchPolicy() {
return prefetchPolicy;
}
}","public class main {
public ActiveMQPrefetchPolicy getPrefetchPolicy() {
return prefetchPolicy;
}
}",,0
9659,e922f89290f236f3107039de61af0375826bd96d,ProjectKB,"public class main {
public void setDocumentBuilderFactory(DocumentBuilderFactory documentBuilderFactory) {
this.documentBuilderFactory = documentBuilderFactory;
}
}","public class main {
public void setDocumentBuilderFactory(DocumentBuilderFactory documentBuilderFactory) {
this.documentBuilderFactory = documentBuilderFactory;
}
}",,0
9274,40996ae6d5d3b6c1602a15f96b86a8d8a39b53eb,ProjectKB,"public class main {
public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
DeploymentRepositoryLogger.ROOT_LOGGER.cannotCopyFile(exc, file);
return FileVisitResult.CONTINUE;
}
}","public class main {
public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
DeploymentRepositoryLogger.ROOT_LOGGER.cannotCopyFile(exc, file);
return FileVisitResult.CONTINUE;
}
}",,0
11082,3bba91131b5257e64b9d0a2193e1e32a145b2a2,ProjectKB,"public class main {
public void testPointRangeQueryWithoutUpperTerm() throws ParserException, IOException {
Query q = parse(""PointRangeQueryWithoutUpperTerm.xml"");
dumpResults(""PointRangeQueryWithoutUpperTerm"", q, 5);
}
}","public class main {
public void testPointRangeQueryWithoutUpperTerm() throws ParserException, IOException {
Query q = parse(""PointRangeQueryWithoutUpperTerm.xml"");
dumpResults(""PointRangeQueryWithoutUpperTerm"", q, 5);
}
}",,0
5743,46ae8627a6887d0c810905585b40845193b9a9f8,ProjectKB,"public class main {
public void save_whenThereIsAnExistingCredentialAndOverwriteIsFalse_logsCREDENTIAL_ACCESS() {
when(credentialDataService.findMostRecent(CREDENTIAL_NAME)).thenReturn(existingCredential);
when(permissionService.hasPermission(userContext.getAclUser(), CREDENTIAL_NAME, WRITE))
.thenReturn(true);
subject.save(
userContext,
parametersList,
CREDENTIAL_NAME,
false,
""password"",
generationParameters,
credentialValue,
accessControlEntries,
currentUserPermissions);
assertThat(parametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
assertThat(parametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
}
}","public class main {
public void save_whenThereIsAnExistingCredentialAndOverwriteIsFalse_logsCREDENTIAL_ACCESS() {
when(credentialDataService.findMostRecent(CREDENTIAL_NAME)).thenReturn(existingCredential);
when(permissionService.hasPermission(userContext.getAclUser(), CREDENTIAL_NAME, WRITE))
.thenReturn(true);
subject.save(
userContext,
parametersList,
CREDENTIAL_NAME,
false,
""password"",
generationParameters,
credentialValue,
accessControlEntries,
currentUserPermissions);
assertThat(parametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
assertThat(parametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
}
}",,0
3250,3a7749a6d327cacbc7bf93cd50a0e2dee0b935ba,ProjectKB,"public class main {
public void setIdentityProviderProvisioning(IdentityProviderProvisioning identityProviderProvisioning) {
this.identityProviderProvisioning = identityProviderProvisioning;
}
}","public class main {
public void setIdentityProviderProvisioning(IdentityProviderProvisioning identityProviderProvisioning) {
this.identityProviderProvisioning = identityProviderProvisioning;
}
}",,0
17061,5a47697519018eb4918df33a21faae811e85f01a,ProjectKB,"public class main {
public void testMemberFlakeIdGeneratorConfig() {
FlakeIdGeneratorConfig c = instance.getConfig().findFlakeIdGeneratorConfig(""flakeIdGenerator"");
assertEquals(3, c.getPrefetchCount());
assertEquals(10L, c.getPrefetchValidityMillis());
assertEquals(20L, c.getIdOffset());
assertEquals(30L, c.getNodeIdOffset());
assertEquals(""flakeIdGenerator*"", c.getName());
assertFalse(c.isStatisticsEnabled());
}
}","public class main {
public void testMemberFlakeIdGeneratorConfig() {
FlakeIdGeneratorConfig c = instance.getConfig().findFlakeIdGeneratorConfig(""flakeIdGenerator"");
assertEquals(3, c.getPrefetchCount());
assertEquals(10L, c.getPrefetchValidityMillis());
assertEquals(20L, c.getIdOffset());
assertEquals(30L, c.getNodeIdOffset());
assertEquals(""flakeIdGenerator*"", c.getName());
assertFalse(c.isStatisticsEnabled());
}
}",,0
8203,8b54b20fc488ae3e83f4a350a707dc0303ade23,ProjectKB,"public class main {
public void testLocalJsonRequest() throws Exception {
doJsonRequest(Client.localClient, false);
}
}","public class main {
public void testLocalJsonRequest() throws Exception {
doJsonRequest(Client.localClient, false);
}
}",,0
9949,f9fd6e9e26224f26f1542224ce187e04c27b268,ProjectKB,"public class main {
public void testBooleanQueryXML() throws ParserException, IOException {
Query q = parse(""BooleanQuery.xml"");
dumpResults(""BooleanQuery"", q, 5);
}
}","public class main {
public void testBooleanQueryXML() throws ParserException, IOException {
Query q = parse(""BooleanQuery.xml"");
dumpResults(""BooleanQuery"", q, 5);
}
}",,0
10543,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public boolean hasResult() {
return true;
}
}","public class main {
public boolean hasResult() {
return true;
}
}",,0
6482,a4755e6b10c813c6efbe3b8e8a81a61027a8595a,ProjectKB,"public class main {
public void popupMenuCanceled(PopupMenuEvent arg0) {
}
}","public class main {
public void popupMenuCanceled(PopupMenuEvent arg0) {
}
}",,0
4498,9730cd6a3bbb481ee4e400b51952b537589c469d,ProjectKB,"public class main {
public void cannotCreateUserWithNonAsciiUsername() {
ScimUser user = new ScimUser(null, ""joe$eph"", ""Jo"", ""User"");
user.addEmail(""jo@blah.com"");
db.createUser(user, ""j7hyqpassX"");
}
}","public class main {
public void cannotCreateUserWithNonAsciiUsername() {
ScimUser user = new ScimUser(null, ""joe$eph"", ""Jo"", ""User"");
user.addEmail(""jo@blah.com"");
db.createUser(user, ""j7hyqpassX"");
}
}",,0
16750,a1d523c7f150e56bf06df8b83ed1d416d6c1d3b,ProjectKB,"public class main {
public static void validateRequiredUserGroups(UaaUser user, ClientDetails client) {
Collection<String> requiredUserGroups = ofNullable((Collection<String>) client.getAdditionalInformation().get(REQUIRED_USER_GROUPS)).orElse(emptySet());
if (!UaaTokenUtils.hasRequiredUserAuthorities(requiredUserGroups, user.getAuthorities())) {
throw new InvalidTokenException(""User does not meet the client's required group criteria."");
}
}
}","public class main {
public static void validateRequiredUserGroups(UaaUser user, ClientDetails client) {
Collection<String> requiredUserGroups = ofNullable((Collection<String>) client.getAdditionalInformation().get(REQUIRED_USER_GROUPS)).orElse(emptySet());
if (!UaaTokenUtils.hasRequiredUserAuthorities(requiredUserGroups, user.getAuthorities())) {
throw new InvalidTokenException(""User does not meet the client's required group criteria."");
}
}
}",,0
1340,eaf8cc4cd2015456307ff3fcf98e49f2826fa270,ProjectKB,"public class main {
public ValidationResult validateInstance(ViewInstanceDefinition viewInstanceDefinition, ValidationContext validationContext) {
return null;
}
}","public class main {
public ValidationResult validateInstance(ViewInstanceDefinition viewInstanceDefinition, ValidationContext validationContext) {
return null;
}
}",,0
8607,d50df341432df1049c6c85bf2dcda9eb0be04d73,ProjectKB,"public class main {
private static Configuration createOverridingEntries() {
final Configuration sourceConf = newConfigurationWithDefaults();
sourceConf.set(""mapreduce.map.maxattempts"", ""4"");
sourceConf.set(""yarn.app.mapreduce.am.resource.mb"", ""2048"");
sourceConf.set(""yarn.app.mapreduce.am.resource.cpu-vcores"", ""16"");
sourceConf.set(""mapreduce.map.log.level"", ""TRACE"");
sourceConf.set(""yarn.app.mapreduce.am.command-opts"", ""-XX:MaxPermSize=256m"");
sourceConf.set(""yarn.app.mapreduce.am.env"", ""PATH=/path1:$PATH"");
sourceConf.set(""mapreduce.job.priority"", ""1"");
sourceConf.set(""mapreduce.job.queuename"", ""default1"");
sourceConf.set(""mapreduce.job.acl-view-job"", ""view"");
sourceConf.set(""mapreduce.job.acl-modify-job"", ""modify"");
return sourceConf;
}
}","public class main {
private static Configuration createOverridingEntries() {
final Configuration sourceConf = newConfigurationWithDefaults();
sourceConf.set(""mapreduce.map.maxattempts"", ""4"");
sourceConf.set(""yarn.app.mapreduce.am.resource.mb"", ""2048"");
sourceConf.set(""yarn.app.mapreduce.am.resource.cpu-vcores"", ""16"");
sourceConf.set(""mapreduce.map.log.level"", ""TRACE"");
sourceConf.set(""yarn.app.mapreduce.am.command-opts"", ""-XX:MaxPermSize=256m"");
sourceConf.set(""yarn.app.mapreduce.am.env"", ""PATH=/path1:$PATH"");
sourceConf.set(""mapreduce.job.priority"", ""1"");
sourceConf.set(""mapreduce.job.queuename"", ""default1"");
sourceConf.set(""mapreduce.job.acl-view-job"", ""view"");
sourceConf.set(""mapreduce.job.acl-modify-job"", ""modify"");
return sourceConf;
}
}",,0
6770,784fabac7d1586a5614bd4bc8854fd62850dbe26,ProjectKB,"public class main {
public Builder writeTimeout(long timeout, TimeUnit unit) {
if (timeout < 0) throw new IllegalArgumentException(""timeout < 0"");
if (unit == null) throw new IllegalArgumentException(""unit == null"");
long millis = unit.toMillis(timeout);
if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException(""Timeout too large."");
if (millis == 0 && timeout > 0) throw new IllegalArgumentException(""Timeout too small."");
writeTimeout = (int) millis;
return this;
}
}","public class main {
public Builder writeTimeout(long timeout, TimeUnit unit) {
if (timeout < 0) throw new IllegalArgumentException(""timeout < 0"");
if (unit == null) throw new IllegalArgumentException(""unit == null"");
long millis = unit.toMillis(timeout);
if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException(""Timeout too large."");
if (millis == 0 && timeout > 0) throw new IllegalArgumentException(""Timeout too small."");
writeTimeout = (int) millis;
return this;
}
}",,0
15396,efcb46c710e3f56805b9257a63d1306882f4faf9,ProjectKB,"public class main {
public ExternalResourceHandler(String baseResource, String welcomeFile) {
Assert.notNull(baseResource);
this.baseResource = baseResource;
this.welcomeFile = welcomeFile;
}
}","public class main {
public ExternalResourceHandler(String baseResource, String welcomeFile) {
Assert.notNull(baseResource);
this.baseResource = baseResource;
this.welcomeFile = welcomeFile;
}
}",,0
14828,717289bc10b6f3b204cb6d14881f530174c6235,ProjectKB,"public class main {
public void sign(final SignableSAMLObject signableObject) throws SecurityException {
org.opensaml.xmlsec.signature.Signature signature = OpenSAMLUtil.buildSignature();
signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);
signature.setSignatureAlgorithm(sigAlgo);
signature.setSigningCredential(loader.getCredential());
signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));
signableObject.setSignature(signature);
signableObject.releaseDOM();
signableObject.releaseChildrenDOM(true);
}
public String sign(final String request, final String relayState)
throws NoSuchAlgorithmException, WSSecurityException, InvalidKeyException, UnsupportedEncodingException,
SignatureException {
Merlin crypto = new Merlin();
crypto.setKeyStore(loader.getKeyStore());
PrivateKey privateKey = crypto.getPrivateKey(loader.getCredential().getPublicKey(), callbackHandler);
java.security.Signature signature = java.security.Signature.getInstance(jceSigAlgo);
signature.initSign(privateKey);
String requestToSign =
SSOConstants.SAML_REQUEST + ""="" + request + ""&""
+ SSOConstants.RELAY_STATE + ""="" + relayState + ""&""
+ SSOConstants.SIG_ALG + ""="" + URLEncoder.encode(sigAlgo, StandardCharsets.UTF_8.name());
signature.update(requestToSign.getBytes(StandardCharsets.UTF_8));
return Base64.getEncoder().encodeToString(signature.sign());
}
public String encode(final RequestAbstractType request, final boolean useDeflateEncoding)
throws WSSecurityException, TransformerException, IOException {
StringWriter writer = new StringWriter();
write(writer, request, true);
writer.close();
String requestMessage = writer.toString();
byte[] deflatedBytes;
if (useDeflateEncoding) {
deflatedBytes = new DeflateEncoderDecoder().
deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));
}
}","public class main {
public void sign(final SignableSAMLObject signableObject) throws SecurityException {
org.opensaml.xmlsec.signature.Signature signature = OpenSAMLUtil.buildSignature();
signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);
signature.setSignatureAlgorithm(sigAlgo);
signature.setSigningCredential(loader.getCredential());
signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));
signableObject.setSignature(signature);
signableObject.releaseDOM();
signableObject.releaseChildrenDOM(true);
}
public String sign(final String request, final String relayState)
throws NoSuchAlgorithmException, WSSecurityException, InvalidKeyException, UnsupportedEncodingException,
SignatureException {
Merlin crypto = new Merlin();
crypto.setKeyStore(loader.getKeyStore());
PrivateKey privateKey = crypto.getPrivateKey(loader.getCredential().getPublicKey(), callbackHandler);
java.security.Signature signature = java.security.Signature.getInstance(jceSigAlgo);
signature.initSign(privateKey);
String requestToSign =
SSOConstants.SAML_REQUEST + ""="" + request + ""&""
+ SSOConstants.RELAY_STATE + ""="" + relayState + ""&""
+ SSOConstants.SIG_ALG + ""="" + URLEncoder.encode(sigAlgo, StandardCharsets.UTF_8.name());
signature.update(requestToSign.getBytes(StandardCharsets.UTF_8));
return Base64.getEncoder().encodeToString(signature.sign());
}
public String encode(final RequestAbstractType request, final boolean useDeflateEncoding)
throws WSSecurityException, TransformerException, IOException {
StringWriter writer = new StringWriter();
write(writer, request, true);
writer.close();
String requestMessage = writer.toString();
byte[] deflatedBytes;
if (useDeflateEncoding) {
deflatedBytes = new DeflateEncoderDecoder().
deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));
}
}",,0
18635,3c20b874fba9cc2a78b9ace10208de1602b56c3f,ProjectKB,"public class main {
public void test_where_with_condition_or() {
Entity from = from(Entity.class);
OnGoingLogicalCondition condition = condition(from.getCode()).eq(""test"").or(from.getCode()).eq(""test2"");
where(from.getName()).eq(""test"").or(condition);
Query<Entity> select = select(from);
assertEquals(
""select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )"",
select.getQuery());
}
}","public class main {
public void test_where_with_condition_or() {
Entity from = from(Entity.class);
OnGoingLogicalCondition condition = condition(from.getCode()).eq(""test"").or(from.getCode()).eq(""test2"");
where(from.getName()).eq(""test"").or(condition);
Query<Entity> select = select(from);
assertEquals(
""select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )"",
select.getQuery());
}
}",,0
8521,49a3f0a11d41f7124b893a08dc9e67594c32e2e,ProjectKB,"public class main {
public void testException() throws Exception {
String notFoundPath = ""/c/"" + COLL_NAME + ""/abccdef"";
String incorrectPayload = ""{rebalance-leaders: {maxAtOnce: abc, maxWaitSeconds: xyz}
}","public class main {
public void testException() throws Exception {
String notFoundPath = ""/c/"" + COLL_NAME + ""/abccdef"";
String incorrectPayload = ""{rebalance-leaders: {maxAtOnce: abc, maxWaitSeconds: xyz}
}",,0
76,0bcd69,ProjectKB,"public class main {
public Stream(Integer identifier, Http2UpgradeHandler handler) {
this(identifier, handler, null);
}
}","public class main {
public Stream(Integer identifier, Http2UpgradeHandler handler) {
this(identifier, handler, null);
}
}",,0
18435,992b5d9c24102ad20330d36c0a71162753a37449,ProjectKB,"public class main {
public void endParameterEntity(String name, Augmentations augs) throws XNIException {
fPEDepth--;
fReadingExternalDTD = fPEntityStack[fPEDepth];
}
}","public class main {
public void endParameterEntity(String name, Augmentations augs) throws XNIException {
fPEDepth--;
fReadingExternalDTD = fPEntityStack[fPEDepth];
}
}",,0
2022,6d9fc04c052adbc79bbbb1c63f3f00c816fb8e5,ProjectKB,"public class main {
public void succeeded(FrameworkMethod method) {
LOG.info(""SUCCEEDED "" + testName);
}
}","public class main {
public void succeeded(FrameworkMethod method) {
LOG.info(""SUCCEEDED "" + testName);
}
}",,0
10191,2736b6fe0b3fa22ec8e2b4184897ecadb021fc78,ProjectKB,"public class main {
public static String normalize(final String fileName, final boolean unixSeparator) {
final char separator = unixSeparator ? UNIX_SEPARATOR : WINDOWS_SEPARATOR;
return doNormalize(fileName, separator, true);
}
}","public class main {
public static String normalize(final String fileName, final boolean unixSeparator) {
final char separator = unixSeparator ? UNIX_SEPARATOR : WINDOWS_SEPARATOR;
return doNormalize(fileName, separator, true);
}
}",,0
6980,db6069667708a59c75a785f310d4a2df3698122,ProjectKB,"public class main {
protected Client getClientFromBasicAuthScheme(MultivaluedMap<String, String> params) {
Client client = null;
String[] userInfo = AuthorizationUtils.getBasicAuthUserInfo(getMessageContext());
if (userInfo != null && userInfo.length == 2) {
client = getAndValidateClientFromIdAndSecret(userInfo[0], userInfo[1], params);
}
validateClientAuthenticationMethod(client, OAuthConstants.TOKEN_ENDPOINT_AUTH_BASIC);
return client;
}
}","public class main {
protected Client getClientFromBasicAuthScheme(MultivaluedMap<String, String> params) {
Client client = null;
String[] userInfo = AuthorizationUtils.getBasicAuthUserInfo(getMessageContext());
if (userInfo != null && userInfo.length == 2) {
client = getAndValidateClientFromIdAndSecret(userInfo[0], userInfo[1], params);
}
validateClientAuthenticationMethod(client, OAuthConstants.TOKEN_ENDPOINT_AUTH_BASIC);
return client;
}
}",,0
5105,a34f55fc97a81966faf21e3ae404ec24f1f31cf7,ProjectKB,"public class main {
public void init() {
mockSecurityContextAccessor = Mockito.mock(SecurityContextAccessor.class);
endpoints = new UserIdConversionEndpoints(provisioning, mockSecurityContextAccessor);
endpoints.setScimUserEndpoints(scimUserEndpoints);
endpoints.setEnabled(true);
when(mockSecurityContextAccessor.getAuthorities()).thenReturn(authorities);
when(mockSecurityContextAccessor.getAuthenticationInfo()).thenReturn(""mock object"");
when(provisioning.retrieveActive(anyString())).thenReturn(Collections.singletonList(MultitenancyFixture.identityProvider(""test-origin"", ""uaa"")));
}
}","public class main {
public void init() {
mockSecurityContextAccessor = Mockito.mock(SecurityContextAccessor.class);
endpoints = new UserIdConversionEndpoints(provisioning, mockSecurityContextAccessor);
endpoints.setScimUserEndpoints(scimUserEndpoints);
endpoints.setEnabled(true);
when(mockSecurityContextAccessor.getAuthorities()).thenReturn(authorities);
when(mockSecurityContextAccessor.getAuthenticationInfo()).thenReturn(""mock object"");
when(provisioning.retrieveActive(anyString())).thenReturn(Collections.singletonList(MultitenancyFixture.identityProvider(""test-origin"", ""uaa"")));
}
}",,0
898,e9db95831b9db69fbc0bef499b0d3f41bc6448f,ProjectKB,"public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}","public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}",,0
12562,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public final boolean isDisposed() {
return disposed;
}
}","public class main {
public final boolean isDisposed() {
return disposed;
}
}",,0
14093,f2d54c4ecb75c7264d4160ca7c461135712201a9,ProjectKB,"public class main {
protected void populateModel(ModelNode source, ModelNode target) throws OperationFailedException {
populate(source, target);
}
}","public class main {
protected void populateModel(ModelNode source, ModelNode target) throws OperationFailedException {
populate(source, target);
}
}",,0
17984,2207733b82d85e354fa1a6fd114dae665816fdf,ProjectKB,"public class main {
public void flush() throws IOException {
doFlush(true);
}
}","public class main {
public void flush() throws IOException {
doFlush(true);
}
}",,0
14641,8b40fdba289c62f4defae51c1f76860f0159c44,ProjectKB,"public class main {
public static JsonWebKey verifyJwkKey(PublicKey key, SignatureAlgorithm keyAlgo, String jsonJwk) {
return readJwkKey(JwsUtils.verify(key, keyAlgo, jsonJwk));
}
}","public class main {
public static JsonWebKey verifyJwkKey(PublicKey key, SignatureAlgorithm keyAlgo, String jsonJwk) {
return readJwkKey(JwsUtils.verify(key, keyAlgo, jsonJwk));
}
}",,0
6962,39cafcb05c99f2aa9fce7e6597664c9ed6a63a9,ProjectKB,"public class main {
public void testGarbageHeaders() {
byte[] data = (""<html>\r\n"" +
""<head><title>400 Bad Request</title></head>\r\n"" +
""<body bgcolor=\""white\"">\r\n"" +
""<center><h1>400 Bad Request</h1></center>\r\n"" +
""<hr><center>nginx/1.1.19</center>\r\n"" +
""</body>\r\n"" +
""</html>\r\n"").getBytes();
EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder());
ch.writeInbound(Unpooled.copiedBuffer(data));
HttpResponse res = ch.readInbound();
assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_0));
assertThat(res.status().code(), is(999));
assertThat(res.decoderResult().isFailure(), is(true));
assertThat(res.decoderResult().isFinished(), is(true));
assertThat(ch.readInbound(), is(nullValue()));
ch.writeInbound(Unpooled.copiedBuffer(data));
assertThat(ch.readInbound(), is(nullValue()));
ch.finish();
assertThat(ch.readInbound(), is(nullValue()));
}
}","public class main {
public void testGarbageHeaders() {
byte[] data = (""<html>\r\n"" +
""<head><title>400 Bad Request</title></head>\r\n"" +
""<body bgcolor=\""white\"">\r\n"" +
""<center><h1>400 Bad Request</h1></center>\r\n"" +
""<hr><center>nginx/1.1.19</center>\r\n"" +
""</body>\r\n"" +
""</html>\r\n"").getBytes();
EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder());
ch.writeInbound(Unpooled.copiedBuffer(data));
HttpResponse res = ch.readInbound();
assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_0));
assertThat(res.status().code(), is(999));
assertThat(res.decoderResult().isFailure(), is(true));
assertThat(res.decoderResult().isFinished(), is(true));
assertThat(ch.readInbound(), is(nullValue()));
ch.writeInbound(Unpooled.copiedBuffer(data));
assertThat(ch.readInbound(), is(nullValue()));
ch.finish();
assertThat(ch.readInbound(), is(nullValue()));
}
}",,0
8447,dcb5a74a3987d2264ad195c7844bbb6c81216610,ProjectKB,"public class main {
public YAMLLibrary getLibrary() {
return library;
}
}","public class main {
public YAMLLibrary getLibrary() {
return library;
}
}",,0
13298,9434a44d3449d620b1be70206819f8275b4a750,ProjectKB,"public class main {
public void testIdleStateInvalidFrame02() throws Exception {
http2Connect();
sendData(3, new byte[] {});
handleGoAwayResponse(1);
}
}","public class main {
public void testIdleStateInvalidFrame02() throws Exception {
http2Connect();
sendData(3, new byte[] {});
handleGoAwayResponse(1);
}
}",,0
965,03eaadc25323d8c8c89f528e8585033ed90c50f,ProjectKB,"public class main {
public void invalidPath() {
this.exception.expect(NoSuchResourceException.class);
this.nativeRepository
.setSearchLocations(""file:./src/test/resources/test/{profile}
}","public class main {
public void invalidPath() {
this.exception.expect(NoSuchResourceException.class);
this.nativeRepository
.setSearchLocations(""file:./src/test/resources/test/{profile}
}",,0
11237,b711cf5b8841e5d239717850d1d6d3cad2382a6,ProjectKB,"public class main {
protected String getCookieResponseTrace(int streamId, int cookieCount) {
return getResponseBodyFrameTrace(streamId, ""text/plain;charset=UTF-8"",
""Cookie count: "" + cookieCount, null);
}
}","public class main {
protected String getCookieResponseTrace(int streamId, int cookieCount) {
return getResponseBodyFrameTrace(streamId, ""text/plain;charset=UTF-8"",
""Cookie count: "" + cookieCount, null);
}
}",,0
14918,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
public int getState() {
return state;
}
}","public class main {
public int getState() {
return state;
}
}",,0
8768,3e54b2a6314eda11617ff7a7b899c251e222b1a1,ProjectKB,"public class main {
public String getServerInfo() {
return ServerInfo.getServerInfo();
}
}","public class main {
public String getServerInfo() {
return ServerInfo.getServerInfo();
}
}",,0
8698,d50df341432df1049c6c85bf2dcda9eb0be04d73,ProjectKB,"public class main {
protected String getDryRun(CoordinatorJobBean coordJob) throws Exception{
int materializationWindow = ConfigurationService
.getInt(CoordMaterializeTriggerService.CONF_MATERIALIZATION_WINDOW);
Date startTime = coordJob.getStartTime();
long startTimeMilli = startTime.getTime();
long endTimeMilli = startTimeMilli + (materializationWindow * 1000);
Date jobEndTime = coordJob.getEndTime();
Date endTime = new Date(endTimeMilli);
if (endTime.compareTo(jobEndTime) > 0) {
endTime = jobEndTime;
}
String jobId = coordJob.getId();
LOG.info(""["" + jobId + ""]: Update status to RUNNING"");
coordJob.setStatus(Job.Status.RUNNING);
coordJob.setPending();
Configuration jobConf = null;
try {
jobConf = new XConfiguration(new StringReader(coordJob.getConf()));
}
catch (IOException e1) {
LOG.warn(""Configuration parse error. read from DB :"" + coordJob.getConf(), e1);
}
String action = new CoordMaterializeTransitionXCommand(coordJob, materializationWindow, startTime,
endTime).materializeActions(true);
return coordJob.getJobXml() + System.getProperty(""line.separator"") + ""***actions for instance***"" + action;
}
}","public class main {
protected String getDryRun(CoordinatorJobBean coordJob) throws Exception{
int materializationWindow = ConfigurationService
.getInt(CoordMaterializeTriggerService.CONF_MATERIALIZATION_WINDOW);
Date startTime = coordJob.getStartTime();
long startTimeMilli = startTime.getTime();
long endTimeMilli = startTimeMilli + (materializationWindow * 1000);
Date jobEndTime = coordJob.getEndTime();
Date endTime = new Date(endTimeMilli);
if (endTime.compareTo(jobEndTime) > 0) {
endTime = jobEndTime;
}
String jobId = coordJob.getId();
LOG.info(""["" + jobId + ""]: Update status to RUNNING"");
coordJob.setStatus(Job.Status.RUNNING);
coordJob.setPending();
Configuration jobConf = null;
try {
jobConf = new XConfiguration(new StringReader(coordJob.getConf()));
}
catch (IOException e1) {
LOG.warn(""Configuration parse error. read from DB :"" + coordJob.getConf(), e1);
}
String action = new CoordMaterializeTransitionXCommand(coordJob, materializationWindow, startTime,
endTime).materializeActions(true);
return coordJob.getJobXml() + System.getProperty(""line.separator"") + ""***actions for instance***"" + action;
}
}",,0
8999,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
private synchronized void executeFunctionReexecuteException(FunctionContext context) {
retryCountForExecuteFunctionReexecuteException++;
DistributedSystem ds = InternalDistributedSystem.getAnyInstance();
LogWriter logger = ds.getLogWriter();
logger.fine(""Executing executeException in TestFunction on Member : ""
+ ds.getDistributedMember() + ""with Context : "" + context);
if (retryCountForExecuteFunctionReexecuteException >= 5) {
logger.fine(""Tried Function Execution 5 times. Now Returning after 5 attempts"");
context.getResultSender()
.lastResult(new Integer(retryCountForExecuteFunctionReexecuteException));
retryCountForExecuteFunctionReexecuteException = 0;
return;
}
if (context.getArguments() instanceof Boolean) {
logger.fine(""MyFunctionExecutionException is intentionally thrown"");
throw new FunctionInvocationTargetException(
new MyFunctionExecutionException(""I have been thrown from TestFunction""));
}
}
}","public class main {
private synchronized void executeFunctionReexecuteException(FunctionContext context) {
retryCountForExecuteFunctionReexecuteException++;
DistributedSystem ds = InternalDistributedSystem.getAnyInstance();
LogWriter logger = ds.getLogWriter();
logger.fine(""Executing executeException in TestFunction on Member : ""
+ ds.getDistributedMember() + ""with Context : "" + context);
if (retryCountForExecuteFunctionReexecuteException >= 5) {
logger.fine(""Tried Function Execution 5 times. Now Returning after 5 attempts"");
context.getResultSender()
.lastResult(new Integer(retryCountForExecuteFunctionReexecuteException));
retryCountForExecuteFunctionReexecuteException = 0;
return;
}
if (context.getArguments() instanceof Boolean) {
logger.fine(""MyFunctionExecutionException is intentionally thrown"");
throw new FunctionInvocationTargetException(
new MyFunctionExecutionException(""I have been thrown from TestFunction""));
}
}
}",,0
18185,1117a37b01a1058897a34e11ff5156e465efb69,ProjectKB,"public class main {
public static <T> List<T> interleaveAll(List<List<T>> nodeList) {
if (nodeList != null && nodeList.size() > 0) {
List<T> first = new ArrayList<T>();
List<List<T>> rest = new ArrayList<List<T>>();
for (List<T> node : nodeList) {
if (node != null && node.size() > 0) {
first.add(node.get(0));
rest.add(node.subList(1, node.size()));
}
}
List<T> interleaveRest = interleaveAll(rest);
if (interleaveRest != null) {
first.addAll(interleaveRest);
}
return first;
}
return null;
}
}","public class main {
public static <T> List<T> interleaveAll(List<List<T>> nodeList) {
if (nodeList != null && nodeList.size() > 0) {
List<T> first = new ArrayList<T>();
List<List<T>> rest = new ArrayList<List<T>>();
for (List<T> node : nodeList) {
if (node != null && node.size() > 0) {
first.add(node.get(0));
rest.add(node.subList(1, node.size()));
}
}
List<T> interleaveRest = interleaveAll(rest);
if (interleaveRest != null) {
first.addAll(interleaveRest);
}
return first;
}
return null;
}
}",,0
18857,8dc3bb7d3c3d0b1487e3ef3dcbdebda865d2b20e,ProjectKB,"public class main {
public StaxEventItemReaderBuilder<T> maxItemCount(int maxItemCount) {
this.maxItemCount = maxItemCount;
return this;
}
}","public class main {
public StaxEventItemReaderBuilder<T> maxItemCount(int maxItemCount) {
this.maxItemCount = maxItemCount;
return this;
}
}",,0
5494,c7c9c57d69a180dce679c5f26d4f6db64b250a7e,ProjectKB,"public class main {
public void testMergeWithValidAggregateInfo() {
AuthenticationInfo aggregate = new MergableAuthenticationInfo() {
@Override
public void merge(AuthenticationInfo info) {
}
@Override
public PrincipalCollection getPrincipals() {
return new SimplePrincipalCollection(""principals"", ""realmName"");
}
@Override
public Object getCredentials() {
return null;
}
};
AuthenticationInfo mergeResult = strategy.merge(new SimpleAuthenticationInfo(), aggregate);
assertEquals(aggregate, mergeResult);
}
}","public class main {
public void testMergeWithValidAggregateInfo() {
AuthenticationInfo aggregate = new MergableAuthenticationInfo() {
@Override
public void merge(AuthenticationInfo info) {
}
@Override
public PrincipalCollection getPrincipals() {
return new SimplePrincipalCollection(""principals"", ""realmName"");
}
@Override
public Object getCredentials() {
return null;
}
};
AuthenticationInfo mergeResult = strategy.merge(new SimpleAuthenticationInfo(), aggregate);
assertEquals(aggregate, mergeResult);
}
}",,0
4079,e3652b44a377436256f77a2749ed133bbafd2fb,ProjectKB,"public class main {
public static String logConfigPath(String stormId) {
return LOGCONFIG_SUBTREE + ZK_SEPERATOR + stormId;
}
}","public class main {
public static String logConfigPath(String stormId) {
return LOGCONFIG_SUBTREE + ZK_SEPERATOR + stormId;
}
}",,0
17354,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
public long getSocketTimeout() {
return sockTimeout;
}
}","public class main {
public long getSocketTimeout() {
return sockTimeout;
}
}",,0
17396,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
private OptimizedMarshallerUtils() {
}
}","public class main {
private OptimizedMarshallerUtils() {
}
}",,0
7023,8386d8f7260143802553bc6dbae2880d6c0bafda,ProjectKB,"public class main {
public void testNoConcurrentProducers() throws Exception {
doSendMessages(1, 1);
}
}","public class main {
public void testNoConcurrentProducers() throws Exception {
doSendMessages(1, 1);
}
}",,0
8875,3e54b2a6314eda11617ff7a7b899c251e222b1a1,ProjectKB,"public class main {
private void silence(Host host, String contextPath) {
String loggerName = getLoggerName(host, contextPath);
Logger logger = Logger.getLogger(loggerName);
pinnedLoggers.put(loggerName, logger);
if (silent) {
logger.setLevel(Level.WARNING);
} else {
logger.setLevel(Level.INFO);
}
}
}","public class main {
private void silence(Host host, String contextPath) {
String loggerName = getLoggerName(host, contextPath);
Logger logger = Logger.getLogger(loggerName);
pinnedLoggers.put(loggerName, logger);
if (silent) {
logger.setLevel(Level.WARNING);
} else {
logger.setLevel(Level.INFO);
}
}
}",,0
2369,3fe03e361725b66c1c3eaa40bb11577fb3dc17b,ProjectKB,"public class main {
public void process(Exchange exchange) throws Exception {
AsyncProcessorHelper.process(this, exchange);
}
}","public class main {
public void process(Exchange exchange) throws Exception {
AsyncProcessorHelper.process(this, exchange);
}
}",,0
11498,ec1cebda618e68d12c9b1906820564408cf950e1,ProjectKB,"public class main {
public boolean isDebug() {
return debugStore != null && debugStore.isDebug();
}
}","public class main {
public boolean isDebug() {
return debugStore != null && debugStore.isDebug();
}
}",,0
10445,fed15f2b01b763158f6650afa13059203366974,ProjectKB,"public class main {
private WebFilter securityContextRepositoryWebFilter() {
ServerSecurityContextRepository repository = this.securityContextRepository;
if(repository == null) {
return null;
}
WebFilter result = new ReactorContextWebFilter(repository);
return new OrderedWebFilter(result, SecurityWebFiltersOrder.REACTOR_CONTEXT.getOrder());
}
}","public class main {
private WebFilter securityContextRepositoryWebFilter() {
ServerSecurityContextRepository repository = this.securityContextRepository;
if(repository == null) {
return null;
}
WebFilter result = new ReactorContextWebFilter(repository);
return new OrderedWebFilter(result, SecurityWebFiltersOrder.REACTOR_CONTEXT.getOrder());
}
}",,0
5529,31815598a2af37f0b71ea94eada70d6659c2375,ProjectKB,"public class main {
public String path() {
return path;
}
}","public class main {
public String path() {
return path;
}
}",,0
2786,a1fbde2bac77c9305a4347876c6a27409361ec77,ProjectKB,"public class main {
public synchronized void setCorrelationId(AMQShortString correlationId) {
if(correlationId == null) {
_propertyFlags &= (~CORRELATION_ID_MASK);
}
else {
_propertyFlags |= CORRELATION_ID_MASK;
}
_correlationId = correlationId;
nullEncodedForm();
}
}","public class main {
public synchronized void setCorrelationId(AMQShortString correlationId) {
if(correlationId == null) {
_propertyFlags &= (~CORRELATION_ID_MASK);
}
else {
_propertyFlags |= CORRELATION_ID_MASK;
}
_correlationId = correlationId;
nullEncodedForm();
}
}",,0
8005,6189e718de5b6c6115aee45dd7a480081c129d68,ProjectKB,"public class main {
public void populateCachedMetaData(CachedResultSetMetaData cachedMetaData) throws SQLException {
cachedMetaData.fields = this.fields;
cachedMetaData.columnNameToIndex = this.columnLabelToIndex;
cachedMetaData.fullColumnNameToIndex = this.fullColumnNameToIndex;
cachedMetaData.metadata = getMetaData();
}
}","public class main {
public void populateCachedMetaData(CachedResultSetMetaData cachedMetaData) throws SQLException {
cachedMetaData.fields = this.fields;
cachedMetaData.columnNameToIndex = this.columnLabelToIndex;
cachedMetaData.fullColumnNameToIndex = this.fullColumnNameToIndex;
cachedMetaData.metadata = getMetaData();
}
}",,0
2450,da3a3233d5679284142eb2887c91a754a0da70b,ProjectKB,"public class main {
public List<Object[]> getUserAddedReport(){
return getEntityManager()
.createNamedQuery(""XXPortalUser.getUserAddedReport"")
.getResultList();
}
}","public class main {
public List<Object[]> getUserAddedReport(){
return getEntityManager()
.createNamedQuery(""XXPortalUser.getUserAddedReport"")
.getResultList();
}
}",,0
2148,6d63958821232699f0a8423d9b21d4915bfba64,ProjectKB,"public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}","public class main {
public TermsHelper() {
fieldmap = new HashMap<>(5);
}
}",,0
167,cecb46a3dd1737cef38ae49ad5f57ac7a1b2faaa,ProjectKB,"public class main {
protected B connection(Http2Connection connection) {
enforceConstraint(""connection"", ""maxReservedStreams"", maxReservedStreams);
enforceConstraint(""connection"", ""server"", isServer);
enforceConstraint(""connection"", ""codec"", decoder);
enforceConstraint(""connection"", ""codec"", encoder);
this.connection = checkNotNull(connection, ""connection"");
return self();
}
}","public class main {
protected B connection(Http2Connection connection) {
enforceConstraint(""connection"", ""maxReservedStreams"", maxReservedStreams);
enforceConstraint(""connection"", ""server"", isServer);
enforceConstraint(""connection"", ""codec"", decoder);
enforceConstraint(""connection"", ""codec"", encoder);
this.connection = checkNotNull(connection, ""connection"");
return self();
}
}",,0
9740,38a882331035ffed205d15a5c92b471fd09659c,ProjectKB,"public class main {
protected static Protocol[] getProps() {
return modify(Util.getTestStack());
}
}","public class main {
protected static Protocol[] getProps() {
return modify(Util.getTestStack());
}
}",,0
62,81aeb7a3aa048ea086c494f725d643e48dd9266,ProjectKB,"public class main {
public static void validateRequiredUserGroups(UaaUser user, ClientDetails client) {
Collection<String> requiredUserGroups = ofNullable((Collection<String>) client.getAdditionalInformation().get(REQUIRED_USER_GROUPS)).orElse(emptySet());
if (!UaaTokenUtils.hasRequiredUserAuthorities(requiredUserGroups, user.getAuthorities())) {
throw new InvalidTokenException(""User does not meet the client's required group criteria."");
}
}
}","public class main {
public static void validateRequiredUserGroups(UaaUser user, ClientDetails client) {
Collection<String> requiredUserGroups = ofNullable((Collection<String>) client.getAdditionalInformation().get(REQUIRED_USER_GROUPS)).orElse(emptySet());
if (!UaaTokenUtils.hasRequiredUserAuthorities(requiredUserGroups, user.getAuthorities())) {
throw new InvalidTokenException(""User does not meet the client's required group criteria."");
}
}
}",,0
6778,784fabac7d1586a5614bd4bc8854fd62850dbe26,ProjectKB,"public class main {
public Builder hostnameVerifier(HostnameVerifier hostnameVerifier) {
if (hostnameVerifier == null) throw new NullPointerException(""hostnameVerifier == null"");
this.hostnameVerifier = hostnameVerifier;
return this;
}
}","public class main {
public Builder hostnameVerifier(HostnameVerifier hostnameVerifier) {
if (hostnameVerifier == null) throw new NullPointerException(""hostnameVerifier == null"");
this.hostnameVerifier = hostnameVerifier;
return this;
}
}",,0
996,f7f0b18f6924fe0b01f32a25ed1e38e29b1bf8e5,ProjectKB,"public class main {
public AhcComponent getComponent() {
return (AhcComponent) super.getComponent();
}
}","public class main {
public AhcComponent getComponent() {
return (AhcComponent) super.getComponent();
}
}",,0
15206,483b445dc77487e2d0f3d8c8bf1a7bbab04464c,ProjectKB,"public class main {
public InputSource toInputSource(InputStream is, Exchange exchange) {
return new InputSource(is);
}
}","public class main {
public InputSource toInputSource(InputStream is, Exchange exchange) {
return new InputSource(is);
}
}",,0
15792,2d399aa6062fccd6af496bd776314d1944f7090,ProjectKB,"public class main {
public void setReadLockMinAge(long readLockMinAge) {
this.readLockMinAge = readLockMinAge;
}
}","public class main {
public void setReadLockMinAge(long readLockMinAge) {
this.readLockMinAge = readLockMinAge;
}
}",,0
18189,1117a37b01a1058897a34e11ff5156e465efb69,ProjectKB,"public class main {
public static String shellCmd(List<String> command) {
List<String> changedCommands = new ArrayList<>(command.size());
for (String str : command) {
if (str == null) {
continue;
}
changedCommands.add(""'"" + str.replaceAll(""'"", ""'\""'\""'"") + ""'"");
}
return StringUtils.join(changedCommands, "" "");
}
}","public class main {
public static String shellCmd(List<String> command) {
List<String> changedCommands = new ArrayList<>(command.size());
for (String str : command) {
if (str == null) {
continue;
}
changedCommands.add(""'"" + str.replaceAll(""'"", ""'\""'\""'"") + ""'"");
}
return StringUtils.join(changedCommands, "" "");
}
}",,0
7712,2de7e14eb95626fffef6f61365186de9a1c9de3,ProjectKB,"public class main {
private JwkUtils() {
}
}","public class main {
private JwkUtils() {
}
}",,0
7708,702bf1,ProjectKB,"public class main {
private int readSocket(boolean timeout, boolean block) throws IOException {
int nRead = 0;
socket.getBufHandler().getReadBuffer().clear();
if ( block ) {
Selector selector = null;
try {
selector = pool.get();
} catch ( IOException x ) {
}
try {
NioEndpoint.KeyAttachment att =
(NioEndpoint.KeyAttachment) socket.getAttachment();
if (att == null) {
throw new IOException(""Key must be cancelled."");
}
nRead = pool.read(socket.getBufHandler().getReadBuffer(),
socket, selector, att.getTimeout());
} catch ( EOFException eof ) {
nRead = -1;
} finally {
if ( selector != null ) pool.put(selector);
}
} else {
nRead = socket.read(socket.getBufHandler().getReadBuffer());
}
if (nRead > 0) {
socket.getBufHandler().getReadBuffer().flip();
socket.getBufHandler().getReadBuffer().limit(nRead);
expand(nRead + pos);
socket.getBufHandler().getReadBuffer().get(buf, pos, nRead);
lastValid = pos + nRead;
return nRead;
} else if (nRead == -1) {
throw new EOFException(sm.getString(""iib.eof.error""));
} else {
return 0;
}
}
}","public class main {
private int readSocket(boolean timeout, boolean block) throws IOException {
int nRead = 0;
socket.getBufHandler().getReadBuffer().clear();
if ( block ) {
Selector selector = null;
try {
selector = pool.get();
} catch ( IOException x ) {
}
try {
NioEndpoint.KeyAttachment att =
(NioEndpoint.KeyAttachment) socket.getAttachment();
if (att == null) {
throw new IOException(""Key must be cancelled."");
}
nRead = pool.read(socket.getBufHandler().getReadBuffer(),
socket, selector, att.getTimeout());
} catch ( EOFException eof ) {
nRead = -1;
} finally {
if ( selector != null ) pool.put(selector);
}
} else {
nRead = socket.read(socket.getBufHandler().getReadBuffer());
}
if (nRead > 0) {
socket.getBufHandler().getReadBuffer().flip();
socket.getBufHandler().getReadBuffer().limit(nRead);
expand(nRead + pos);
socket.getBufHandler().getReadBuffer().get(buf, pos, nRead);
lastValid = pos + nRead;
return nRead;
} else if (nRead == -1) {
throw new EOFException(sm.getString(""iib.eof.error""));
} else {
return 0;
}
}
}",,0
14341,59a0cbb98cef10ddf62d294670aa2e4eb9f8cf8c,ProjectKB,"public class main {
public void testResetWhenOutOfOrderSequenceReceived() throws InterruptedException {
final long producerId = 343434L;
TransactionManager transactionManager = new TransactionManager();
transactionManager.setProducerIdAndEpoch(new ProducerIdAndEpoch(producerId, (short) 0));
setupWithTransactionState(transactionManager);
client.setNode(new Node(1, ""localhost"", 33343));
int maxRetries = 10;
Metrics m = new Metrics();
SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);
Sender sender = new Sender(logContext, client, metadata, this.accumulator, true, MAX_REQUEST_SIZE, ACKS_ALL, maxRetries,
senderMetrics, time, REQUEST_TIMEOUT, 50, transactionManager, apiVersions);
Future<RecordMetadata> responseFuture = accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT).future;
sender.run(time.milliseconds());          sender.run(time.milliseconds());
assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
client.respond(produceResponse(tp0, 0, Errors.OUT_OF_ORDER_SEQUENCE_NUMBER, 0));
sender.run(time.milliseconds());
assertTrue(responseFuture.isDone());
assertEquals(0, sender.inFlightBatches(tp0).size());
assertFalse(""Expected transaction state to be reset upon receiving an OutOfOrderSequenceException"", transactionManager.hasProducerId());
}
}","public class main {
public void testResetWhenOutOfOrderSequenceReceived() throws InterruptedException {
final long producerId = 343434L;
TransactionManager transactionManager = new TransactionManager();
transactionManager.setProducerIdAndEpoch(new ProducerIdAndEpoch(producerId, (short) 0));
setupWithTransactionState(transactionManager);
client.setNode(new Node(1, ""localhost"", 33343));
int maxRetries = 10;
Metrics m = new Metrics();
SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);
Sender sender = new Sender(logContext, client, metadata, this.accumulator, true, MAX_REQUEST_SIZE, ACKS_ALL, maxRetries,
senderMetrics, time, REQUEST_TIMEOUT, 50, transactionManager, apiVersions);
Future<RecordMetadata> responseFuture = accumulator.append(tp0, time.milliseconds(), ""key"".getBytes(), ""value"".getBytes(), null, null, MAX_BLOCK_TIMEOUT).future;
sender.run(time.milliseconds());          sender.run(time.milliseconds());
assertEquals(1, client.inFlightRequestCount());
assertEquals(1, sender.inFlightBatches(tp0).size());
client.respond(produceResponse(tp0, 0, Errors.OUT_OF_ORDER_SEQUENCE_NUMBER, 0));
sender.run(time.milliseconds());
assertTrue(responseFuture.isDone());
assertEquals(0, sender.inFlightBatches(tp0).size());
assertFalse(""Expected transaction state to be reset upon receiving an OutOfOrderSequenceException"", transactionManager.hasProducerId());
}
}",,0
6959,39cafcb05c99f2aa9fce7e6597664c9ed6a63a9,ProjectKB,"public class main {
private static void testResponseWithContentLengthFragmented(byte[] header, int fragmentSize) {
EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder());
for (int a = 0; a < header.length;) {
int amount = fragmentSize;
if (a + amount > header.length) {
amount = header.length -  a;
}
ch.writeInbound(Unpooled.copiedBuffer(header, a, amount));
a += amount;
}
byte[] data = new byte[10];
for (int i = 0; i < data.length; i++) {
data[i] = (byte) i;
}
ch.writeInbound(Unpooled.copiedBuffer(data, 0, data.length / 2));
ch.writeInbound(Unpooled.copiedBuffer(data, 5, data.length / 2));
HttpResponse res = ch.readInbound();
assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_1));
assertThat(res.status(), is(HttpResponseStatus.OK));
HttpContent firstContent = ch.readInbound();
assertThat(firstContent.content().readableBytes(), is(5));
assertEquals(Unpooled.wrappedBuffer(data, 0, 5), firstContent.content());
firstContent.release();
LastHttpContent lastContent = ch.readInbound();
assertEquals(5, lastContent.content().readableBytes());
assertEquals(Unpooled.wrappedBuffer(data, 5, 5), lastContent.content());
lastContent.release();
assertThat(ch.finish(), is(false));
assertThat(ch.readInbound(), is(nullValue()));
}
}","public class main {
private static void testResponseWithContentLengthFragmented(byte[] header, int fragmentSize) {
EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder());
for (int a = 0; a < header.length;) {
int amount = fragmentSize;
if (a + amount > header.length) {
amount = header.length -  a;
}
ch.writeInbound(Unpooled.copiedBuffer(header, a, amount));
a += amount;
}
byte[] data = new byte[10];
for (int i = 0; i < data.length; i++) {
data[i] = (byte) i;
}
ch.writeInbound(Unpooled.copiedBuffer(data, 0, data.length / 2));
ch.writeInbound(Unpooled.copiedBuffer(data, 5, data.length / 2));
HttpResponse res = ch.readInbound();
assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_1));
assertThat(res.status(), is(HttpResponseStatus.OK));
HttpContent firstContent = ch.readInbound();
assertThat(firstContent.content().readableBytes(), is(5));
assertEquals(Unpooled.wrappedBuffer(data, 0, 5), firstContent.content());
firstContent.release();
LastHttpContent lastContent = ch.readInbound();
assertEquals(5, lastContent.content().readableBytes());
assertEquals(Unpooled.wrappedBuffer(data, 5, 5), lastContent.content());
lastContent.release();
assertThat(ch.finish(), is(false));
assertThat(ch.readInbound(), is(nullValue()));
}
}",,0
15041,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
public static String safeReadFully(Reader reader) throws IOException {
String ret = readFully(reader);
return ret == null ? """" : ret;
}
}","public class main {
public static String safeReadFully(Reader reader) throws IOException {
String ret = readFully(reader);
return ret == null ? """" : ret;
}
}",,0
1134,f7f0b18f6924fe0b01f32a25ed1e38e29b1bf8e5,ProjectKB,"public class main {
public boolean isTransferException() {
return transferException;
}
}","public class main {
public boolean isTransferException() {
return transferException;
}
}",,0
6624,a6bf3e421d3d37a797e3bb374fcd20a00189feb,ProjectKB,"public class main {
public static String blobstoreMaxKeySequenceNumberPath(String key) {
return BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE + ZK_SEPERATOR + key;
}
}","public class main {
public static String blobstoreMaxKeySequenceNumberPath(String key) {
return BLOBSTORE_MAX_KEY_SEQUENCE_NUMBER_SUBTREE + ZK_SEPERATOR + key;
}
}",,0
11579,75e08695a04980dbceae6789364717e9d8764d58,ProjectKB,"public class main {
protected String getMethod() {
return this.method;
}
}","public class main {
protected String getMethod() {
return this.method;
}
}",,0
17059,5a47697519018eb4918df33a21faae811e85f01a,ProjectKB,"public class main {
public void testCacheConfig() {
assertNotNull(config);
assertEquals(1, config.getCacheConfigs().size());
CacheSimpleConfig cacheConfig = config.getCacheConfig(""testCache"");
assertEquals(""testCache"", cacheConfig.getName());
assertTrue(cacheConfig.isDisablePerEntryInvalidationEvents());
assertTrue(cacheConfig.getHotRestartConfig().isEnabled());
assertTrue(cacheConfig.getHotRestartConfig().isFsync());
WanReplicationRef wanRef = cacheConfig.getWanReplicationRef();
assertEquals(""testWan"", wanRef.getName());
assertEquals(""PUT_IF_ABSENT"", wanRef.getMergePolicy());
assertEquals(1, wanRef.getFilters().size());
assertEquals(""com.example.SampleFilter"", wanRef.getFilters().get(0));
assertFalse(wanRef.isRepublishingEnabled());
}
}","public class main {
public void testCacheConfig() {
assertNotNull(config);
assertEquals(1, config.getCacheConfigs().size());
CacheSimpleConfig cacheConfig = config.getCacheConfig(""testCache"");
assertEquals(""testCache"", cacheConfig.getName());
assertTrue(cacheConfig.isDisablePerEntryInvalidationEvents());
assertTrue(cacheConfig.getHotRestartConfig().isEnabled());
assertTrue(cacheConfig.getHotRestartConfig().isFsync());
WanReplicationRef wanRef = cacheConfig.getWanReplicationRef();
assertEquals(""testWan"", wanRef.getName());
assertEquals(""PUT_IF_ABSENT"", wanRef.getMergePolicy());
assertEquals(1, wanRef.getFilters().size());
assertEquals(""com.example.SampleFilter"", wanRef.getFilters().get(0));
assertFalse(wanRef.isRepublishingEnabled());
}
}",,0
14245,99cbcd78b7e64083fae1d9552ead7425a90994b,ProjectKB,"public class main {
public File getSchemaFile() {
return schemaFile;
}
}","public class main {
public File getSchemaFile() {
return schemaFile;
}
}",,0
14274,fd85803a73ad46f36816bcb55ed1c4f4b4c4312,ProjectKB,"public class main {
private void cacheStreamedAttachments() throws IOException {
if (body instanceof DelegatingInputStream
&& !((DelegatingInputStream) body).isClosed()) {
cache((DelegatingInputStream) body);
}
List<Attachment> atts = new ArrayList<>(attachments.getLoadedAttachments());
for (Attachment a : atts) {
DataSource s = a.getDataHandler().getDataSource();
if (s instanceof AttachmentDataSource) {
AttachmentDataSource ads = (AttachmentDataSource)s;
if (!ads.isCached()) {
ads.cache(message);
}
} else if (s.getInputStream() instanceof DelegatingInputStream) {
cache((DelegatingInputStream) s.getInputStream());
} else {
}
}
}
}","public class main {
private void cacheStreamedAttachments() throws IOException {
if (body instanceof DelegatingInputStream
&& !((DelegatingInputStream) body).isClosed()) {
cache((DelegatingInputStream) body);
}
List<Attachment> atts = new ArrayList<>(attachments.getLoadedAttachments());
for (Attachment a : atts) {
DataSource s = a.getDataHandler().getDataSource();
if (s instanceof AttachmentDataSource) {
AttachmentDataSource ads = (AttachmentDataSource)s;
if (!ads.isCached()) {
ads.cache(message);
}
} else if (s.getInputStream() instanceof DelegatingInputStream) {
cache((DelegatingInputStream) s.getInputStream());
} else {
}
}
}
}",,0
10298,bc6078ca949039e2076cd08b4cb169c84c1179b1,ProjectKB,"public class main {
protected List computeSources() throws SVGConverterException{
List sources = new ArrayList();
if (this.sources == null){
throw new SVGConverterException(ERROR_NO_SOURCES_SPECIFIED);
}
int n = this.sources.size();
for (Object source : this.sources) {
String sourceString = (String) source;
File file = new File(sourceString);
if (file.exists()) {
sources.add(new SVGConverterFileSource(file));
} else {
String[] fileNRef = getFileNRef(sourceString);
file = new File(fileNRef[0]);
if (file.exists()) {
sources.add(new SVGConverterFileSource(file, fileNRef[1]));
} else {
sources.add(new SVGConverterURLSource(sourceString));
}
}
}
return sources;
}
}","public class main {
protected List computeSources() throws SVGConverterException{
List sources = new ArrayList();
if (this.sources == null){
throw new SVGConverterException(ERROR_NO_SOURCES_SPECIFIED);
}
int n = this.sources.size();
for (Object source : this.sources) {
String sourceString = (String) source;
File file = new File(sourceString);
if (file.exists()) {
sources.add(new SVGConverterFileSource(file));
} else {
String[] fileNRef = getFileNRef(sourceString);
file = new File(fileNRef[0]);
if (file.exists()) {
sources.add(new SVGConverterFileSource(file, fileNRef[1]));
} else {
sources.add(new SVGConverterURLSource(sourceString));
}
}
}
return sources;
}
}",,0
11953,e030f6665db037a2f73f30b9125fb770f29a7bd,ProjectKB,"public class main {
public void setPreMove(Expression preMove) {
this.preMove = preMove;
}
}","public class main {
public void setPreMove(Expression preMove) {
this.preMove = preMove;
}
}",,0
15504,5e1d70c6957703cdebbfe5d796462e5a89c8bc2,ProjectKB,"public class main {
public GenericFileFilter<T> getAntFilter() {
return antFilter;
}
}","public class main {
public GenericFileFilter<T> getAntFilter() {
return antFilter;
}
}",,0
10015,fed39c3619825bd92990cf1aa7a4e85119e00a6e,ProjectKB,"public class main {
public Collection<String> getConnections(String connectorName) throws Exception {
String brokerName = getBrokerName();
ObjectName query = new ObjectName(""org.apache.activemq:BrokerName="" + brokerName
+ "",Type=Connection,ConnectorName="" + connectorName + "",*"");
Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
Collection<String> result = new ArrayList<String>(queryResult.size());
for (ObjectName on : queryResult) {
String name = StringUtils.replace(on.getKeyProperty(""Connection""), ""_"", "":"");
result.add(name);
}
return result;
}
}","public class main {
public Collection<String> getConnections(String connectorName) throws Exception {
String brokerName = getBrokerName();
ObjectName query = new ObjectName(""org.apache.activemq:BrokerName="" + brokerName
+ "",Type=Connection,ConnectorName="" + connectorName + "",*"");
Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
Collection<String> result = new ArrayList<String>(queryResult.size());
for (ObjectName on : queryResult) {
String name = StringUtils.replace(on.getKeyProperty(""Connection""), ""_"", "":"");
result.add(name);
}
return result;
}
}",,0
19106,47c2753496875db2849065ad91ee03c7c842c8e,ProjectKB,"public class main {
public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException {
if (!complete)
throw new IllegalStateException(""Authentication exchange has not completed"");
return Arrays.copyOfRange(outgoing, offset, offset + len);
}
}","public class main {
public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException {
if (!complete)
throw new IllegalStateException(""Authentication exchange has not completed"");
return Arrays.copyOfRange(outgoing, offset, offset + len);
}
}",,0
12773,28104c45df424730006a90c52cafda8f7dbcd303,ProjectKB,"public class main {
public boolean isProducerPoolEnabled() {
return producerPoolEnabled;
}
}","public class main {
public boolean isProducerPoolEnabled() {
return producerPoolEnabled;
}
}",,0
12474,294b8ce638df6e237e819537b333e02853bb612,ProjectKB,"public class main {
public ProtocolDecoder getDecoder(IoSession session) {
return decoder;
}
}","public class main {
public ProtocolDecoder getDecoder(IoSession session) {
return decoder;
}
}",,0
2885,8fbe2e,ProjectKB,"public class main {
public void setRelaxedQueryChars(String relaxedQueryChars) {
this.relaxedQueryChars = relaxedQueryChars;
}
}","public class main {
public void setRelaxedQueryChars(String relaxedQueryChars) {
this.relaxedQueryChars = relaxedQueryChars;
}
}",,0
14465,19bebdecbd82a3fce3187a14e0ac417ce8d9b60,ProjectKB,"public class main {
public boolean fill(boolean block, ByteBuffer data, int len) throws IOException {
boolean result = fill(block, data.array(), data.arrayOffset() + data.position(), len);
if (result) {
data.position(data.position() + len);
}
return result;
}
}","public class main {
public boolean fill(boolean block, ByteBuffer data, int len) throws IOException {
boolean result = fill(block, data.array(), data.arrayOffset() + data.position(), len);
if (result) {
data.position(data.position() + len);
}
return result;
}
}",,0
3029,6bf89927d3e07197d49453b00d673eadce696cf,ProjectKB,"public class main {
protected Response createErrorResponseFromBean(OAuthError errorBean) {
return JAXRSUtils.toResponseBuilder(400).entity(errorBean).build();
}
}","public class main {
protected Response createErrorResponseFromBean(OAuthError errorBean) {
return JAXRSUtils.toResponseBuilder(400).entity(errorBean).build();
}
}",,0
5793,934937d9c1dc20c396b96c08310b72cfa627acb,ProjectKB,"public class main {
public String toString() {
StringBuilder result = new StringBuilder();
result.append(super.toString());
result.append(""ServiceUrl: "");
result.append(serviceUrl);
return result.toString();
}
}","public class main {
public String toString() {
StringBuilder result = new StringBuilder();
result.append(super.toString());
result.append(""ServiceUrl: "");
result.append(serviceUrl);
return result.toString();
}
}",,0
6601,d17b23fc3bf9b86f111774925afadfced75315c,ProjectKB,"public class main {
public boolean notAuthenticated() {
return SecurityContextHolder.getContext().getAuthentication()==null ||
!SecurityContextHolder.getContext().getAuthentication().isAuthenticated();
}
}","public class main {
public boolean notAuthenticated() {
return SecurityContextHolder.getContext().getAuthentication()==null ||
!SecurityContextHolder.getContext().getAuthentication().isAuthenticated();
}
}",,0
644,91b803a2310344d925e5d4b1709bbcea9037554,ProjectKB,"public class main {
public String toString() {
return ""ResourceHttpRequestHandler [locations="" + getLocations() + "", resolvers="" + getResourceResolvers() + ""]"";
}
}","public class main {
public String toString() {
return ""ResourceHttpRequestHandler [locations="" + getLocations() + "", resolvers="" + getResourceResolvers() + ""]"";
}
}",,0
16372,2281b1f365c50ee1a470fb9990b753eadee9095,ProjectKB,"public class main {
protected GenericFileProducer(GenericFileEndpoint<T> endpoint, GenericFileOperations<T> operations) {
super(endpoint);
this.endpoint = endpoint;
this.operations = operations;
}
}","public class main {
protected GenericFileProducer(GenericFileEndpoint<T> endpoint, GenericFileOperations<T> operations) {
super(endpoint);
this.endpoint = endpoint;
this.operations = operations;
}
}",,0
1703,66132926f1bac0b878da5841be2f93fa5075d88f,ProjectKB,"public class main {
public void testResetPassword() throws Exception {
setupResetPassword(""example"", ""redirect.example.com/login"");
BaseClientDetails client = new BaseClientDetails();
client.setRegisteredRedirectUri(Collections.singleton(""redirect.example.com/*""));
when(clientDetailsService.loadClientByClientId(""example"")).thenReturn(client);
ResetPasswordResponse response = emailResetPasswordService.resetPassword(""secret_code"", ""new_secret"");
Assert.assertEquals(""usermans-id"", response.getUser().getId());
Assert.assertEquals(""userman"", response.getUser().getUserName());
Assert.assertEquals(""redirect.example.com/login"", response.getRedirectUri());
}
@Test
public void testResetPasswordWhenTheCodeIsDenied() throws Exception {
try {
emailResetPasswordService.resetPassword(""b4d_k0d3z"", ""new_password"");
} catch (InvalidCodeException e) {
assertEquals(""Sorry, your reset password link is no longer valid. Please request a new one"", e.getMessage());
assertEquals(422, e.getHttpStatus());
}
}","public class main {
public void testResetPassword() throws Exception {
setupResetPassword(""example"", ""redirect.example.com/login"");
BaseClientDetails client = new BaseClientDetails();
client.setRegisteredRedirectUri(Collections.singleton(""redirect.example.com/*""));
when(clientDetailsService.loadClientByClientId(""example"")).thenReturn(client);
ResetPasswordResponse response = emailResetPasswordService.resetPassword(""secret_code"", ""new_secret"");
Assert.assertEquals(""usermans-id"", response.getUser().getId());
Assert.assertEquals(""userman"", response.getUser().getUserName());
Assert.assertEquals(""redirect.example.com/login"", response.getRedirectUri());
}
@Test
public void testResetPasswordWhenTheCodeIsDenied() throws Exception {
try {
emailResetPasswordService.resetPassword(""b4d_k0d3z"", ""new_password"");
} catch (InvalidCodeException e) {
assertEquals(""Sorry, your reset password link is no longer valid. Please request a new one"", e.getMessage());
assertEquals(422, e.getHttpStatus());
}
}",,0
10778,632951898a2f1474f699094200367fb405397127,ProjectKB,"public class main {
public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
when(credentialDataService.findByUuid(UUID_STRING))
.thenReturn(null);
try {
subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
fail(""should throw exception"");
} catch (EntryNotFoundException e) {
assertThat(e.getMessage(), equalTo(""error.credential.invalid_access""));
}
}
}","public class main {
public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
when(credentialDataService.findByUuid(UUID_STRING))
.thenReturn(null);
try {
subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
fail(""should throw exception"");
} catch (EntryNotFoundException e) {
assertThat(e.getMessage(), equalTo(""error.credential.invalid_access""));
}
}
}",,0
2968,d28baa3fc5566b47f1ca7cc2ba1aba658dc634a,ProjectKB,"public class main {
public void testPointRangeQueryWithoutRange() throws ParserException, IOException {
Query q = parse(""PointRangeQueryWithoutRange.xml"");
dumpResults(""PointRangeQueryWithoutRange"", q, 5);
}
}","public class main {
public void testPointRangeQueryWithoutRange() throws ParserException, IOException {
Query q = parse(""PointRangeQueryWithoutRange.xml"");
dumpResults(""PointRangeQueryWithoutRange"", q, 5);
}
}",,0
13916,75411ab34a3d53c43c2d508b12314a9788aa417,ProjectKB,"public class main {
public int hashCode() {
assert false : ""hashCode not designed"";
return 42;         }
private boolean checkAddressesEqual(InetSocketAddress addr1, InetSocketAddress addr2){
if ((addr1 == null && addr2!=null) ||
(addr1!=null && addr2==null) ||
(addr1!=null && addr2!=null && !addr1.equals(addr2))) return false;
return true;
}
public boolean equals(Object o){
if (!(o instanceof QuorumServer)) return false;
QuorumServer qs = (QuorumServer)o;
if ((qs.id != id) || (qs.type != type)) return false;
if (!checkAddressesEqual(addr, qs.addr)) return false;
if (!checkAddressesEqual(electionAddr, qs.electionAddr)) return false;
if (!checkAddressesEqual(clientAddr, qs.clientAddr)) return false;
return true;
}
public void checkAddressDuplicate(QuorumServer s) throws BadArgumentsException {
List<InetSocketAddress> otherAddrs = new ArrayList<InetSocketAddress>();
otherAddrs.add(s.addr);
otherAddrs.add(s.clientAddr);
otherAddrs.add(s.electionAddr);
otherAddrs = excludedSpecialAddresses(otherAddrs);
for (InetSocketAddress my: this.myAddrs) {
for (InetSocketAddress other: otherAddrs) {
if (my.equals(other)) {
String error = String.format(""%s of server.%d conflicts %s of server.%d"", my, this.id, other, s.id);
throw new BadArgumentsException(error);
}
}","public class main {
public int hashCode() {
assert false : ""hashCode not designed"";
return 42;         }
private boolean checkAddressesEqual(InetSocketAddress addr1, InetSocketAddress addr2){
if ((addr1 == null && addr2!=null) ||
(addr1!=null && addr2==null) ||
(addr1!=null && addr2!=null && !addr1.equals(addr2))) return false;
return true;
}
public boolean equals(Object o){
if (!(o instanceof QuorumServer)) return false;
QuorumServer qs = (QuorumServer)o;
if ((qs.id != id) || (qs.type != type)) return false;
if (!checkAddressesEqual(addr, qs.addr)) return false;
if (!checkAddressesEqual(electionAddr, qs.electionAddr)) return false;
if (!checkAddressesEqual(clientAddr, qs.clientAddr)) return false;
return true;
}
public void checkAddressDuplicate(QuorumServer s) throws BadArgumentsException {
List<InetSocketAddress> otherAddrs = new ArrayList<InetSocketAddress>();
otherAddrs.add(s.addr);
otherAddrs.add(s.clientAddr);
otherAddrs.add(s.electionAddr);
otherAddrs = excludedSpecialAddresses(otherAddrs);
for (InetSocketAddress my: this.myAddrs) {
for (InetSocketAddress other: otherAddrs) {
if (my.equals(other)) {
String error = String.format(""%s of server.%d conflicts %s of server.%d"", my, this.id, other, s.id);
throw new BadArgumentsException(error);
}
}",,0
9228,b80c13b722bb207ddf43f53a007ee3ddc1dd2e2,ProjectKB,"public class main {
public void renderSimpleBeanPrefixed() throws Exception {
view.setPrefixJson(true);
renderSimpleBean();
assertTrue(response.getContentAsString().startsWith("")]}', ""));
}
@Test
public void renderSimpleBeanNotPrefixed() throws Exception {
view.setPrefixJson(false);
renderSimpleBean();
assertFalse(response.getContentAsString().startsWith("")]}
}","public class main {
public void renderSimpleBeanPrefixed() throws Exception {
view.setPrefixJson(true);
renderSimpleBean();
assertTrue(response.getContentAsString().startsWith("")]}', ""));
}
@Test
public void renderSimpleBeanNotPrefixed() throws Exception {
view.setPrefixJson(false);
renderSimpleBean();
assertFalse(response.getContentAsString().startsWith("")]}
}",,0
14461,19bebdecbd82a3fce3187a14e0ac417ce8d9b60,ProjectKB,"public class main {
private boolean validateHeader(String[] responseHeaders, String header) {
boolean found = false;
for (String responseHeader : responseHeaders) {
if (responseHeader.equalsIgnoreCase(header)) {
found = true;
break;
}
}
return found;
}
}","public class main {
private boolean validateHeader(String[] responseHeaders, String header) {
boolean found = false;
for (String responseHeader : responseHeaders) {
if (responseHeader.equalsIgnoreCase(header)) {
found = true;
break;
}
}
return found;
}
}",,0
16856,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public ClientInternalExceptionListener getClientInternalExceptionListener() {
return clientInternalExceptionListener;
}
}","public class main {
public ClientInternalExceptionListener getClientInternalExceptionListener() {
return clientInternalExceptionListener;
}
}",,0
7820,2de7e14eb95626fffef6f61365186de9a1c9de3,ProjectKB,"public class main {
public static void validateJwsCertificateChain(List<X509Certificate> certs) {
Properties props = loadSignatureInProperties(true);
KeyManagementUtils.validateCertificateChain(props, certs);
}
}","public class main {
public static void validateJwsCertificateChain(List<X509Certificate> certs) {
Properties props = loadSignatureInProperties(true);
KeyManagementUtils.validateCertificateChain(props, certs);
}
}",,0
8604,d50df341432df1049c6c85bf2dcda9eb0be04d73,ProjectKB,"public class main {
private void assertPrependedLauncherAndDefaultEntries(final Configuration launcherConf) {
assertTrue(""launcher java opts"",
launcherConf.get(LauncherAM.OOZIE_LAUNCHER_JAVAOPTS_PROPERTY).contains(""-XX:+UseParNewGC -XX:MaxPermSize=128m""));
assertTrue(""java opts"", launcherConf.get(""javaopts"").contains(""-XX:MaxPermSize=128m""));
assertFalse(""java opts"", launcherConf.get(""javaopts"").contains(""-XX:+UseParNewGC""));
assertTrue(""launcher env"",
launcherConf.get(LauncherAM.OOZIE_LAUNCHER_ENV_PROPERTY).contains(""ENV=env:$ENV PATH=/path2:$PATH""));
assertTrue(""env"", launcherConf.get(""env"").contains(""PATH=/path2:$PATH""));
assertFalse(""env"", launcherConf.get(""env"").contains(""ENV=env:$ENV""));
}
}","public class main {
private void assertPrependedLauncherAndDefaultEntries(final Configuration launcherConf) {
assertTrue(""launcher java opts"",
launcherConf.get(LauncherAM.OOZIE_LAUNCHER_JAVAOPTS_PROPERTY).contains(""-XX:+UseParNewGC -XX:MaxPermSize=128m""));
assertTrue(""java opts"", launcherConf.get(""javaopts"").contains(""-XX:MaxPermSize=128m""));
assertFalse(""java opts"", launcherConf.get(""javaopts"").contains(""-XX:+UseParNewGC""));
assertTrue(""launcher env"",
launcherConf.get(LauncherAM.OOZIE_LAUNCHER_ENV_PROPERTY).contains(""ENV=env:$ENV PATH=/path2:$PATH""));
assertTrue(""env"", launcherConf.get(""env"").contains(""PATH=/path2:$PATH""));
assertFalse(""env"", launcherConf.get(""env"").contains(""ENV=env:$ENV""));
}
}",,0
14917,9c1f4d905da59bf446570ac28df5b68a37281f35,ProjectKB,"public class main {
public String getEofStr() {
return eofStr.substring(0);
}
}","public class main {
public String getEofStr() {
return eofStr.substring(0);
}
}",,0
3567,adb2a34306d67559ee81db155826dc67a02cc85e,ProjectKB,"public class main {
public void testTraverseWithDeletedEntries() {
_queueEntry2.acquire();
_queueEntry2.delete();
assertTrue(_queueEntry2.isDeleted());
QueueEntry current = _queueEntry;
current = current.getNextValidEntry();
assertSame(""Unexpected current entry"", _queueEntry3, current);
current = current.getNextValidEntry();
assertNull(current);
}
}","public class main {
public void testTraverseWithDeletedEntries() {
_queueEntry2.acquire();
_queueEntry2.delete();
assertTrue(_queueEntry2.isDeleted());
QueueEntry current = _queueEntry;
current = current.getNextValidEntry();
assertSame(""Unexpected current entry"", _queueEntry3, current);
current = current.getNextValidEntry();
assertNull(current);
}
}",,0
7433,b52bf267c7aa528b282d09c637344650f903495,ProjectKB,"public class main {
public NamedList createSnapshot() throws Exception {
final IndexCommit indexCommit = getAndSaveIndexCommit();
try {
return createSnapshot(indexCommit);
} finally {
solrCore.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());
}
}
}","public class main {
public NamedList createSnapshot() throws Exception {
final IndexCommit indexCommit = getAndSaveIndexCommit();
try {
return createSnapshot(indexCommit);
} finally {
solrCore.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());
}
}
}",,0
1224,9a0231683a77e2957cea0fdee88b193b30b0c97,ProjectKB,"public class main {
public void testIdleStateInvalidFrame01() throws Exception {
http2Connect();
sendWindowUpdate(3, 200);
handleGoAwayResponse(1);
}
}","public class main {
public void testIdleStateInvalidFrame01() throws Exception {
http2Connect();
sendWindowUpdate(3, 200);
handleGoAwayResponse(1);
}
}",,0
19213,62e82ad92cf4818709d6044aaf257b73d42659a4,ProjectKB,"public class main {
public void testIssue_BEANUTILS_157_BeanUtils_Describe_Bean() {
final Object bean = new FooBar();
Map<String, String> result = null;
try {
result = BeanUtils.describe(bean);
} catch (final Throwable t) {
log.error(""Describe Bean: "" + t.getMessage(), t);
fail(""Describe Bean Threw exception: "" + t);
}
assertEquals(""Check Size"", 2, result.size());
assertTrue(""Class"", result.containsKey(""class""));
assertTrue(""publicFoo Key"", result.containsKey(""publicFoo""));
assertEquals(""publicFoo Value"", ""PublicFoo Value"", result.get(""publicFoo""));
}
}","public class main {
public void testIssue_BEANUTILS_157_BeanUtils_Describe_Bean() {
final Object bean = new FooBar();
Map<String, String> result = null;
try {
result = BeanUtils.describe(bean);
} catch (final Throwable t) {
log.error(""Describe Bean: "" + t.getMessage(), t);
fail(""Describe Bean Threw exception: "" + t);
}
assertEquals(""Check Size"", 2, result.size());
assertTrue(""Class"", result.containsKey(""class""));
assertTrue(""publicFoo Key"", result.containsKey(""publicFoo""));
assertEquals(""publicFoo Value"", ""PublicFoo Value"", result.get(""publicFoo""));
}
}",,0
4520,9730cd6a3bbb481ee4e400b51952b537589c469d,ProjectKB,"public class main {
public void testCreateUserCheckSalt() throws Exception {
ScimUser scimUser = new ScimUser(""user-id-3"", ""user3@example.com"", ""User"", ""Example"");
ScimUser.Email email = new ScimUser.Email();
email.setValue(""user@example.com"");
scimUser.setEmails(Arrays.asList(email));
scimUser.setPassword(""password"");
scimUser.setSalt(""salt"");
scimUser = db.create(scimUser);
assertNotNull(scimUser);
assertEquals(""salt"", scimUser.getSalt());
scimUser.setSalt(""newsalt"");
scimUser = db.update(scimUser.getId(), scimUser);
assertNotNull(scimUser);
assertEquals(""newsalt"", scimUser.getSalt());
}
}","public class main {
public void testCreateUserCheckSalt() throws Exception {
ScimUser scimUser = new ScimUser(""user-id-3"", ""user3@example.com"", ""User"", ""Example"");
ScimUser.Email email = new ScimUser.Email();
email.setValue(""user@example.com"");
scimUser.setEmails(Arrays.asList(email));
scimUser.setPassword(""password"");
scimUser.setSalt(""salt"");
scimUser = db.create(scimUser);
assertNotNull(scimUser);
assertEquals(""salt"", scimUser.getSalt());
scimUser.setSalt(""newsalt"");
scimUser = db.update(scimUser.getId(), scimUser);
assertNotNull(scimUser);
assertEquals(""newsalt"", scimUser.getSalt());
}
}",,0
17997,2207733b82d85e354fa1a6fd114dae665816fdf,ProjectKB,"public class main {
public void write(String s) throws IOException {
if (suspended) {
return;
}
if (s == null) {
s = ""null"";
}
write(s, 0, s.length());
}
}","public class main {
public void write(String s) throws IOException {
if (suspended) {
return;
}
if (s == null) {
s = ""null"";
}
write(s, 0, s.length());
}
}",,0
10212,2736b6fe0b3fa22ec8e2b4184897ecadb021fc78,ProjectKB,"public class main {
public static String getExtension(final String fileName) throws IllegalArgumentException {
if (fileName == null) {
return null;
}
final int index = indexOfExtension(fileName);
if (index == NOT_FOUND) {
return EMPTY_STRING;
}
return fileName.substring(index + 1);
}
}","public class main {
public static String getExtension(final String fileName) throws IllegalArgumentException {
if (fileName == null) {
return null;
}
final int index = indexOfExtension(fileName);
if (index == NOT_FOUND) {
return EMPTY_STRING;
}
return fileName.substring(index + 1);
}
}",,0
2784,a1fbde2bac77c9305a4347876c6a27409361ec77,ProjectKB,"public class main {
public String getCorrelationIdAsString() {
return (_correlationId == null) ? null : _correlationId.toString();
}
}","public class main {
public String getCorrelationIdAsString() {
return (_correlationId == null) ? null : _correlationId.toString();
}
}",,0
10600,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public boolean isHA() {
return false;
}
}","public class main {
public boolean isHA() {
return false;
}
}",,0
18606,3c20b874fba9cc2a78b9ace10208de1602b56c3f,ProjectKB,"public class main {
public void test_lt() {
Entity from = from(Entity.class);
where(from.getIntegerField()).lt(2);
Query<Entity> select = select(from);
assertEquals(""select entity_0 from Entity entity_0 where entity_0.integerField < :integerField_1"",
select.getQuery());
}
}","public class main {
public void test_lt() {
Entity from = from(Entity.class);
where(from.getIntegerField()).lt(2);
Query<Entity> select = select(from);
assertEquals(""select entity_0 from Entity entity_0 where entity_0.integerField < :integerField_1"",
select.getQuery());
}
}",,0
6203,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
private int maxAsyncThreads(ExecutorService executorService, Configuration configuration) {
if (executorService instanceof ThreadPoolExecutor) {
return ((ThreadPoolExecutor) executorService).getMaximumPoolSize();
}
return new ConfigurationProperties(configuration.asyncExecutorFactory().properties()).getDefaultExecutorFactoryPoolSize();
}
}","public class main {
private int maxAsyncThreads(ExecutorService executorService, Configuration configuration) {
if (executorService instanceof ThreadPoolExecutor) {
return ((ThreadPoolExecutor) executorService).getMaximumPoolSize();
}
return new ConfigurationProperties(configuration.asyncExecutorFactory().properties()).getDefaultExecutorFactoryPoolSize();
}
}",,0
17163,5a47697519018eb4918df33a21faae811e85f01a,ProjectKB,"public class main {
public final void registerGlobal(final Serializer serializer, boolean overrideJavaSerialization) {
SerializerAdapter adapter = createSerializerAdapter(serializer, this);
if (!global.compareAndSet(null, adapter)) {
throw new IllegalStateException(""Global serializer is already registered!"");
}
this.overrideJavaSerialization = overrideJavaSerialization;
SerializerAdapter current = idMap.putIfAbsent(serializer.getTypeId(), adapter);
if (current != null && current.getImpl().getClass() != adapter.getImpl().getClass()) {
global.compareAndSet(adapter, null);
this.overrideJavaSerialization = false;
throw new IllegalStateException(
""Serializer ["" + current.getImpl() + ""] has been already registered for type-id: "" + serializer.getTypeId());
}
}
}","public class main {
public final void registerGlobal(final Serializer serializer, boolean overrideJavaSerialization) {
SerializerAdapter adapter = createSerializerAdapter(serializer, this);
if (!global.compareAndSet(null, adapter)) {
throw new IllegalStateException(""Global serializer is already registered!"");
}
this.overrideJavaSerialization = overrideJavaSerialization;
SerializerAdapter current = idMap.putIfAbsent(serializer.getTypeId(), adapter);
if (current != null && current.getImpl().getClass() != adapter.getImpl().getClass()) {
global.compareAndSet(adapter, null);
this.overrideJavaSerialization = false;
throw new IllegalStateException(
""Serializer ["" + current.getImpl() + ""] has been already registered for type-id: "" + serializer.getTypeId());
}
}
}",,0
10016,fed39c3619825bd92990cf1aa7a4e85119e00a6e,ProjectKB,"public class main {
public ConnectionViewMBean getConnection(String connectionName) throws Exception {
connectionName = StringUtils.replace(connectionName, "":"", ""_"");
String brokerName = getBrokerName();
ObjectName query = new ObjectName(""org.apache.activemq:BrokerName="" + brokerName
+ "",Type=Connection,*,Connection="" + connectionName);
Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
if (queryResult.size() == 0)
return null;
ObjectName objectName = queryResult.iterator().next();
return (ConnectionViewMBean) getManagementContext().newProxyInstance(objectName, ConnectionViewMBean.class,
true);
}
}","public class main {
public ConnectionViewMBean getConnection(String connectionName) throws Exception {
connectionName = StringUtils.replace(connectionName, "":"", ""_"");
String brokerName = getBrokerName();
ObjectName query = new ObjectName(""org.apache.activemq:BrokerName="" + brokerName
+ "",Type=Connection,*,Connection="" + connectionName);
Set<ObjectName> queryResult = getManagementContext().queryNames(query, null);
if (queryResult.size() == 0)
return null;
ObjectName objectName = queryResult.iterator().next();
return (ConnectionViewMBean) getManagementContext().newProxyInstance(objectName, ConnectionViewMBean.class,
true);
}
}",,0
4541,9730cd6a3bbb481ee4e400b51952b537589c469d,ProjectKB,"public class main {
public void canRetrieveUsersWithFilterStartsWith() {
assertEquals(1, db.query(""username sw \""joe\"""").size());
}
}","public class main {
public void canRetrieveUsersWithFilterStartsWith() {
assertEquals(1, db.query(""username sw \""joe\"""").size());
}
}",,0
6144,c630752604332c4cc84fc44dfbb9011a296ab966,ProjectKB,"public class main {
private ToEmptyBytesKeyValueFilterConverter() {
}
}","public class main {
private ToEmptyBytesKeyValueFilterConverter() {
}
}",,0
3069,338a74dfa42a7b19d39adecacfa5f626a050e807,ProjectKB,"public class main {
public void setDefaultClientID(String clientID) throws JMSException {
this.info.setClientId(clientID);
this.userSpecifiedClientID = true;
}
}","public class main {
public void setDefaultClientID(String clientID) throws JMSException {
this.info.setClientId(clientID);
this.userSpecifiedClientID = true;
}
}",,0
15529,5e1d70c6957703cdebbfe5d796462e5a89c8bc2,ProjectKB,"public class main {
public Expression getFileName() {
return fileName;
}
}","public class main {
public Expression getFileName() {
return fileName;
}
}",,0
16887,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public void setSessionTaskRunner(TaskRunnerFactory sessionTaskRunner) {
this.sessionTaskRunner = sessionTaskRunner;
}
}","public class main {
public void setSessionTaskRunner(TaskRunnerFactory sessionTaskRunner) {
this.sessionTaskRunner = sessionTaskRunner;
}
}",,0
14001,bbbba5aec514ad88e7d1e168a2519c80229f02f,ProjectKB,"public class main {
public void setUaaTokenEnhancer(UaaTokenEnhancer uaaTokenEnhancer) {
this.uaaTokenEnhancer = uaaTokenEnhancer;
}
}","public class main {
public void setUaaTokenEnhancer(UaaTokenEnhancer uaaTokenEnhancer) {
this.uaaTokenEnhancer = uaaTokenEnhancer;
}
}",,0
13310,53185f0b221b899aacb3c379647a866a8f408a8,ProjectKB,"public class main {
public void process(Exchange exchange) throws Exception {
final String existing = exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);
String target = createFileName(exchange);
Lock lock;
synchronized (locks) {
lock = locks.get(target);
if (lock == null) {
lock = new ReentrantLock();
locks.put(target, lock);
}
}
lock.lock();
try {
processExchange(exchange, target);
} finally {
lock.unlock();
exchange.getIn().removeHeader(Exchange.OVERRULE_FILE_NAME);
exchange.getIn().setHeader(Exchange.FILE_NAME, existing);
}
}
}","public class main {
public void process(Exchange exchange) throws Exception {
final String existing = exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);
String target = createFileName(exchange);
Lock lock;
synchronized (locks) {
lock = locks.get(target);
if (lock == null) {
lock = new ReentrantLock();
locks.put(target, lock);
}
}
lock.lock();
try {
processExchange(exchange, target);
} finally {
lock.unlock();
exchange.getIn().removeHeader(Exchange.OVERRULE_FILE_NAME);
exchange.getIn().setHeader(Exchange.FILE_NAME, existing);
}
}
}",,0
14769,0dcfd21bbfaac6f037f46b7aaaab0e5546fd2a7,ProjectKB,"public class main {
private Servlets() {
}
}","public class main {
private Servlets() {
}
}",,0
2902,8fbe2e,ProjectKB,"public class main {
public int findHeader( String name, int starting ) {
for (int i = starting; i < count; i++) {
if (headers[i].getName().equalsIgnoreCase(name)) {
return i;
}
}
return -1;
}
}","public class main {
public int findHeader( String name, int starting ) {
for (int i = starting; i < count; i++) {
if (headers[i].getName().equalsIgnoreCase(name)) {
return i;
}
}
return -1;
}
}",,0
4260,69c57c8c5f7336b3ffefcc88fd49b51b8f5f4bf,ProjectKB,"public class main {
protected Log getLog() {
return log;
}
}","public class main {
protected Log getLog() {
return log;
}
}",,0
4620,2f489a41ebd06eb14197f8a66afae86ac1397f42,ProjectKB,"public class main {
public static void importGroups(RealmModel realm, RealmRepresentation rep) {
List<GroupRepresentation> groups = rep.getGroups();
if (groups == null) return;
GroupModel parent = null;
for (GroupRepresentation group : groups) {
importGroup(realm, parent, group);
}
}
}","public class main {
public static void importGroups(RealmModel realm, RealmRepresentation rep) {
List<GroupRepresentation> groups = rep.getGroups();
if (groups == null) return;
GroupModel parent = null;
for (GroupRepresentation group : groups) {
importGroup(realm, parent, group);
}
}
}",,0
15662,e5c09a9119167d3064db786d5f00d730b584a53b,ProjectKB,"public class main {
private void addMedias(AtRuleMedia m, String medias, ApplContext ac) throws InvalidParamException {
if (ac.getCssVersion().compareTo(CssVersion.CSS3) < 0) {
StringTokenizer tokens = new StringTokenizer(medias, "","");
while (tokens.hasMoreTokens()) {
m.addMedia(null, tokens.nextToken().trim(), ac);
}
} else {
CssFouffa muP = new CssFouffa(ac, new StringReader(medias));
try {
AtRuleMedia arm = muP.parseMediaDeclaration();
if (arm != null) {
m.allMedia = arm.allMedia;
}
} catch (ParseException pex) {
}
}
}
}","public class main {
private void addMedias(AtRuleMedia m, String medias, ApplContext ac) throws InvalidParamException {
if (ac.getCssVersion().compareTo(CssVersion.CSS3) < 0) {
StringTokenizer tokens = new StringTokenizer(medias, "","");
while (tokens.hasMoreTokens()) {
m.addMedia(null, tokens.nextToken().trim(), ac);
}
} else {
CssFouffa muP = new CssFouffa(ac, new StringReader(medias));
try {
AtRuleMedia arm = muP.parseMediaDeclaration();
if (arm != null) {
m.allMedia = arm.allMedia;
}
} catch (ParseException pex) {
}
}
}
}",,0
6261,d1909ec9c8844cfa6b63bab5c2591f14d714ef6,ProjectKB,"public class main {
public BCryptPasswordEncoder() {
this(-1);
}
}","public class main {
public BCryptPasswordEncoder() {
this(-1);
}
}",,0
18972,0f081e96a504a87a674a873e91e49e7a258216e,ProjectKB,"public class main {
public void writeInt(final int value) {
buffer.writeInt(value);
}
}","public class main {
public void writeInt(final int value) {
buffer.writeInt(value);
}
}",,0
5115,a34f55fc97a81966faf21e3ae404ec24f1f31cf7,ProjectKB,"public class main {
public void testBadFilter6() {
expected.expect(ScimException.class);
expected.expectMessage(containsString(""Invalid operator.""));
endpoints.findUsers(""id gt \""foo\"""", ""ascending"", 0, 100, false);
}
}","public class main {
public void testBadFilter6() {
expected.expect(ScimException.class);
expected.expectMessage(containsString(""Invalid operator.""));
endpoints.findUsers(""id gt \""foo\"""", ""ascending"", 0, 100, false);
}
}",,0
9399,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
public TransportInfo(WireFormat format, Transport transport, TransportFactory transportFactory) {
this.format = format;
this.transport = transport;
this.transportFactory = transportFactory;
}
}
}","public class main {
public TransportInfo(WireFormat format, Transport transport, TransportFactory transportFactory) {
this.format = format;
this.transport = transport;
this.transportFactory = transportFactory;
}
}
}",,0
16643,2d9b168cfbbf5a6d16fa6e8a5b34503e3dc42364,ProjectKB,"public class main {
public final boolean isAttributeWriteAllowed(ObjectName pName, String pAttribute) {
return isAllowed;
}
}","public class main {
public final boolean isAttributeWriteAllowed(ObjectName pName, String pAttribute) {
return isAllowed;
}
}",,0
19288,f861f0993c35e664906609cad275e45a71e2aaf1,ProjectKB,"public class main {
public Class getDeserializerClass() {
return deserializer;
}
}","public class main {
public Class getDeserializerClass() {
return deserializer;
}
}",,0
11347,7003dbdc0801fd65b75700acb2cf77044075ff8c,ProjectKB,"public class main {
public Http2FrameCodecBuilder frameLogger(Http2FrameLogger frameLogger) {
return super.frameLogger(frameLogger);
}
}","public class main {
public Http2FrameCodecBuilder frameLogger(Http2FrameLogger frameLogger) {
return super.frameLogger(frameLogger);
}
}",,0
3292,adb2a34306d67559ee81db155826dc67a02cc85e,ProjectKB,"public class main {
public void setTransportBlockedForWriting(final boolean blocked) {
if(_transportBlockedForWriting != blocked) {
_transportBlockedForWriting = blocked;
_connection.transportStateChanged();
}
}
}","public class main {
public void setTransportBlockedForWriting(final boolean blocked) {
if(_transportBlockedForWriting != blocked) {
_transportBlockedForWriting = blocked;
_connection.transportStateChanged();
}
}
}",,0
9772,38a882331035ffed205d15a5c92b471fd09659c,ProjectKB,"public class main {
protected static String printDiff(Address[][] diff) {
StringBuilder sb=new StringBuilder();
Address[] joined=diff[0], left=diff[1];
sb.append(""joined: "").append(Arrays.toString(joined)).append("", left: "").append(Arrays.toString(left));
return sb.toString();
}
}","public class main {
protected static String printDiff(Address[][] diff) {
StringBuilder sb=new StringBuilder();
Address[] joined=diff[0], left=diff[1];
sb.append(""joined: "").append(Arrays.toString(joined)).append("", left: "").append(Arrays.toString(left));
return sb.toString();
}
}",,0
6780,784fabac7d1586a5614bd4bc8854fd62850dbe26,ProjectKB,"public class main {
public Builder authenticator(Authenticator authenticator) {
if (authenticator == null) throw new NullPointerException(""authenticator == null"");
this.authenticator = authenticator;
return this;
}
}","public class main {
public Builder authenticator(Authenticator authenticator) {
if (authenticator == null) throw new NullPointerException(""authenticator == null"");
this.authenticator = authenticator;
return this;
}
}",,0
13945,75411ab34a3d53c43c2d508b12314a9788aa417,ProjectKB,"public class main {
public List<LearnerHandler> getLearners() {
synchronized (learners) {
return new ArrayList<LearnerHandler>(learners);
}
}
}","public class main {
public List<LearnerHandler> getLearners() {
synchronized (learners) {
return new ArrayList<LearnerHandler>(learners);
}
}
}",,0
135,6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea,ProjectKB,"public class main {
public void testSerializeNonIdentifyingJobParameter() throws Exception {
Map<String, Object> m1 = new HashMap<>();
m1.put(""name"", new JobParameter(""foo"", false));
Map<String, Object> m2 = serializationRoundTrip(m1);
compareContexts(m1, m2);
}
}","public class main {
public void testSerializeNonIdentifyingJobParameter() throws Exception {
Map<String, Object> m1 = new HashMap<>();
m1.put(""name"", new JobParameter(""foo"", false));
Map<String, Object> m2 = serializationRoundTrip(m1);
compareContexts(m1, m2);
}
}",,0
17386,340569b8f4e14a4cb61a9407ed2d9aa4a20bdf49,ProjectKB,"public class main {
public void setPort(int port) {
this.port = port;
}
}","public class main {
public void setPort(int port) {
this.port = port;
}
}",,0
18477,4c4cb664f2e2c3866aadf117d22fb54aa8dd0031,ProjectKB,"public class main {
public boolean supportsThingType(ThingTypeUID thingTypeUID) {
return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);
}
}","public class main {
public boolean supportsThingType(ThingTypeUID thingTypeUID) {
return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);
}
}",,0
16293,58fad56ac6aaa43c6bd8f962d7f2d84438664092,ProjectKB,"public class main {
public void afterPropertiesSet() throws Exception {
Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), ""cube"");
}
}","public class main {
public void afterPropertiesSet() throws Exception {
Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), ""cube"");
}
}",,0
8453,dcb5a74a3987d2264ad195c7844bbb6c81216610,ProjectKB,"public class main {
public String getRepresenter() {
return representer;
}
}","public class main {
public String getRepresenter() {
return representer;
}
}",,0
16799,8467d644813a62f3a836c0c7dee8cf5a41de3c0,ProjectKB,"public class main {
public void setSchema(Schema schema) {
schemaReader.setSchema(schema);
}
}","public class main {
public void setSchema(Schema schema) {
schemaReader.setSchema(schema);
}
}",,0
15436,ff2228fdaf131d57b5c8c5918ee8d07c6dd9bba,ProjectKB,"public class main {
public void registerSubscriptionWithDestinationPattern() {
String sessId = ""sess01"";
String subsId = ""subs01"";
String destPattern = ""/topic/PRICE.STOCK.*.IBM"";
String dest = ""/topic/PRICE.STOCK.NASDAQ.IBM"";
this.registry.registerSubscription(subscribeMessage(sessId, subsId, destPattern));
MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));
assertNotNull(actual);
assertEquals(""Expected one element "" + actual, 1, actual.size());
assertEquals(Collections.singletonList(subsId), actual.get(sessId));
}
}","public class main {
public void registerSubscriptionWithDestinationPattern() {
String sessId = ""sess01"";
String subsId = ""subs01"";
String destPattern = ""/topic/PRICE.STOCK.*.IBM"";
String dest = ""/topic/PRICE.STOCK.NASDAQ.IBM"";
this.registry.registerSubscription(subscribeMessage(sessId, subsId, destPattern));
MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));
assertNotNull(actual);
assertEquals(""Expected one element "" + actual, 1, actual.size());
assertEquals(Collections.singletonList(subsId), actual.get(sessId));
}
}",,0
2559,22a962073c5f12dc5ab281a15d93eb5efc31ab6,ProjectKB,"public class main {
public static void setNumWorkers(Map conf, int workers) {
conf.put(Config.TOPOLOGY_WORKERS, workers);
}
}","public class main {
public static void setNumWorkers(Map conf, int workers) {
conf.put(Config.TOPOLOGY_WORKERS, workers);
}
}",,0
13472,96cedb87b94c07c11152580bf36978186d622b5,ProjectKB,"public class main {
public static List<XAttr> readINodeXAttrs(INodeAttributes inodeAttr) {
XAttrFeature f = inodeAttr.getXAttrFeature();
return f == null ? new ArrayList<XAttr>(0) : f.getXAttrs();
}
}","public class main {
public static List<XAttr> readINodeXAttrs(INodeAttributes inodeAttr) {
XAttrFeature f = inodeAttr.getXAttrFeature();
return f == null ? new ArrayList<XAttr>(0) : f.getXAttrs();
}
}",,0
8375,5dbd6035e4e59259f3e08ba8f1218785f36d1d2d,ProjectKB,"public class main {
public int getValueAsInteger() {
final Object v = value != null ? value : defValue;
return (int) (v instanceof Number ? ((Number) v).intValue() : OFileUtils.getSizeAsNumber(v.toString()));
}
}","public class main {
public int getValueAsInteger() {
final Object v = value != null ? value : defValue;
return (int) (v instanceof Number ? ((Number) v).intValue() : OFileUtils.getSizeAsNumber(v.toString()));
}
}",,0
11707,b53d4589c586e8bbdcc89ed60f32cd7977e9a4f4,ProjectKB,"public class main {
public AjpServerConnection(StreamConnection channel, ByteBufferPool bufferPool, HttpHandler rootHandler, OptionMap undertowOptions, int bufferSize) {
super(channel, bufferPool, rootHandler, undertowOptions, bufferSize);
this.writeReadyHandler = new WriteReadyHandler.ChannelListenerHandler<>(channel.getSinkChannel());
}
}","public class main {
public AjpServerConnection(StreamConnection channel, ByteBufferPool bufferPool, HttpHandler rootHandler, OptionMap undertowOptions, int bufferSize) {
super(channel, bufferPool, rootHandler, undertowOptions, bufferSize);
this.writeReadyHandler = new WriteReadyHandler.ChannelListenerHandler<>(channel.getSinkChannel());
}
}",,0
16730,2caa38a2795fe1f1ae6ceda4d69e826ed7c55e5,ProjectKB,"public class main {
private void setExpire(String value) {
expires = value;
}
}","public class main {
private void setExpire(String value) {
expires = value;
}
}",,0
1271,18e86b6f8bea7326934109aa9ffa705ebf4bde90,ProjectKB,"public class main {
private void encryptCTR(byte[] plaintext, int plaintextOffset, byte[] ciphertext, int ciphertextOffset, int length) {
while (length > 0) {
if (++(iv[15]) == 0)
if (++(iv[14]) == 0)
if (++(iv[13]) == 0)
++(iv[12]);
aes.encrypt(iv, 0, enciv, 0);
int temp = length;
if (temp > 16)
temp = 16;
for (int index = 0; index < temp; ++index)
ciphertext[ciphertextOffset + index] = (byte)(plaintext[plaintextOffset + index] ^ enciv[index]);
plaintextOffset += temp;
ciphertextOffset += temp;
length -= temp;
}
}
}","public class main {
private void encryptCTR(byte[] plaintext, int plaintextOffset, byte[] ciphertext, int ciphertextOffset, int length) {
while (length > 0) {
if (++(iv[15]) == 0)
if (++(iv[14]) == 0)
if (++(iv[13]) == 0)
++(iv[12]);
aes.encrypt(iv, 0, enciv, 0);
int temp = length;
if (temp > 16)
temp = 16;
for (int index = 0; index < temp; ++index)
ciphertext[ciphertextOffset + index] = (byte)(plaintext[plaintextOffset + index] ^ enciv[index]);
plaintextOffset += temp;
ciphertextOffset += temp;
length -= temp;
}
}
}",,0
11491,ec1cebda618e68d12c9b1906820564408cf950e1,ProjectKB,"public class main {
public Object convertExceptionToJson(Throwable pExp, JmxRequest pJmxReq)  {
JsonConvertOptions opts = getJsonConvertOptions(pJmxReq);
try {
JSONObject expObj =
(JSONObject) converters.getToJsonConverter().convertToJson(pExp,null,opts);
return expObj;
} catch (AttributeNotFoundException e) {
return null;
}
}
}","public class main {
public Object convertExceptionToJson(Throwable pExp, JmxRequest pJmxReq)  {
JsonConvertOptions opts = getJsonConvertOptions(pJmxReq);
try {
JSONObject expObj =
(JSONObject) converters.getToJsonConverter().convertToJson(pExp,null,opts);
return expObj;
} catch (AttributeNotFoundException e) {
return null;
}
}
}",,0
17987,2207733b82d85e354fa1a6fd114dae665816fdf,ProjectKB,"public class main {
public void write(byte b[], int off, int len) throws IOException {
if (suspended) {
return;
}
writeBytes(b, off, len);
}
}","public class main {
public void write(byte b[], int off, int len) throws IOException {
if (suspended) {
return;
}
writeBytes(b, off, len);
}
}",,0
15933,702eb206886203c55722335c7d66fbc6604fbe22,ProjectKB,"public class main {
public Region getRegion(String path) {
return getRegion(path, false);
}
}","public class main {
public Region getRegion(String path) {
return getRegion(path, false);
}
}",,0
6763,784fabac7d1586a5614bd4bc8854fd62850dbe26,ProjectKB,"public class main {
public List<ConnectionSpec> connectionSpecs() {
return connectionSpecs;
}
}","public class main {
public List<ConnectionSpec> connectionSpecs() {
return connectionSpecs;
}
}",,0
10464,a68434c258cdcd30587ae7adc5dabbac43eadbbf,ProjectKB,"public class main {
public SSLContextParameters getSslContextParameters() {
return sslContextParameters;
}
}","public class main {
public SSLContextParameters getSslContextParameters() {
return sslContextParameters;
}
}",,0
6958,39cafcb05c99f2aa9fce7e6597664c9ed6a63a9,ProjectKB,"public class main {
public void testResponseWithContentLengthFragmented() {
byte[] data = (""HTTP/1.1 200 OK\r\n"" +
""Content-Length: 10\r\n"" +
""\r\n"").getBytes(CharsetUtil.US_ASCII);
for (int i = 1; i < data.length; i++) {
testResponseWithContentLengthFragmented(data, i);
}
}
}","public class main {
public void testResponseWithContentLengthFragmented() {
byte[] data = (""HTTP/1.1 200 OK\r\n"" +
""Content-Length: 10\r\n"" +
""\r\n"").getBytes(CharsetUtil.US_ASCII);
for (int i = 1; i < data.length; i++) {
testResponseWithContentLengthFragmented(data, i);
}
}
}",,0
14483,18f07455ea9be4166dabb9b590f5a037374830b,ProjectKB,"public class main {
public void testMultiCellGetJSON() throws IOException, JAXBException {
String row_5_url = ""/"" + TABLE + ""/"" + ROW_1 + ""/"" + COLUMN_1;
String row_6_url = ""/"" + TABLE + ""/"" + ROW_2 + ""/"" + COLUMN_2;
StringBuilder path = new StringBuilder();
path.append(""/"");
path.append(TABLE);
path.append(""/multiget/?row="");
path.append(ROW_1);
path.append(""&row="");
path.append(ROW_2);
if (csrfEnabled) {
Response response = client.post(row_5_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_1));
assertEquals(400, response.getCode());
}
client.post(row_5_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_1), extraHdr);
client.post(row_6_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_2), extraHdr);
Response response = client.get(path.toString(), Constants.MIMETYPE_JSON);
assertEquals(200, response.getCode());
assertEquals(Constants.MIMETYPE_JSON, response.getHeader(""content-type""));
client.delete(row_5_url, extraHdr);
client.delete(row_6_url, extraHdr);
}
}","public class main {
public void testMultiCellGetJSON() throws IOException, JAXBException {
String row_5_url = ""/"" + TABLE + ""/"" + ROW_1 + ""/"" + COLUMN_1;
String row_6_url = ""/"" + TABLE + ""/"" + ROW_2 + ""/"" + COLUMN_2;
StringBuilder path = new StringBuilder();
path.append(""/"");
path.append(TABLE);
path.append(""/multiget/?row="");
path.append(ROW_1);
path.append(""&row="");
path.append(ROW_2);
if (csrfEnabled) {
Response response = client.post(row_5_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_1));
assertEquals(400, response.getCode());
}
client.post(row_5_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_1), extraHdr);
client.post(row_6_url, Constants.MIMETYPE_BINARY, Bytes.toBytes(VALUE_2), extraHdr);
Response response = client.get(path.toString(), Constants.MIMETYPE_JSON);
assertEquals(200, response.getCode());
assertEquals(Constants.MIMETYPE_JSON, response.getHeader(""content-type""));
client.delete(row_5_url, extraHdr);
client.delete(row_6_url, extraHdr);
}
}",,0
17990,2207733b82d85e354fa1a6fd114dae665816fdf,ProjectKB,"public class main {
private void writeBytes(ByteBuffer from) throws IOException {
if (closed) {
return;
}
append(from);
bytesWritten += from.remaining();
if (doFlush) {
flushByteBuffer();
}
}
}","public class main {
private void writeBytes(ByteBuffer from) throws IOException {
if (closed) {
return;
}
append(from);
bytesWritten += from.remaining();
if (doFlush) {
flushByteBuffer();
}
}
}",,0
15679,0ac45cbe0b52b9b2e9d9d2217310ddb384353227,ProjectKB,"public class main {
private String buildMessage(Set<String> nullFields) {
StringBuilder sb = new StringBuilder(""'null' in fields: "");
for (String field : nullFields) {
sb.append(field).append(',');
}
return sb.substring(0, sb.length() - 1);
}
}","public class main {
private String buildMessage(Set<String> nullFields) {
StringBuilder sb = new StringBuilder(""'null' in fields: "");
for (String field : nullFields) {
sb.append(field).append(',');
}
return sb.substring(0, sb.length() - 1);
}
}",,0
13550,20e26226107f3133c87d0f5c845e02f824823f69,ProjectKB,"public class main {
public TestPojo() {
}
}","public class main {
public TestPojo() {
}
}",,0
9312,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
public static Collection<Object[]> data() {
return Arrays.asList(new Object[][] {
{""auto+nio+ssl""},
{""auto+ssl""}
}","public class main {
public static Collection<Object[]> data() {
return Arrays.asList(new Object[][] {
{""auto+nio+ssl""},
{""auto+ssl""}
}",,0
374,515c822148d52de9e7cdf4f6b01f7b793f2f273f,ProjectKB,"public class main {
public void setEagerCheckContentAvailable(boolean eagerCheckContentAvailable) {
this.eagerCheckContentAvailable = eagerCheckContentAvailable;
}
}","public class main {
public void setEagerCheckContentAvailable(boolean eagerCheckContentAvailable) {
this.eagerCheckContentAvailable = eagerCheckContentAvailable;
}
}",,0
11152,f404cb68448c188f4d51b085b7fe4ac32bde26e,ProjectKB,"public class main {
public long writeFinal(ByteBuffer[] srcs, int offset, int length) throws IOException {
try {
return Conduits.writeFinalBasic(this, srcs, offset, length);
} catch (IOException | RuntimeException | Error e) {
IoUtils.safeClose(connection);
throw e;
}
}
}","public class main {
public long writeFinal(ByteBuffer[] srcs, int offset, int length) throws IOException {
try {
return Conduits.writeFinalBasic(this, srcs, offset, length);
} catch (IOException | RuntimeException | Error e) {
IoUtils.safeClose(connection);
throw e;
}
}
}",,0
18082,1304c958bf9c38940082f3ad1558d413ed82f2b,ProjectKB,"public class main {
public void testObjectType() {
SecureRandomFactoryBean factory = new SecureRandomFactoryBean();
assertThat(factory.getObjectType()).isEqualTo(SecureRandom.class);
}
}","public class main {
public void testObjectType() {
SecureRandomFactoryBean factory = new SecureRandomFactoryBean();
assertThat(factory.getObjectType()).isEqualTo(SecureRandom.class);
}
}",,0
9309,bde7097fb8173cf871827df7811b3865679b963d,ProjectKB,"public class main {
protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
super.addAdditionalPlugins(plugins);
plugins.add(new BrokerPlugin() {
@Override
public Broker installPlugin(Broker broker) throws Exception {
return new BrokerFilter(broker) {
@Override
public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
super.addConnection(context, info);
hasCertificate = info.getTransportContext() instanceof X509Certificate[];
}
};
}
}","public class main {
protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
super.addAdditionalPlugins(plugins);
plugins.add(new BrokerPlugin() {
@Override
public Broker installPlugin(Broker broker) throws Exception {
return new BrokerFilter(broker) {
@Override
public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
super.addConnection(context, info);
hasCertificate = info.getTransportContext() instanceof X509Certificate[];
}
};
}
}",,0
6401,1cf4fed546904a4a2560f53a2a2391d834b4026,ProjectKB,"public class main {
public void testTwoSameNamedEndpoint() throws Exception {
SpringBusFactory factory = new SpringBusFactory();
Bus bus = factory.createBus();
try {
InstrumentationManager im = bus.getExtension(InstrumentationManager.class);
assertNotNull(im);
InstrumentationManagerImpl imi = (InstrumentationManagerImpl)im;
imi.setServer(ManagementFactory.getPlatformMBeanServer());
imi.setEnabled(true);
imi.init();
Greeter greeter1 = new GreeterImpl();
JaxWsServerFactoryBean svrFactory = new JaxWsServerFactoryBean();
svrFactory.setAddress(""http:            svrFactory.setServiceBean(greeter1);
svrFactory.getProperties(true).put(""managed.endpoint.name"", ""greeter1"");
svrFactory.create();
Greeter greeter2 = new GreeterImpl();
svrFactory = new JaxWsServerFactoryBean();
svrFactory.setAddress(""http:            svrFactory.setServiceBean(greeter2);
svrFactory.getProperties(true).put(""managed.endpoint.name"", ""greeter2"");
svrFactory.create();
MBeanServer mbs = im.getMBeanServer();
ObjectName name = new ObjectName(ManagementConstants.DEFAULT_DOMAIN_NAME
+ "":type=Bus.Service.Endpoint,*"");
Set<?> s = mbs.queryMBeans(name, null);
assertEquals(2, s.size());
} finally {
bus.shutdown(true);
}
}
}","public class main {
public void testTwoSameNamedEndpoint() throws Exception {
SpringBusFactory factory = new SpringBusFactory();
Bus bus = factory.createBus();
try {
InstrumentationManager im = bus.getExtension(InstrumentationManager.class);
assertNotNull(im);
InstrumentationManagerImpl imi = (InstrumentationManagerImpl)im;
imi.setServer(ManagementFactory.getPlatformMBeanServer());
imi.setEnabled(true);
imi.init();
Greeter greeter1 = new GreeterImpl();
JaxWsServerFactoryBean svrFactory = new JaxWsServerFactoryBean();
svrFactory.setAddress(""http:            svrFactory.setServiceBean(greeter1);
svrFactory.getProperties(true).put(""managed.endpoint.name"", ""greeter1"");
svrFactory.create();
Greeter greeter2 = new GreeterImpl();
svrFactory = new JaxWsServerFactoryBean();
svrFactory.setAddress(""http:            svrFactory.setServiceBean(greeter2);
svrFactory.getProperties(true).put(""managed.endpoint.name"", ""greeter2"");
svrFactory.create();
MBeanServer mbs = im.getMBeanServer();
ObjectName name = new ObjectName(ManagementConstants.DEFAULT_DOMAIN_NAME
+ "":type=Bus.Service.Endpoint,*"");
Set<?> s = mbs.queryMBeans(name, null);
assertEquals(2, s.size());
} finally {
bus.shutdown(true);
}
}
}",,0
10284,bc6078ca949039e2076cd08b4cb169c84c1179b1,ProjectKB,"public class main {
public void setValidate(boolean validate){
this.validate = validate;
}
}","public class main {
public void setValidate(boolean validate){
this.validate = validate;
}
}",,0
14591,9cc3793ab2f2f0053c467a9b3f38cb7791cd436a,ProjectKB,"public class main {
public boolean isCubeNameVaildate(final String cubeName) {
if (StringUtils.isEmpty(cubeName) || !ValidateUtil.isAlphanumericUnderscore(cubeName)) {
return false;
}
for (CubeInstance cubeInstance : getCubeManager().listAllCubes()) {
if (cubeName.equalsIgnoreCase(cubeInstance.getName())) {
return false;
}
}
return true;
}
}","public class main {
public boolean isCubeNameVaildate(final String cubeName) {
if (StringUtils.isEmpty(cubeName) || !ValidateUtil.isAlphanumericUnderscore(cubeName)) {
return false;
}
for (CubeInstance cubeInstance : getCubeManager().listAllCubes()) {
if (cubeName.equalsIgnoreCase(cubeInstance.getName())) {
return false;
}
}
return true;
}
}",,0
1796,5b64969d37cf2906efd4623cfd473041ce5132f,ProjectKB,"public class main {
public void setIdempotentKey(String expression) {
this.idempotentKey = createFileLanguageExpression(expression);
}
}","public class main {
public void setIdempotentKey(String expression) {
this.idempotentKey = createFileLanguageExpression(expression);
}
}",,0
1376,3ca3103ebc0813a3b2b4bcb89ca12f5257696e2,ProjectKB,"public class main {
public String getName() {
return name;
}
}","public class main {
public String getName() {
return name;
}
}",,0
9050,00be4f9774e1adf8e7ccc2664da8005fc30bb11d,ProjectKB,"public class main {
public GemFireDeadlockDetector(Set<DistributedMember> targetMembers) {
this.targetMembers = targetMembers;
}
}","public class main {
public GemFireDeadlockDetector(Set<DistributedMember> targetMembers) {
this.targetMembers = targetMembers;
}
}",,0
10907,13e43c1412ad72d99030b4eb4cb72c84fa57d5ff,ProjectKB,"public class main {
protected void doStart() throws Exception {
if (!sharedClient && client != null) {
client.start();
Object tp = getClientThreadPool();
if (tp instanceof LifeCycle) {
LOG.debug(""Starting client thread pool {}"", tp);
((LifeCycle) tp).start();
}
}
}","public class main {
protected void doStart() throws Exception {
if (!sharedClient && client != null) {
client.start();
Object tp = getClientThreadPool();
if (tp instanceof LifeCycle) {
LOG.debug(""Starting client thread pool {}"", tp);
((LifeCycle) tp).start();
}
}
}",,0
331,515c822148d52de9e7cdf4f6b01f7b793f2f273f,ProjectKB,"public class main {
public void disconnect(HttpConsumer consumer) throws Exception {
component.disconnect(consumer);
}
}","public class main {
public void disconnect(HttpConsumer consumer) throws Exception {
component.disconnect(consumer);
}
}",,0
724,5ddd605ee96b8551c7eb00b609a0b97939925b77,ProjectKB,"public class main {
protected void createIndex(RealmModel realm, String userId) {
if (em.find(FederatedUser.class, userId) == null) {
FederatedUser fedUser = new FederatedUser();
fedUser.setId(userId);
fedUser.setRealmId(realm.getId());
fedUser.setStorageProviderId(new StorageId(userId).getProviderId());
em.persist(fedUser);
}
}
}","public class main {
protected void createIndex(RealmModel realm, String userId) {
if (em.find(FederatedUser.class, userId) == null) {
FederatedUser fedUser = new FederatedUser();
fedUser.setId(userId);
fedUser.setRealmId(realm.getId());
fedUser.setStorageProviderId(new StorageId(userId).getProviderId());
em.persist(fedUser);
}
}
}",,0
10589,6df14c8b1e3c644f9f810149e80bba0c2f073dab,ProjectKB,"public class main {
public static void setupClass() {
functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");
functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");
functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");
functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");
functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");
functionStringMap.keySet().forEach(FunctionService::registerFunction);
FunctionService.registerFunction(new DumpDirectoryFiles());
}
}","public class main {
public static void setupClass() {
functionStringMap.put(new LuceneCreateIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");
functionStringMap.put(new LuceneDescribeIndexFunction(), ""CLUSTER:READ:LUCENE"");
functionStringMap.put(new LuceneDestroyIndexFunction(), ""CLUSTER:MANAGE:LUCENE"");
functionStringMap.put(new LuceneListIndexFunction(), ""CLUSTER:READ:LUCENE"");
functionStringMap.put(new LuceneSearchIndexFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new LuceneQueryFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new WaitUntilFlushedFunction(), ""DATA:READ:testRegion"");
functionStringMap.put(new LuceneGetPageFunction(), ""DATA:READ:testRegion"");
functionStringMap.keySet().forEach(FunctionService::registerFunction);
FunctionService.registerFunction(new DumpDirectoryFiles());
}
}",,0
16983,b8fc78ec6c367cbe2a40a674eaec64ac3d7d1ec,ProjectKB,"public class main {
public void setCopyMessageOnSend(boolean copyMessageOnSend) {
this.copyMessageOnSend = copyMessageOnSend;
}
}","public class main {
public void setCopyMessageOnSend(boolean copyMessageOnSend) {
this.copyMessageOnSend = copyMessageOnSend;
}
}",,0
